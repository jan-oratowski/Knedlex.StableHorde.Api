/*
 * AI Horde
 *
 * The API documentation for the AI Horde
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Knedlex.StableHorde.Api.Model;
using Knedlex.StableHorde.Api.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Knedlex.StableHorde.Api.Test.Model
{
    /// <summary>
    ///  Class for testing NoValidRequestFoundStable
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class NoValidRequestFoundStableTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for NoValidRequestFoundStable
        //private NoValidRequestFoundStable instance;

        public NoValidRequestFoundStableTests()
        {
            // TODO uncomment below to create an instance of NoValidRequestFoundStable
            //instance = new NoValidRequestFoundStable();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of NoValidRequestFoundStable
        /// </summary>
        [Fact]
        public void NoValidRequestFoundStableInstanceTest()
        {
            // TODO uncomment below to test "IsType" NoValidRequestFoundStable
            //Assert.IsType<NoValidRequestFoundStable>(instance);
        }

        /// <summary>
        /// Test the property 'WorkerId'
        /// </summary>
        [Fact]
        public void WorkerIdTest()
        {
            // TODO unit test for the property 'WorkerId'
        }

        /// <summary>
        /// Test the property 'Performance'
        /// </summary>
        [Fact]
        public void PerformanceTest()
        {
            // TODO unit test for the property 'Performance'
        }

        /// <summary>
        /// Test the property 'Nsfw'
        /// </summary>
        [Fact]
        public void NsfwTest()
        {
            // TODO unit test for the property 'Nsfw'
        }

        /// <summary>
        /// Test the property 'Blacklist'
        /// </summary>
        [Fact]
        public void BlacklistTest()
        {
            // TODO unit test for the property 'Blacklist'
        }

        /// <summary>
        /// Test the property 'Untrusted'
        /// </summary>
        [Fact]
        public void UntrustedTest()
        {
            // TODO unit test for the property 'Untrusted'
        }

        /// <summary>
        /// Test the property 'Models'
        /// </summary>
        [Fact]
        public void ModelsTest()
        {
            // TODO unit test for the property 'Models'
        }

        /// <summary>
        /// Test the property 'BridgeVersion'
        /// </summary>
        [Fact]
        public void BridgeVersionTest()
        {
            // TODO unit test for the property 'BridgeVersion'
        }

        /// <summary>
        /// Test the property 'Kudos'
        /// </summary>
        [Fact]
        public void KudosTest()
        {
            // TODO unit test for the property 'Kudos'
        }

        /// <summary>
        /// Test the property 'MaxPixels'
        /// </summary>
        [Fact]
        public void MaxPixelsTest()
        {
            // TODO unit test for the property 'MaxPixels'
        }

        /// <summary>
        /// Test the property 'UnsafeIp'
        /// </summary>
        [Fact]
        public void UnsafeIpTest()
        {
            // TODO unit test for the property 'UnsafeIp'
        }

        /// <summary>
        /// Test the property 'Img2img'
        /// </summary>
        [Fact]
        public void Img2imgTest()
        {
            // TODO unit test for the property 'Img2img'
        }

        /// <summary>
        /// Test the property 'Painting'
        /// </summary>
        [Fact]
        public void PaintingTest()
        {
            // TODO unit test for the property 'Painting'
        }

        /// <summary>
        /// Test the property 'PostProcessing'
        /// </summary>
        [Fact]
        public void PostProcessingTest()
        {
            // TODO unit test for the property 'PostProcessing'
        }

        /// <summary>
        /// Test the property 'Lora'
        /// </summary>
        [Fact]
        public void LoraTest()
        {
            // TODO unit test for the property 'Lora'
        }

        /// <summary>
        /// Test the property 'Controlnet'
        /// </summary>
        [Fact]
        public void ControlnetTest()
        {
            // TODO unit test for the property 'Controlnet'
        }
    }
}
