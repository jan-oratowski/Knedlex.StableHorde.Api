/*
 * Stable Horde
 *
 * The API documentation for the Stable Horde
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using StableHorde.Api.Client;
using StableHorde.Api.Model;

namespace StableHorde.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IV2ApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel an unfinished request
        /// </summary>
        /// <remarks>
        /// This request will include all already generated images in base64 encoded .webp files.
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RequestStatusStable</returns>
        RequestStatusStable DeleteAsyncStatus(string id, string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Cancel an unfinished request
        /// </summary>
        /// <remarks>
        /// This request will include all already generated images in base64 encoded .webp files.
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RequestStatusStable</returns>
        ApiResponse<RequestStatusStable> DeleteAsyncStatusWithHttpInfo(string id, string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Delete the worker entry
        /// </summary>
        /// <remarks>
        /// This will delete the worker and their statistics. Will not affect the kudos generated by that worker for their owner. Only the worker&#39;s owner and an admin can use this endpoint. This action is unrecoverable!
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeletedWorker</returns>
        DeletedWorker DeleteWorkerSingle(string workerId, string apikey = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Delete the worker entry
        /// </summary>
        /// <remarks>
        /// This will delete the worker and their statistics. Will not affect the kudos generated by that worker for their owner. Only the worker&#39;s owner and an admin can use this endpoint. This action is unrecoverable!
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeletedWorker</returns>
        ApiResponse<DeletedWorker> DeleteWorkerSingleWithHttpInfo(string workerId, string apikey = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Retrieve the status of an Asynchronous generation request without images
        /// </summary>
        /// <remarks>
        /// Use this request to check the status of a currently running asynchronous request without consuming bandwidth.
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RequestStatusCheck</returns>
        RequestStatusCheck GetAsyncCheck(string id, string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Retrieve the status of an Asynchronous generation request without images
        /// </summary>
        /// <remarks>
        /// Use this request to check the status of a currently running asynchronous request without consuming bandwidth.
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RequestStatusCheck</returns>
        ApiResponse<RequestStatusCheck> GetAsyncCheckWithHttpInfo(string id, string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Retrieve the full status of an Asynchronous generation request
        /// </summary>
        /// <remarks>
        /// This request will include all already generated images in base64 encoded .webp files. As such, you are requested to not retrieve this endpoint often. Instead use the /check/ endpoint first This endpoint is limited to 1 request per minute
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RequestStatusStable</returns>
        RequestStatusStable GetAsyncStatus(string id, string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Retrieve the full status of an Asynchronous generation request
        /// </summary>
        /// <remarks>
        /// This request will include all already generated images in base64 encoded .webp files. As such, you are requested to not retrieve this endpoint often. Instead use the /check/ endpoint first This endpoint is limited to 1 request per minute
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RequestStatusStable</returns>
        ApiResponse<RequestStatusStable> GetAsyncStatusWithHttpInfo(string id, string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Lookup user details based on their API key
        /// </summary>
        /// <remarks>
        /// This can be used to verify a user exists
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">User API key we&#39;re looking for (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserDetailsStable</returns>
        UserDetailsStable GetFindUser(string apikey = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Lookup user details based on their API key
        /// </summary>
        /// <remarks>
        /// This can be used to verify a user exists
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">User API key we&#39;re looking for (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserDetailsStable</returns>
        ApiResponse<UserDetailsStable> GetFindUserWithHttpInfo(string apikey = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Details about the current performance of this Horde
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HordePerformanceStable</returns>
        HordePerformanceStable GetHordeLoad(string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Details about the current performance of this Horde
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HordePerformanceStable</returns>
        ApiResponse<HordePerformanceStable> GetHordeLoadWithHttpInfo(string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Horde Maintenance Mode Status
        /// </summary>
        /// <remarks>
        /// Use this endpoint to quicky determine if this horde is in maintenance, invite_only or raid mode.
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The Admin or Owner API key (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HordeModes</returns>
        HordeModes GetHordeModes(string apikey = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Horde Maintenance Mode Status
        /// </summary>
        /// <remarks>
        /// Use this endpoint to quicky determine if this horde is in maintenance, invite_only or raid mode.
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The Admin or Owner API key (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HordeModes</returns>
        ApiResponse<HordeModes> GetHordeModesWithHttpInfo(string apikey = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Read the latest happenings on the horde
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Newspiece&gt;</returns>
        List<Newspiece> GetHordeNews(string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Read the latest happenings on the horde
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Newspiece&gt;</returns>
        ApiResponse<List<Newspiece>> GetHordeNewsWithHttpInfo(string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Returns a list of models active currently in this horde
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ActiveModel&gt;</returns>
        List<ActiveModel> GetModels(string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Returns a list of models active currently in this horde
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ActiveModel&gt;</returns>
        ApiResponse<List<ActiveModel>> GetModelsWithHttpInfo(string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Details and statistics about a specific user
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apikey">The Admin, Mod or Owner API key (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserDetailsStable</returns>
        UserDetailsStable GetUserSingle(string userId, string apikey = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Details and statistics about a specific user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apikey">The Admin, Mod or Owner API key (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserDetailsStable</returns>
        ApiResponse<UserDetailsStable> GetUserSingleWithHttpInfo(string userId, string apikey = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// A List with the details and statistic of all registered users
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserDetailsStable</returns>
        UserDetailsStable GetUsers(string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// A List with the details and statistic of all registered users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserDetailsStable</returns>
        ApiResponse<UserDetailsStable> GetUsersWithHttpInfo(string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Details of a registered worker
        /// </summary>
        /// <remarks>
        /// Can retrieve the details of a worker even if inactive (A worker is considered inactive if it has not checked in for 5 minutes)
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WorkerDetailsStable</returns>
        WorkerDetailsStable GetWorkerSingle(string workerId, string apikey = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Details of a registered worker
        /// </summary>
        /// <remarks>
        /// Can retrieve the details of a worker even if inactive (A worker is considered inactive if it has not checked in for 5 minutes)
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WorkerDetailsStable</returns>
        ApiResponse<WorkerDetailsStable> GetWorkerSingleWithHttpInfo(string workerId, string apikey = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// A List with the details of all registered and active workers
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;WorkerDetailsStable&gt;</returns>
        List<WorkerDetailsStable> GetWorkers(string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// A List with the details of all registered and active workers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;WorkerDetailsStable&gt;</returns>
        ApiResponse<List<WorkerDetailsStable>> GetWorkersWithHttpInfo(string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Initiate an Asynchronous request to generate images
        /// </summary>
        /// <remarks>
        /// This endpoint will immediately return with the UUID of the request for generation. This endpoint will always be accepted, even if there are no workers available currently to fulfill this request.  Perhaps some will appear in the next 10 minutes. Asynchronous requests live for 10 minutes before being considered stale and being deleted.
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RequestAsync</returns>
        RequestAsync PostAsyncGenerate(string apikey, GenerationInput payload, string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Initiate an Asynchronous request to generate images
        /// </summary>
        /// <remarks>
        /// This endpoint will immediately return with the UUID of the request for generation. This endpoint will always be accepted, even if there are no workers available currently to fulfill this request.  Perhaps some will appear in the next 10 minutes. Asynchronous requests live for 10 minutes before being considered stale and being deleted.
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RequestAsync</returns>
        ApiResponse<RequestAsync> PostAsyncGenerateWithHttpInfo(string apikey, GenerationInput payload, string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Check if there are generation requests queued for fulfillment
        /// </summary>
        /// <remarks>
        /// This endpoint is used by registered workers only
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerationPayload</returns>
        GenerationPayload PostJobPop(string apikey, PopInputStable payload, string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Check if there are generation requests queued for fulfillment
        /// </summary>
        /// <remarks>
        /// This endpoint is used by registered workers only
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerationPayload</returns>
        ApiResponse<GenerationPayload> PostJobPopWithHttpInfo(string apikey, PopInputStable payload, string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Submit a generated image
        /// </summary>
        /// <remarks>
        /// This endpoint is used by registered workers only
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The worker&#39;s owner API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerationSubmitted</returns>
        GenerationSubmitted PostJobSubmit(string apikey, PostJobSubmitRequest payload, string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Submit a generated image
        /// </summary>
        /// <remarks>
        /// This endpoint is used by registered workers only
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The worker&#39;s owner API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerationSubmitted</returns>
        ApiResponse<GenerationSubmitted> PostJobSubmitWithHttpInfo(string apikey, PostJobSubmitRequest payload, string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Initiate a Synchronous request to generate images
        /// </summary>
        /// <remarks>
        /// This connection will only terminate when the images have been generated, or an error occured. If you connection is interrupted, you will not have the request UUID, so you cannot retrieve the images asynchronously.
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RequestStatusStable</returns>
        RequestStatusStable PostSyncGenerate(string apikey, GenerationInput payload, string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Initiate a Synchronous request to generate images
        /// </summary>
        /// <remarks>
        /// This connection will only terminate when the images have been generated, or an error occured. If you connection is interrupted, you will not have the request UUID, so you cannot retrieve the images asynchronously.
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RequestStatusStable</returns>
        ApiResponse<RequestStatusStable> PostSyncGenerateWithHttpInfo(string apikey, GenerationInput payload, string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Transfer Kudos to another registed user
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The sending user&#39;s API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>KudosTransferred</returns>
        KudosTransferred PostTransferKudos(string apikey, PostTransferKudosRequest payload, string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Transfer Kudos to another registed user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The sending user&#39;s API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of KudosTransferred</returns>
        ApiResponse<KudosTransferred> PostTransferKudosWithHttpInfo(string apikey, PostTransferKudosRequest payload, string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Change Horde Modes
        /// </summary>
        /// <remarks>
        /// Endpoint for admins to (un)set the horde into maintenance, invite_only or raid modes.
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The Admin API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HordeModes</returns>
        HordeModes PutHordeModes(string apikey, PutHordeModesRequest payload, string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Change Horde Modes
        /// </summary>
        /// <remarks>
        /// Endpoint for admins to (un)set the horde into maintenance, invite_only or raid modes.
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The Admin API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HordeModes</returns>
        ApiResponse<HordeModes> PutHordeModesWithHttpInfo(string apikey, PutHordeModesRequest payload, string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Endpoint for horde admins to perform operations on users
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apikey">The Admin API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModifyUser</returns>
        ModifyUser PutUserSingle(string userId, string apikey, PutUserSingleRequest payload, string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Endpoint for horde admins to perform operations on users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apikey">The Admin API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModifyUser</returns>
        ApiResponse<ModifyUser> PutUserSingleWithHttpInfo(string userId, string apikey, PutUserSingleRequest payload, string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Put the worker into maintenance or pause mode
        /// </summary>
        /// <remarks>
        /// Maintenance can be set by the owner of the serve or an admin.  When in maintenance, the worker will receive a 503 request when trying to retrieve new requests. Use this to avoid disconnecting your worker in the middle of a generation Paused can be set only by the admins of this Horde. When in paused mode, the worker will not be given any requests to generate.
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModifyWorker</returns>
        ModifyWorker PutWorkerSingle(string workerId, string apikey, PutWorkerSingleRequest payload, string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Put the worker into maintenance or pause mode
        /// </summary>
        /// <remarks>
        /// Maintenance can be set by the owner of the serve or an admin.  When in maintenance, the worker will receive a 503 request when trying to retrieve new requests. Use this to avoid disconnecting your worker in the middle of a generation Paused can be set only by the admins of this Horde. When in paused mode, the worker will not be given any requests to generate.
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModifyWorker</returns>
        ApiResponse<ModifyWorker> PutWorkerSingleWithHttpInfo(string workerId, string apikey, PutWorkerSingleRequest payload, string xFields = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IV2ApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancel an unfinished request
        /// </summary>
        /// <remarks>
        /// This request will include all already generated images in base64 encoded .webp files.
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RequestStatusStable</returns>
        System.Threading.Tasks.Task<RequestStatusStable> DeleteAsyncStatusAsync(string id, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel an unfinished request
        /// </summary>
        /// <remarks>
        /// This request will include all already generated images in base64 encoded .webp files.
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RequestStatusStable)</returns>
        System.Threading.Tasks.Task<ApiResponse<RequestStatusStable>> DeleteAsyncStatusWithHttpInfoAsync(string id, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete the worker entry
        /// </summary>
        /// <remarks>
        /// This will delete the worker and their statistics. Will not affect the kudos generated by that worker for their owner. Only the worker&#39;s owner and an admin can use this endpoint. This action is unrecoverable!
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeletedWorker</returns>
        System.Threading.Tasks.Task<DeletedWorker> DeleteWorkerSingleAsync(string workerId, string apikey = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete the worker entry
        /// </summary>
        /// <remarks>
        /// This will delete the worker and their statistics. Will not affect the kudos generated by that worker for their owner. Only the worker&#39;s owner and an admin can use this endpoint. This action is unrecoverable!
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeletedWorker)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeletedWorker>> DeleteWorkerSingleWithHttpInfoAsync(string workerId, string apikey = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the status of an Asynchronous generation request without images
        /// </summary>
        /// <remarks>
        /// Use this request to check the status of a currently running asynchronous request without consuming bandwidth.
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RequestStatusCheck</returns>
        System.Threading.Tasks.Task<RequestStatusCheck> GetAsyncCheckAsync(string id, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the status of an Asynchronous generation request without images
        /// </summary>
        /// <remarks>
        /// Use this request to check the status of a currently running asynchronous request without consuming bandwidth.
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RequestStatusCheck)</returns>
        System.Threading.Tasks.Task<ApiResponse<RequestStatusCheck>> GetAsyncCheckWithHttpInfoAsync(string id, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the full status of an Asynchronous generation request
        /// </summary>
        /// <remarks>
        /// This request will include all already generated images in base64 encoded .webp files. As such, you are requested to not retrieve this endpoint often. Instead use the /check/ endpoint first This endpoint is limited to 1 request per minute
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RequestStatusStable</returns>
        System.Threading.Tasks.Task<RequestStatusStable> GetAsyncStatusAsync(string id, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the full status of an Asynchronous generation request
        /// </summary>
        /// <remarks>
        /// This request will include all already generated images in base64 encoded .webp files. As such, you are requested to not retrieve this endpoint often. Instead use the /check/ endpoint first This endpoint is limited to 1 request per minute
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RequestStatusStable)</returns>
        System.Threading.Tasks.Task<ApiResponse<RequestStatusStable>> GetAsyncStatusWithHttpInfoAsync(string id, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Lookup user details based on their API key
        /// </summary>
        /// <remarks>
        /// This can be used to verify a user exists
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">User API key we&#39;re looking for (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserDetailsStable</returns>
        System.Threading.Tasks.Task<UserDetailsStable> GetFindUserAsync(string apikey = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Lookup user details based on their API key
        /// </summary>
        /// <remarks>
        /// This can be used to verify a user exists
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">User API key we&#39;re looking for (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserDetailsStable)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserDetailsStable>> GetFindUserWithHttpInfoAsync(string apikey = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Details about the current performance of this Horde
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HordePerformanceStable</returns>
        System.Threading.Tasks.Task<HordePerformanceStable> GetHordeLoadAsync(string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Details about the current performance of this Horde
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HordePerformanceStable)</returns>
        System.Threading.Tasks.Task<ApiResponse<HordePerformanceStable>> GetHordeLoadWithHttpInfoAsync(string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Horde Maintenance Mode Status
        /// </summary>
        /// <remarks>
        /// Use this endpoint to quicky determine if this horde is in maintenance, invite_only or raid mode.
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The Admin or Owner API key (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HordeModes</returns>
        System.Threading.Tasks.Task<HordeModes> GetHordeModesAsync(string apikey = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Horde Maintenance Mode Status
        /// </summary>
        /// <remarks>
        /// Use this endpoint to quicky determine if this horde is in maintenance, invite_only or raid mode.
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The Admin or Owner API key (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HordeModes)</returns>
        System.Threading.Tasks.Task<ApiResponse<HordeModes>> GetHordeModesWithHttpInfoAsync(string apikey = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read the latest happenings on the horde
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Newspiece&gt;</returns>
        System.Threading.Tasks.Task<List<Newspiece>> GetHordeNewsAsync(string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read the latest happenings on the horde
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Newspiece&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Newspiece>>> GetHordeNewsWithHttpInfoAsync(string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a list of models active currently in this horde
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ActiveModel&gt;</returns>
        System.Threading.Tasks.Task<List<ActiveModel>> GetModelsAsync(string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list of models active currently in this horde
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ActiveModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ActiveModel>>> GetModelsWithHttpInfoAsync(string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Details and statistics about a specific user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apikey">The Admin, Mod or Owner API key (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserDetailsStable</returns>
        System.Threading.Tasks.Task<UserDetailsStable> GetUserSingleAsync(string userId, string apikey = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Details and statistics about a specific user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apikey">The Admin, Mod or Owner API key (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserDetailsStable)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserDetailsStable>> GetUserSingleWithHttpInfoAsync(string userId, string apikey = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// A List with the details and statistic of all registered users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserDetailsStable</returns>
        System.Threading.Tasks.Task<UserDetailsStable> GetUsersAsync(string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// A List with the details and statistic of all registered users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserDetailsStable)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserDetailsStable>> GetUsersWithHttpInfoAsync(string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Details of a registered worker
        /// </summary>
        /// <remarks>
        /// Can retrieve the details of a worker even if inactive (A worker is considered inactive if it has not checked in for 5 minutes)
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkerDetailsStable</returns>
        System.Threading.Tasks.Task<WorkerDetailsStable> GetWorkerSingleAsync(string workerId, string apikey = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Details of a registered worker
        /// </summary>
        /// <remarks>
        /// Can retrieve the details of a worker even if inactive (A worker is considered inactive if it has not checked in for 5 minutes)
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkerDetailsStable)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkerDetailsStable>> GetWorkerSingleWithHttpInfoAsync(string workerId, string apikey = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// A List with the details of all registered and active workers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WorkerDetailsStable&gt;</returns>
        System.Threading.Tasks.Task<List<WorkerDetailsStable>> GetWorkersAsync(string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// A List with the details of all registered and active workers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WorkerDetailsStable&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WorkerDetailsStable>>> GetWorkersWithHttpInfoAsync(string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Initiate an Asynchronous request to generate images
        /// </summary>
        /// <remarks>
        /// This endpoint will immediately return with the UUID of the request for generation. This endpoint will always be accepted, even if there are no workers available currently to fulfill this request.  Perhaps some will appear in the next 10 minutes. Asynchronous requests live for 10 minutes before being considered stale and being deleted.
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RequestAsync</returns>
        System.Threading.Tasks.Task<RequestAsync> PostAsyncGenerateAsync(string apikey, GenerationInput payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Initiate an Asynchronous request to generate images
        /// </summary>
        /// <remarks>
        /// This endpoint will immediately return with the UUID of the request for generation. This endpoint will always be accepted, even if there are no workers available currently to fulfill this request.  Perhaps some will appear in the next 10 minutes. Asynchronous requests live for 10 minutes before being considered stale and being deleted.
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RequestAsync)</returns>
        System.Threading.Tasks.Task<ApiResponse<RequestAsync>> PostAsyncGenerateWithHttpInfoAsync(string apikey, GenerationInput payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Check if there are generation requests queued for fulfillment
        /// </summary>
        /// <remarks>
        /// This endpoint is used by registered workers only
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerationPayload</returns>
        System.Threading.Tasks.Task<GenerationPayload> PostJobPopAsync(string apikey, PopInputStable payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check if there are generation requests queued for fulfillment
        /// </summary>
        /// <remarks>
        /// This endpoint is used by registered workers only
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerationPayload)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenerationPayload>> PostJobPopWithHttpInfoAsync(string apikey, PopInputStable payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Submit a generated image
        /// </summary>
        /// <remarks>
        /// This endpoint is used by registered workers only
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The worker&#39;s owner API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerationSubmitted</returns>
        System.Threading.Tasks.Task<GenerationSubmitted> PostJobSubmitAsync(string apikey, PostJobSubmitRequest payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Submit a generated image
        /// </summary>
        /// <remarks>
        /// This endpoint is used by registered workers only
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The worker&#39;s owner API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerationSubmitted)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenerationSubmitted>> PostJobSubmitWithHttpInfoAsync(string apikey, PostJobSubmitRequest payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Initiate a Synchronous request to generate images
        /// </summary>
        /// <remarks>
        /// This connection will only terminate when the images have been generated, or an error occured. If you connection is interrupted, you will not have the request UUID, so you cannot retrieve the images asynchronously.
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RequestStatusStable</returns>
        System.Threading.Tasks.Task<RequestStatusStable> PostSyncGenerateAsync(string apikey, GenerationInput payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Initiate a Synchronous request to generate images
        /// </summary>
        /// <remarks>
        /// This connection will only terminate when the images have been generated, or an error occured. If you connection is interrupted, you will not have the request UUID, so you cannot retrieve the images asynchronously.
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RequestStatusStable)</returns>
        System.Threading.Tasks.Task<ApiResponse<RequestStatusStable>> PostSyncGenerateWithHttpInfoAsync(string apikey, GenerationInput payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Transfer Kudos to another registed user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The sending user&#39;s API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KudosTransferred</returns>
        System.Threading.Tasks.Task<KudosTransferred> PostTransferKudosAsync(string apikey, PostTransferKudosRequest payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Transfer Kudos to another registed user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The sending user&#39;s API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KudosTransferred)</returns>
        System.Threading.Tasks.Task<ApiResponse<KudosTransferred>> PostTransferKudosWithHttpInfoAsync(string apikey, PostTransferKudosRequest payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Change Horde Modes
        /// </summary>
        /// <remarks>
        /// Endpoint for admins to (un)set the horde into maintenance, invite_only or raid modes.
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The Admin API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HordeModes</returns>
        System.Threading.Tasks.Task<HordeModes> PutHordeModesAsync(string apikey, PutHordeModesRequest payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Change Horde Modes
        /// </summary>
        /// <remarks>
        /// Endpoint for admins to (un)set the horde into maintenance, invite_only or raid modes.
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The Admin API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HordeModes)</returns>
        System.Threading.Tasks.Task<ApiResponse<HordeModes>> PutHordeModesWithHttpInfoAsync(string apikey, PutHordeModesRequest payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Endpoint for horde admins to perform operations on users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apikey">The Admin API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifyUser</returns>
        System.Threading.Tasks.Task<ModifyUser> PutUserSingleAsync(string userId, string apikey, PutUserSingleRequest payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Endpoint for horde admins to perform operations on users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apikey">The Admin API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifyUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModifyUser>> PutUserSingleWithHttpInfoAsync(string userId, string apikey, PutUserSingleRequest payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Put the worker into maintenance or pause mode
        /// </summary>
        /// <remarks>
        /// Maintenance can be set by the owner of the serve or an admin.  When in maintenance, the worker will receive a 503 request when trying to retrieve new requests. Use this to avoid disconnecting your worker in the middle of a generation Paused can be set only by the admins of this Horde. When in paused mode, the worker will not be given any requests to generate.
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifyWorker</returns>
        System.Threading.Tasks.Task<ModifyWorker> PutWorkerSingleAsync(string workerId, string apikey, PutWorkerSingleRequest payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Put the worker into maintenance or pause mode
        /// </summary>
        /// <remarks>
        /// Maintenance can be set by the owner of the serve or an admin.  When in maintenance, the worker will receive a 503 request when trying to retrieve new requests. Use this to avoid disconnecting your worker in the middle of a generation Paused can be set only by the admins of this Horde. When in paused mode, the worker will not be given any requests to generate.
        /// </remarks>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifyWorker)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModifyWorker>> PutWorkerSingleWithHttpInfoAsync(string workerId, string apikey, PutWorkerSingleRequest payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IV2Api : IV2ApiSync, IV2ApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class V2Api : IV2Api
    {
        private StableHorde.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="V2Api"/> class.
        /// </summary>
        /// <returns></returns>
        public V2Api() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="V2Api"/> class.
        /// </summary>
        /// <returns></returns>
        public V2Api(string basePath)
        {
            this.Configuration = StableHorde.Api.Client.Configuration.MergeConfigurations(
                StableHorde.Api.Client.GlobalConfiguration.Instance,
                new StableHorde.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new StableHorde.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new StableHorde.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = StableHorde.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="V2Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public V2Api(StableHorde.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = StableHorde.Api.Client.Configuration.MergeConfigurations(
                StableHorde.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new StableHorde.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new StableHorde.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = StableHorde.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="V2Api"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public V2Api(StableHorde.Api.Client.ISynchronousClient client, StableHorde.Api.Client.IAsynchronousClient asyncClient, StableHorde.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = StableHorde.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public StableHorde.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public StableHorde.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public StableHorde.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public StableHorde.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancel an unfinished request This request will include all already generated images in base64 encoded .webp files.
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RequestStatusStable</returns>
        public RequestStatusStable DeleteAsyncStatus(string id, string xFields = default(string), int operationIndex = 0)
        {
            StableHorde.Api.Client.ApiResponse<RequestStatusStable> localVarResponse = DeleteAsyncStatusWithHttpInfo(id, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel an unfinished request This request will include all already generated images in base64 encoded .webp files.
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RequestStatusStable</returns>
        public StableHorde.Api.Client.ApiResponse<RequestStatusStable> DeleteAsyncStatusWithHttpInfo(string id, string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'id' when calling V2Api->DeleteAsyncStatus");
            }

            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", StableHorde.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.DeleteAsyncStatus";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<RequestStatusStable>("/v2/generate/status/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAsyncStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel an unfinished request This request will include all already generated images in base64 encoded .webp files.
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RequestStatusStable</returns>
        public async System.Threading.Tasks.Task<RequestStatusStable> DeleteAsyncStatusAsync(string id, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StableHorde.Api.Client.ApiResponse<RequestStatusStable> localVarResponse = await DeleteAsyncStatusWithHttpInfoAsync(id, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel an unfinished request This request will include all already generated images in base64 encoded .webp files.
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RequestStatusStable)</returns>
        public async System.Threading.Tasks.Task<StableHorde.Api.Client.ApiResponse<RequestStatusStable>> DeleteAsyncStatusWithHttpInfoAsync(string id, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'id' when calling V2Api->DeleteAsyncStatus");
            }


            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", StableHorde.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.DeleteAsyncStatus";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<RequestStatusStable>("/v2/generate/status/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAsyncStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete the worker entry This will delete the worker and their statistics. Will not affect the kudos generated by that worker for their owner. Only the worker&#39;s owner and an admin can use this endpoint. This action is unrecoverable!
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeletedWorker</returns>
        public DeletedWorker DeleteWorkerSingle(string workerId, string apikey = default(string), string xFields = default(string), int operationIndex = 0)
        {
            StableHorde.Api.Client.ApiResponse<DeletedWorker> localVarResponse = DeleteWorkerSingleWithHttpInfo(workerId, apikey, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete the worker entry This will delete the worker and their statistics. Will not affect the kudos generated by that worker for their owner. Only the worker&#39;s owner and an admin can use this endpoint. This action is unrecoverable!
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeletedWorker</returns>
        public StableHorde.Api.Client.ApiResponse<DeletedWorker> DeleteWorkerSingleWithHttpInfo(string workerId, string apikey = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'workerId' is set
            if (workerId == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'workerId' when calling V2Api->DeleteWorkerSingle");
            }

            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("worker_id", StableHorde.Api.Client.ClientUtils.ParameterToString(workerId)); // path parameter
            if (apikey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("apikey", StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.DeleteWorkerSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeletedWorker>("/v2/workers/{worker_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWorkerSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete the worker entry This will delete the worker and their statistics. Will not affect the kudos generated by that worker for their owner. Only the worker&#39;s owner and an admin can use this endpoint. This action is unrecoverable!
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeletedWorker</returns>
        public async System.Threading.Tasks.Task<DeletedWorker> DeleteWorkerSingleAsync(string workerId, string apikey = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StableHorde.Api.Client.ApiResponse<DeletedWorker> localVarResponse = await DeleteWorkerSingleWithHttpInfoAsync(workerId, apikey, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete the worker entry This will delete the worker and their statistics. Will not affect the kudos generated by that worker for their owner. Only the worker&#39;s owner and an admin can use this endpoint. This action is unrecoverable!
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeletedWorker)</returns>
        public async System.Threading.Tasks.Task<StableHorde.Api.Client.ApiResponse<DeletedWorker>> DeleteWorkerSingleWithHttpInfoAsync(string workerId, string apikey = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workerId' is set
            if (workerId == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'workerId' when calling V2Api->DeleteWorkerSingle");
            }


            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("worker_id", StableHorde.Api.Client.ClientUtils.ParameterToString(workerId)); // path parameter
            if (apikey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("apikey", StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.DeleteWorkerSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeletedWorker>("/v2/workers/{worker_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWorkerSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the status of an Asynchronous generation request without images Use this request to check the status of a currently running asynchronous request without consuming bandwidth.
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RequestStatusCheck</returns>
        public RequestStatusCheck GetAsyncCheck(string id, string xFields = default(string), int operationIndex = 0)
        {
            StableHorde.Api.Client.ApiResponse<RequestStatusCheck> localVarResponse = GetAsyncCheckWithHttpInfo(id, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the status of an Asynchronous generation request without images Use this request to check the status of a currently running asynchronous request without consuming bandwidth.
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RequestStatusCheck</returns>
        public StableHorde.Api.Client.ApiResponse<RequestStatusCheck> GetAsyncCheckWithHttpInfo(string id, string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'id' when calling V2Api->GetAsyncCheck");
            }

            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", StableHorde.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetAsyncCheck";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<RequestStatusCheck>("/v2/generate/check/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAsyncCheck", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the status of an Asynchronous generation request without images Use this request to check the status of a currently running asynchronous request without consuming bandwidth.
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RequestStatusCheck</returns>
        public async System.Threading.Tasks.Task<RequestStatusCheck> GetAsyncCheckAsync(string id, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StableHorde.Api.Client.ApiResponse<RequestStatusCheck> localVarResponse = await GetAsyncCheckWithHttpInfoAsync(id, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the status of an Asynchronous generation request without images Use this request to check the status of a currently running asynchronous request without consuming bandwidth.
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RequestStatusCheck)</returns>
        public async System.Threading.Tasks.Task<StableHorde.Api.Client.ApiResponse<RequestStatusCheck>> GetAsyncCheckWithHttpInfoAsync(string id, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'id' when calling V2Api->GetAsyncCheck");
            }


            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", StableHorde.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetAsyncCheck";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RequestStatusCheck>("/v2/generate/check/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAsyncCheck", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the full status of an Asynchronous generation request This request will include all already generated images in base64 encoded .webp files. As such, you are requested to not retrieve this endpoint often. Instead use the /check/ endpoint first This endpoint is limited to 1 request per minute
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RequestStatusStable</returns>
        public RequestStatusStable GetAsyncStatus(string id, string xFields = default(string), int operationIndex = 0)
        {
            StableHorde.Api.Client.ApiResponse<RequestStatusStable> localVarResponse = GetAsyncStatusWithHttpInfo(id, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the full status of an Asynchronous generation request This request will include all already generated images in base64 encoded .webp files. As such, you are requested to not retrieve this endpoint often. Instead use the /check/ endpoint first This endpoint is limited to 1 request per minute
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RequestStatusStable</returns>
        public StableHorde.Api.Client.ApiResponse<RequestStatusStable> GetAsyncStatusWithHttpInfo(string id, string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'id' when calling V2Api->GetAsyncStatus");
            }

            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", StableHorde.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetAsyncStatus";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<RequestStatusStable>("/v2/generate/status/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAsyncStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the full status of an Asynchronous generation request This request will include all already generated images in base64 encoded .webp files. As such, you are requested to not retrieve this endpoint often. Instead use the /check/ endpoint first This endpoint is limited to 1 request per minute
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RequestStatusStable</returns>
        public async System.Threading.Tasks.Task<RequestStatusStable> GetAsyncStatusAsync(string id, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StableHorde.Api.Client.ApiResponse<RequestStatusStable> localVarResponse = await GetAsyncStatusWithHttpInfoAsync(id, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the full status of an Asynchronous generation request This request will include all already generated images in base64 encoded .webp files. As such, you are requested to not retrieve this endpoint often. Instead use the /check/ endpoint first This endpoint is limited to 1 request per minute
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RequestStatusStable)</returns>
        public async System.Threading.Tasks.Task<StableHorde.Api.Client.ApiResponse<RequestStatusStable>> GetAsyncStatusWithHttpInfoAsync(string id, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'id' when calling V2Api->GetAsyncStatus");
            }


            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", StableHorde.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetAsyncStatus";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RequestStatusStable>("/v2/generate/status/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAsyncStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lookup user details based on their API key This can be used to verify a user exists
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">User API key we&#39;re looking for (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserDetailsStable</returns>
        public UserDetailsStable GetFindUser(string apikey = default(string), string xFields = default(string), int operationIndex = 0)
        {
            StableHorde.Api.Client.ApiResponse<UserDetailsStable> localVarResponse = GetFindUserWithHttpInfo(apikey, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lookup user details based on their API key This can be used to verify a user exists
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">User API key we&#39;re looking for (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserDetailsStable</returns>
        public StableHorde.Api.Client.ApiResponse<UserDetailsStable> GetFindUserWithHttpInfo(string apikey = default(string), string xFields = default(string), int operationIndex = 0)
        {
            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (apikey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("apikey", StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetFindUser";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<UserDetailsStable>("/v2/find_user", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFindUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lookup user details based on their API key This can be used to verify a user exists
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">User API key we&#39;re looking for (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserDetailsStable</returns>
        public async System.Threading.Tasks.Task<UserDetailsStable> GetFindUserAsync(string apikey = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StableHorde.Api.Client.ApiResponse<UserDetailsStable> localVarResponse = await GetFindUserWithHttpInfoAsync(apikey, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lookup user details based on their API key This can be used to verify a user exists
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">User API key we&#39;re looking for (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserDetailsStable)</returns>
        public async System.Threading.Tasks.Task<StableHorde.Api.Client.ApiResponse<UserDetailsStable>> GetFindUserWithHttpInfoAsync(string apikey = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (apikey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("apikey", StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetFindUser";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserDetailsStable>("/v2/find_user", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFindUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details about the current performance of this Horde 
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HordePerformanceStable</returns>
        public HordePerformanceStable GetHordeLoad(string xFields = default(string), int operationIndex = 0)
        {
            StableHorde.Api.Client.ApiResponse<HordePerformanceStable> localVarResponse = GetHordeLoadWithHttpInfo(xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details about the current performance of this Horde 
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HordePerformanceStable</returns>
        public StableHorde.Api.Client.ApiResponse<HordePerformanceStable> GetHordeLoadWithHttpInfo(string xFields = default(string), int operationIndex = 0)
        {
            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetHordeLoad";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<HordePerformanceStable>("/v2/status/performance", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHordeLoad", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details about the current performance of this Horde 
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HordePerformanceStable</returns>
        public async System.Threading.Tasks.Task<HordePerformanceStable> GetHordeLoadAsync(string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StableHorde.Api.Client.ApiResponse<HordePerformanceStable> localVarResponse = await GetHordeLoadWithHttpInfoAsync(xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details about the current performance of this Horde 
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HordePerformanceStable)</returns>
        public async System.Threading.Tasks.Task<StableHorde.Api.Client.ApiResponse<HordePerformanceStable>> GetHordeLoadWithHttpInfoAsync(string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetHordeLoad";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HordePerformanceStable>("/v2/status/performance", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHordeLoad", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Horde Maintenance Mode Status Use this endpoint to quicky determine if this horde is in maintenance, invite_only or raid mode.
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The Admin or Owner API key (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HordeModes</returns>
        public HordeModes GetHordeModes(string apikey = default(string), string xFields = default(string), int operationIndex = 0)
        {
            StableHorde.Api.Client.ApiResponse<HordeModes> localVarResponse = GetHordeModesWithHttpInfo(apikey, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Horde Maintenance Mode Status Use this endpoint to quicky determine if this horde is in maintenance, invite_only or raid mode.
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The Admin or Owner API key (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HordeModes</returns>
        public StableHorde.Api.Client.ApiResponse<HordeModes> GetHordeModesWithHttpInfo(string apikey = default(string), string xFields = default(string), int operationIndex = 0)
        {
            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (apikey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("apikey", StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetHordeModes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<HordeModes>("/v2/status/modes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHordeModes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Horde Maintenance Mode Status Use this endpoint to quicky determine if this horde is in maintenance, invite_only or raid mode.
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The Admin or Owner API key (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HordeModes</returns>
        public async System.Threading.Tasks.Task<HordeModes> GetHordeModesAsync(string apikey = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StableHorde.Api.Client.ApiResponse<HordeModes> localVarResponse = await GetHordeModesWithHttpInfoAsync(apikey, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Horde Maintenance Mode Status Use this endpoint to quicky determine if this horde is in maintenance, invite_only or raid mode.
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The Admin or Owner API key (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HordeModes)</returns>
        public async System.Threading.Tasks.Task<StableHorde.Api.Client.ApiResponse<HordeModes>> GetHordeModesWithHttpInfoAsync(string apikey = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (apikey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("apikey", StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetHordeModes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HordeModes>("/v2/status/modes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHordeModes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read the latest happenings on the horde 
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Newspiece&gt;</returns>
        public List<Newspiece> GetHordeNews(string xFields = default(string), int operationIndex = 0)
        {
            StableHorde.Api.Client.ApiResponse<List<Newspiece>> localVarResponse = GetHordeNewsWithHttpInfo(xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read the latest happenings on the horde 
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Newspiece&gt;</returns>
        public StableHorde.Api.Client.ApiResponse<List<Newspiece>> GetHordeNewsWithHttpInfo(string xFields = default(string), int operationIndex = 0)
        {
            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetHordeNews";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Newspiece>>("/v2/status/news", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHordeNews", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read the latest happenings on the horde 
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Newspiece&gt;</returns>
        public async System.Threading.Tasks.Task<List<Newspiece>> GetHordeNewsAsync(string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StableHorde.Api.Client.ApiResponse<List<Newspiece>> localVarResponse = await GetHordeNewsWithHttpInfoAsync(xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read the latest happenings on the horde 
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Newspiece&gt;)</returns>
        public async System.Threading.Tasks.Task<StableHorde.Api.Client.ApiResponse<List<Newspiece>>> GetHordeNewsWithHttpInfoAsync(string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetHordeNews";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Newspiece>>("/v2/status/news", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHordeNews", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of models active currently in this horde 
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ActiveModel&gt;</returns>
        public List<ActiveModel> GetModels(string xFields = default(string), int operationIndex = 0)
        {
            StableHorde.Api.Client.ApiResponse<List<ActiveModel>> localVarResponse = GetModelsWithHttpInfo(xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of models active currently in this horde 
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ActiveModel&gt;</returns>
        public StableHorde.Api.Client.ApiResponse<List<ActiveModel>> GetModelsWithHttpInfo(string xFields = default(string), int operationIndex = 0)
        {
            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetModels";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ActiveModel>>("/v2/status/models", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetModels", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of models active currently in this horde 
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ActiveModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<ActiveModel>> GetModelsAsync(string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StableHorde.Api.Client.ApiResponse<List<ActiveModel>> localVarResponse = await GetModelsWithHttpInfoAsync(xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of models active currently in this horde 
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ActiveModel&gt;)</returns>
        public async System.Threading.Tasks.Task<StableHorde.Api.Client.ApiResponse<List<ActiveModel>>> GetModelsWithHttpInfoAsync(string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetModels";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ActiveModel>>("/v2/status/models", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetModels", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details and statistics about a specific user 
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apikey">The Admin, Mod or Owner API key (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserDetailsStable</returns>
        public UserDetailsStable GetUserSingle(string userId, string apikey = default(string), string xFields = default(string), int operationIndex = 0)
        {
            StableHorde.Api.Client.ApiResponse<UserDetailsStable> localVarResponse = GetUserSingleWithHttpInfo(userId, apikey, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details and statistics about a specific user 
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apikey">The Admin, Mod or Owner API key (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserDetailsStable</returns>
        public StableHorde.Api.Client.ApiResponse<UserDetailsStable> GetUserSingleWithHttpInfo(string userId, string apikey = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'userId' when calling V2Api->GetUserSingle");
            }

            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_id", StableHorde.Api.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (apikey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("apikey", StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetUserSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<UserDetailsStable>("/v2/users/{user_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details and statistics about a specific user 
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apikey">The Admin, Mod or Owner API key (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserDetailsStable</returns>
        public async System.Threading.Tasks.Task<UserDetailsStable> GetUserSingleAsync(string userId, string apikey = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StableHorde.Api.Client.ApiResponse<UserDetailsStable> localVarResponse = await GetUserSingleWithHttpInfoAsync(userId, apikey, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details and statistics about a specific user 
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apikey">The Admin, Mod or Owner API key (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserDetailsStable)</returns>
        public async System.Threading.Tasks.Task<StableHorde.Api.Client.ApiResponse<UserDetailsStable>> GetUserSingleWithHttpInfoAsync(string userId, string apikey = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'userId' when calling V2Api->GetUserSingle");
            }


            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_id", StableHorde.Api.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (apikey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("apikey", StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetUserSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserDetailsStable>("/v2/users/{user_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// A List with the details and statistic of all registered users 
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserDetailsStable</returns>
        public UserDetailsStable GetUsers(string xFields = default(string), int operationIndex = 0)
        {
            StableHorde.Api.Client.ApiResponse<UserDetailsStable> localVarResponse = GetUsersWithHttpInfo(xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// A List with the details and statistic of all registered users 
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserDetailsStable</returns>
        public StableHorde.Api.Client.ApiResponse<UserDetailsStable> GetUsersWithHttpInfo(string xFields = default(string), int operationIndex = 0)
        {
            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetUsers";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<UserDetailsStable>("/v2/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// A List with the details and statistic of all registered users 
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserDetailsStable</returns>
        public async System.Threading.Tasks.Task<UserDetailsStable> GetUsersAsync(string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StableHorde.Api.Client.ApiResponse<UserDetailsStable> localVarResponse = await GetUsersWithHttpInfoAsync(xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// A List with the details and statistic of all registered users 
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserDetailsStable)</returns>
        public async System.Threading.Tasks.Task<StableHorde.Api.Client.ApiResponse<UserDetailsStable>> GetUsersWithHttpInfoAsync(string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetUsers";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserDetailsStable>("/v2/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details of a registered worker Can retrieve the details of a worker even if inactive (A worker is considered inactive if it has not checked in for 5 minutes)
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WorkerDetailsStable</returns>
        public WorkerDetailsStable GetWorkerSingle(string workerId, string apikey = default(string), string xFields = default(string), int operationIndex = 0)
        {
            StableHorde.Api.Client.ApiResponse<WorkerDetailsStable> localVarResponse = GetWorkerSingleWithHttpInfo(workerId, apikey, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of a registered worker Can retrieve the details of a worker even if inactive (A worker is considered inactive if it has not checked in for 5 minutes)
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WorkerDetailsStable</returns>
        public StableHorde.Api.Client.ApiResponse<WorkerDetailsStable> GetWorkerSingleWithHttpInfo(string workerId, string apikey = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'workerId' is set
            if (workerId == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'workerId' when calling V2Api->GetWorkerSingle");
            }

            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("worker_id", StableHorde.Api.Client.ClientUtils.ParameterToString(workerId)); // path parameter
            if (apikey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("apikey", StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetWorkerSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<WorkerDetailsStable>("/v2/workers/{worker_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkerSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details of a registered worker Can retrieve the details of a worker even if inactive (A worker is considered inactive if it has not checked in for 5 minutes)
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkerDetailsStable</returns>
        public async System.Threading.Tasks.Task<WorkerDetailsStable> GetWorkerSingleAsync(string workerId, string apikey = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StableHorde.Api.Client.ApiResponse<WorkerDetailsStable> localVarResponse = await GetWorkerSingleWithHttpInfoAsync(workerId, apikey, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of a registered worker Can retrieve the details of a worker even if inactive (A worker is considered inactive if it has not checked in for 5 minutes)
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkerDetailsStable)</returns>
        public async System.Threading.Tasks.Task<StableHorde.Api.Client.ApiResponse<WorkerDetailsStable>> GetWorkerSingleWithHttpInfoAsync(string workerId, string apikey = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workerId' is set
            if (workerId == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'workerId' when calling V2Api->GetWorkerSingle");
            }


            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("worker_id", StableHorde.Api.Client.ClientUtils.ParameterToString(workerId)); // path parameter
            if (apikey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("apikey", StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetWorkerSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<WorkerDetailsStable>("/v2/workers/{worker_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkerSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// A List with the details of all registered and active workers 
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;WorkerDetailsStable&gt;</returns>
        public List<WorkerDetailsStable> GetWorkers(string xFields = default(string), int operationIndex = 0)
        {
            StableHorde.Api.Client.ApiResponse<List<WorkerDetailsStable>> localVarResponse = GetWorkersWithHttpInfo(xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// A List with the details of all registered and active workers 
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;WorkerDetailsStable&gt;</returns>
        public StableHorde.Api.Client.ApiResponse<List<WorkerDetailsStable>> GetWorkersWithHttpInfo(string xFields = default(string), int operationIndex = 0)
        {
            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetWorkers";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<WorkerDetailsStable>>("/v2/workers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// A List with the details of all registered and active workers 
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WorkerDetailsStable&gt;</returns>
        public async System.Threading.Tasks.Task<List<WorkerDetailsStable>> GetWorkersAsync(string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StableHorde.Api.Client.ApiResponse<List<WorkerDetailsStable>> localVarResponse = await GetWorkersWithHttpInfoAsync(xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// A List with the details of all registered and active workers 
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WorkerDetailsStable&gt;)</returns>
        public async System.Threading.Tasks.Task<StableHorde.Api.Client.ApiResponse<List<WorkerDetailsStable>>> GetWorkersWithHttpInfoAsync(string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetWorkers";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<WorkerDetailsStable>>("/v2/workers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Initiate an Asynchronous request to generate images This endpoint will immediately return with the UUID of the request for generation. This endpoint will always be accepted, even if there are no workers available currently to fulfill this request.  Perhaps some will appear in the next 10 minutes. Asynchronous requests live for 10 minutes before being considered stale and being deleted.
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RequestAsync</returns>
        public RequestAsync PostAsyncGenerate(string apikey, GenerationInput payload, string xFields = default(string), int operationIndex = 0)
        {
            StableHorde.Api.Client.ApiResponse<RequestAsync> localVarResponse = PostAsyncGenerateWithHttpInfo(apikey, payload, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Initiate an Asynchronous request to generate images This endpoint will immediately return with the UUID of the request for generation. This endpoint will always be accepted, even if there are no workers available currently to fulfill this request.  Perhaps some will appear in the next 10 minutes. Asynchronous requests live for 10 minutes before being considered stale and being deleted.
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RequestAsync</returns>
        public StableHorde.Api.Client.ApiResponse<RequestAsync> PostAsyncGenerateWithHttpInfo(string apikey, GenerationInput payload, string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PostAsyncGenerate");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostAsyncGenerate");
            }

            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostAsyncGenerate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RequestAsync>("/v2/generate/async", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAsyncGenerate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Initiate an Asynchronous request to generate images This endpoint will immediately return with the UUID of the request for generation. This endpoint will always be accepted, even if there are no workers available currently to fulfill this request.  Perhaps some will appear in the next 10 minutes. Asynchronous requests live for 10 minutes before being considered stale and being deleted.
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RequestAsync</returns>
        public async System.Threading.Tasks.Task<RequestAsync> PostAsyncGenerateAsync(string apikey, GenerationInput payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StableHorde.Api.Client.ApiResponse<RequestAsync> localVarResponse = await PostAsyncGenerateWithHttpInfoAsync(apikey, payload, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Initiate an Asynchronous request to generate images This endpoint will immediately return with the UUID of the request for generation. This endpoint will always be accepted, even if there are no workers available currently to fulfill this request.  Perhaps some will appear in the next 10 minutes. Asynchronous requests live for 10 minutes before being considered stale and being deleted.
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RequestAsync)</returns>
        public async System.Threading.Tasks.Task<StableHorde.Api.Client.ApiResponse<RequestAsync>> PostAsyncGenerateWithHttpInfoAsync(string apikey, GenerationInput payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PostAsyncGenerate");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostAsyncGenerate");
            }


            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostAsyncGenerate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RequestAsync>("/v2/generate/async", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAsyncGenerate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if there are generation requests queued for fulfillment This endpoint is used by registered workers only
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerationPayload</returns>
        public GenerationPayload PostJobPop(string apikey, PopInputStable payload, string xFields = default(string), int operationIndex = 0)
        {
            StableHorde.Api.Client.ApiResponse<GenerationPayload> localVarResponse = PostJobPopWithHttpInfo(apikey, payload, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check if there are generation requests queued for fulfillment This endpoint is used by registered workers only
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerationPayload</returns>
        public StableHorde.Api.Client.ApiResponse<GenerationPayload> PostJobPopWithHttpInfo(string apikey, PopInputStable payload, string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PostJobPop");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostJobPop");
            }

            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostJobPop";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GenerationPayload>("/v2/generate/pop", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostJobPop", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if there are generation requests queued for fulfillment This endpoint is used by registered workers only
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerationPayload</returns>
        public async System.Threading.Tasks.Task<GenerationPayload> PostJobPopAsync(string apikey, PopInputStable payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StableHorde.Api.Client.ApiResponse<GenerationPayload> localVarResponse = await PostJobPopWithHttpInfoAsync(apikey, payload, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check if there are generation requests queued for fulfillment This endpoint is used by registered workers only
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerationPayload)</returns>
        public async System.Threading.Tasks.Task<StableHorde.Api.Client.ApiResponse<GenerationPayload>> PostJobPopWithHttpInfoAsync(string apikey, PopInputStable payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PostJobPop");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostJobPop");
            }


            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostJobPop";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GenerationPayload>("/v2/generate/pop", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostJobPop", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit a generated image This endpoint is used by registered workers only
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The worker&#39;s owner API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerationSubmitted</returns>
        public GenerationSubmitted PostJobSubmit(string apikey, PostJobSubmitRequest payload, string xFields = default(string), int operationIndex = 0)
        {
            StableHorde.Api.Client.ApiResponse<GenerationSubmitted> localVarResponse = PostJobSubmitWithHttpInfo(apikey, payload, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit a generated image This endpoint is used by registered workers only
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The worker&#39;s owner API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerationSubmitted</returns>
        public StableHorde.Api.Client.ApiResponse<GenerationSubmitted> PostJobSubmitWithHttpInfo(string apikey, PostJobSubmitRequest payload, string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PostJobSubmit");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostJobSubmit");
            }

            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostJobSubmit";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GenerationSubmitted>("/v2/generate/submit", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostJobSubmit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit a generated image This endpoint is used by registered workers only
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The worker&#39;s owner API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerationSubmitted</returns>
        public async System.Threading.Tasks.Task<GenerationSubmitted> PostJobSubmitAsync(string apikey, PostJobSubmitRequest payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StableHorde.Api.Client.ApiResponse<GenerationSubmitted> localVarResponse = await PostJobSubmitWithHttpInfoAsync(apikey, payload, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit a generated image This endpoint is used by registered workers only
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The worker&#39;s owner API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerationSubmitted)</returns>
        public async System.Threading.Tasks.Task<StableHorde.Api.Client.ApiResponse<GenerationSubmitted>> PostJobSubmitWithHttpInfoAsync(string apikey, PostJobSubmitRequest payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PostJobSubmit");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostJobSubmit");
            }


            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostJobSubmit";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GenerationSubmitted>("/v2/generate/submit", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostJobSubmit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Initiate a Synchronous request to generate images This connection will only terminate when the images have been generated, or an error occured. If you connection is interrupted, you will not have the request UUID, so you cannot retrieve the images asynchronously.
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RequestStatusStable</returns>
        public RequestStatusStable PostSyncGenerate(string apikey, GenerationInput payload, string xFields = default(string), int operationIndex = 0)
        {
            StableHorde.Api.Client.ApiResponse<RequestStatusStable> localVarResponse = PostSyncGenerateWithHttpInfo(apikey, payload, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Initiate a Synchronous request to generate images This connection will only terminate when the images have been generated, or an error occured. If you connection is interrupted, you will not have the request UUID, so you cannot retrieve the images asynchronously.
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RequestStatusStable</returns>
        public StableHorde.Api.Client.ApiResponse<RequestStatusStable> PostSyncGenerateWithHttpInfo(string apikey, GenerationInput payload, string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PostSyncGenerate");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostSyncGenerate");
            }

            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostSyncGenerate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RequestStatusStable>("/v2/generate/sync", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSyncGenerate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Initiate a Synchronous request to generate images This connection will only terminate when the images have been generated, or an error occured. If you connection is interrupted, you will not have the request UUID, so you cannot retrieve the images asynchronously.
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RequestStatusStable</returns>
        public async System.Threading.Tasks.Task<RequestStatusStable> PostSyncGenerateAsync(string apikey, GenerationInput payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StableHorde.Api.Client.ApiResponse<RequestStatusStable> localVarResponse = await PostSyncGenerateWithHttpInfoAsync(apikey, payload, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Initiate a Synchronous request to generate images This connection will only terminate when the images have been generated, or an error occured. If you connection is interrupted, you will not have the request UUID, so you cannot retrieve the images asynchronously.
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RequestStatusStable)</returns>
        public async System.Threading.Tasks.Task<StableHorde.Api.Client.ApiResponse<RequestStatusStable>> PostSyncGenerateWithHttpInfoAsync(string apikey, GenerationInput payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PostSyncGenerate");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostSyncGenerate");
            }


            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostSyncGenerate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RequestStatusStable>("/v2/generate/sync", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSyncGenerate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transfer Kudos to another registed user 
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The sending user&#39;s API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>KudosTransferred</returns>
        public KudosTransferred PostTransferKudos(string apikey, PostTransferKudosRequest payload, string xFields = default(string), int operationIndex = 0)
        {
            StableHorde.Api.Client.ApiResponse<KudosTransferred> localVarResponse = PostTransferKudosWithHttpInfo(apikey, payload, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer Kudos to another registed user 
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The sending user&#39;s API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of KudosTransferred</returns>
        public StableHorde.Api.Client.ApiResponse<KudosTransferred> PostTransferKudosWithHttpInfo(string apikey, PostTransferKudosRequest payload, string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PostTransferKudos");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostTransferKudos");
            }

            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostTransferKudos";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<KudosTransferred>("/v2/kudos/transfer", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransferKudos", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transfer Kudos to another registed user 
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The sending user&#39;s API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KudosTransferred</returns>
        public async System.Threading.Tasks.Task<KudosTransferred> PostTransferKudosAsync(string apikey, PostTransferKudosRequest payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StableHorde.Api.Client.ApiResponse<KudosTransferred> localVarResponse = await PostTransferKudosWithHttpInfoAsync(apikey, payload, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer Kudos to another registed user 
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The sending user&#39;s API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KudosTransferred)</returns>
        public async System.Threading.Tasks.Task<StableHorde.Api.Client.ApiResponse<KudosTransferred>> PostTransferKudosWithHttpInfoAsync(string apikey, PostTransferKudosRequest payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PostTransferKudos");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostTransferKudos");
            }


            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostTransferKudos";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<KudosTransferred>("/v2/kudos/transfer", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransferKudos", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Change Horde Modes Endpoint for admins to (un)set the horde into maintenance, invite_only or raid modes.
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The Admin API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HordeModes</returns>
        public HordeModes PutHordeModes(string apikey, PutHordeModesRequest payload, string xFields = default(string), int operationIndex = 0)
        {
            StableHorde.Api.Client.ApiResponse<HordeModes> localVarResponse = PutHordeModesWithHttpInfo(apikey, payload, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Change Horde Modes Endpoint for admins to (un)set the horde into maintenance, invite_only or raid modes.
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The Admin API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HordeModes</returns>
        public StableHorde.Api.Client.ApiResponse<HordeModes> PutHordeModesWithHttpInfo(string apikey, PutHordeModesRequest payload, string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PutHordeModes");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PutHordeModes");
            }

            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PutHordeModes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<HordeModes>("/v2/status/modes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutHordeModes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Change Horde Modes Endpoint for admins to (un)set the horde into maintenance, invite_only or raid modes.
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The Admin API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HordeModes</returns>
        public async System.Threading.Tasks.Task<HordeModes> PutHordeModesAsync(string apikey, PutHordeModesRequest payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StableHorde.Api.Client.ApiResponse<HordeModes> localVarResponse = await PutHordeModesWithHttpInfoAsync(apikey, payload, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Change Horde Modes Endpoint for admins to (un)set the horde into maintenance, invite_only or raid modes.
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The Admin API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HordeModes)</returns>
        public async System.Threading.Tasks.Task<StableHorde.Api.Client.ApiResponse<HordeModes>> PutHordeModesWithHttpInfoAsync(string apikey, PutHordeModesRequest payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PutHordeModes");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PutHordeModes");
            }


            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PutHordeModes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<HordeModes>("/v2/status/modes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutHordeModes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Endpoint for horde admins to perform operations on users 
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apikey">The Admin API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModifyUser</returns>
        public ModifyUser PutUserSingle(string userId, string apikey, PutUserSingleRequest payload, string xFields = default(string), int operationIndex = 0)
        {
            StableHorde.Api.Client.ApiResponse<ModifyUser> localVarResponse = PutUserSingleWithHttpInfo(userId, apikey, payload, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Endpoint for horde admins to perform operations on users 
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apikey">The Admin API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModifyUser</returns>
        public StableHorde.Api.Client.ApiResponse<ModifyUser> PutUserSingleWithHttpInfo(string userId, string apikey, PutUserSingleRequest payload, string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'userId' when calling V2Api->PutUserSingle");
            }

            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PutUserSingle");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PutUserSingle");
            }

            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_id", StableHorde.Api.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("apikey", StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PutUserSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<ModifyUser>("/v2/users/{user_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutUserSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Endpoint for horde admins to perform operations on users 
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apikey">The Admin API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifyUser</returns>
        public async System.Threading.Tasks.Task<ModifyUser> PutUserSingleAsync(string userId, string apikey, PutUserSingleRequest payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StableHorde.Api.Client.ApiResponse<ModifyUser> localVarResponse = await PutUserSingleWithHttpInfoAsync(userId, apikey, payload, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Endpoint for horde admins to perform operations on users 
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apikey">The Admin API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifyUser)</returns>
        public async System.Threading.Tasks.Task<StableHorde.Api.Client.ApiResponse<ModifyUser>> PutUserSingleWithHttpInfoAsync(string userId, string apikey, PutUserSingleRequest payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'userId' when calling V2Api->PutUserSingle");
            }

            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PutUserSingle");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PutUserSingle");
            }


            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_id", StableHorde.Api.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("apikey", StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PutUserSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ModifyUser>("/v2/users/{user_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutUserSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Put the worker into maintenance or pause mode Maintenance can be set by the owner of the serve or an admin.  When in maintenance, the worker will receive a 503 request when trying to retrieve new requests. Use this to avoid disconnecting your worker in the middle of a generation Paused can be set only by the admins of this Horde. When in paused mode, the worker will not be given any requests to generate.
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModifyWorker</returns>
        public ModifyWorker PutWorkerSingle(string workerId, string apikey, PutWorkerSingleRequest payload, string xFields = default(string), int operationIndex = 0)
        {
            StableHorde.Api.Client.ApiResponse<ModifyWorker> localVarResponse = PutWorkerSingleWithHttpInfo(workerId, apikey, payload, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Put the worker into maintenance or pause mode Maintenance can be set by the owner of the serve or an admin.  When in maintenance, the worker will receive a 503 request when trying to retrieve new requests. Use this to avoid disconnecting your worker in the middle of a generation Paused can be set only by the admins of this Horde. When in paused mode, the worker will not be given any requests to generate.
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModifyWorker</returns>
        public StableHorde.Api.Client.ApiResponse<ModifyWorker> PutWorkerSingleWithHttpInfo(string workerId, string apikey, PutWorkerSingleRequest payload, string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'workerId' is set
            if (workerId == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'workerId' when calling V2Api->PutWorkerSingle");
            }

            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PutWorkerSingle");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PutWorkerSingle");
            }

            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("worker_id", StableHorde.Api.Client.ClientUtils.ParameterToString(workerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("apikey", StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PutWorkerSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<ModifyWorker>("/v2/workers/{worker_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutWorkerSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Put the worker into maintenance or pause mode Maintenance can be set by the owner of the serve or an admin.  When in maintenance, the worker will receive a 503 request when trying to retrieve new requests. Use this to avoid disconnecting your worker in the middle of a generation Paused can be set only by the admins of this Horde. When in paused mode, the worker will not be given any requests to generate.
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifyWorker</returns>
        public async System.Threading.Tasks.Task<ModifyWorker> PutWorkerSingleAsync(string workerId, string apikey, PutWorkerSingleRequest payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StableHorde.Api.Client.ApiResponse<ModifyWorker> localVarResponse = await PutWorkerSingleWithHttpInfoAsync(workerId, apikey, payload, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Put the worker into maintenance or pause mode Maintenance can be set by the owner of the serve or an admin.  When in maintenance, the worker will receive a 503 request when trying to retrieve new requests. Use this to avoid disconnecting your worker in the middle of a generation Paused can be set only by the admins of this Horde. When in paused mode, the worker will not be given any requests to generate.
        /// </summary>
        /// <exception cref="StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifyWorker)</returns>
        public async System.Threading.Tasks.Task<StableHorde.Api.Client.ApiResponse<ModifyWorker>> PutWorkerSingleWithHttpInfoAsync(string workerId, string apikey, PutWorkerSingleRequest payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workerId' is set
            if (workerId == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'workerId' when calling V2Api->PutWorkerSingle");
            }

            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PutWorkerSingle");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PutWorkerSingle");
            }


            StableHorde.Api.Client.RequestOptions localVarRequestOptions = new StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("worker_id", StableHorde.Api.Client.ClientUtils.ParameterToString(workerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("apikey", StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PutWorkerSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ModifyWorker>("/v2/workers/{worker_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutWorkerSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
