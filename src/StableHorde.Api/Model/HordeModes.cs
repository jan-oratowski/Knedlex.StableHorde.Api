/*
 * Stable Horde
 *
 * The API documentation for the Stable Horde
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = StableHorde.Api.Client.OpenAPIDateConverter;

namespace StableHorde.Api.Model
{
    /// <summary>
    /// HordeModes
    /// </summary>
    [DataContract(Name = "HordeModes")]
    public partial class HordeModes : IEquatable<HordeModes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HordeModes" /> class.
        /// </summary>
        /// <param name="maintenanceMode">When True, this Horde will not accept new requests for image generation, but will finish processing the ones currently in the queue..</param>
        /// <param name="inviteOnlyMode">When True, this Horde will not only accept worker explicitly invited to join..</param>
        /// <param name="raidMode">When True, this Horde will not always provide full information in order to throw off attackers..</param>
        public HordeModes(bool maintenanceMode = default(bool), bool inviteOnlyMode = default(bool), bool raidMode = default(bool))
        {
            this.MaintenanceMode = maintenanceMode;
            this.InviteOnlyMode = inviteOnlyMode;
            this.RaidMode = raidMode;
        }

        /// <summary>
        /// When True, this Horde will not accept new requests for image generation, but will finish processing the ones currently in the queue.
        /// </summary>
        /// <value>When True, this Horde will not accept new requests for image generation, but will finish processing the ones currently in the queue.</value>
        [DataMember(Name = "maintenance_mode", EmitDefaultValue = true)]
        public bool MaintenanceMode { get; set; }

        /// <summary>
        /// When True, this Horde will not only accept worker explicitly invited to join.
        /// </summary>
        /// <value>When True, this Horde will not only accept worker explicitly invited to join.</value>
        [DataMember(Name = "invite_only_mode", EmitDefaultValue = true)]
        public bool InviteOnlyMode { get; set; }

        /// <summary>
        /// When True, this Horde will not always provide full information in order to throw off attackers.
        /// </summary>
        /// <value>When True, this Horde will not always provide full information in order to throw off attackers.</value>
        [DataMember(Name = "raid_mode", EmitDefaultValue = true)]
        public bool RaidMode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HordeModes {\n");
            sb.Append("  MaintenanceMode: ").Append(MaintenanceMode).Append("\n");
            sb.Append("  InviteOnlyMode: ").Append(InviteOnlyMode).Append("\n");
            sb.Append("  RaidMode: ").Append(RaidMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HordeModes);
        }

        /// <summary>
        /// Returns true if HordeModes instances are equal
        /// </summary>
        /// <param name="input">Instance of HordeModes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HordeModes input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MaintenanceMode == input.MaintenanceMode ||
                    this.MaintenanceMode.Equals(input.MaintenanceMode)
                ) && 
                (
                    this.InviteOnlyMode == input.InviteOnlyMode ||
                    this.InviteOnlyMode.Equals(input.InviteOnlyMode)
                ) && 
                (
                    this.RaidMode == input.RaidMode ||
                    this.RaidMode.Equals(input.RaidMode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.MaintenanceMode.GetHashCode();
                hashCode = (hashCode * 59) + this.InviteOnlyMode.GetHashCode();
                hashCode = (hashCode * 59) + this.RaidMode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
