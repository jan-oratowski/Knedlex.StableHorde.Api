/*
 * AI Horde
 *
 * The API documentation for the AI Horde
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = StableHorde.Api.Client.OpenAPIDateConverter;

namespace StableHorde.Api.Model
{
    /// <summary>
    /// ModelPayloadRootKobold
    /// </summary>
    [DataContract(Name = "ModelPayloadRootKobold")]
    public partial class ModelPayloadRootKobold : IEquatable<ModelPayloadRootKobold>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelPayloadRootKobold" /> class.
        /// </summary>
        /// <param name="n">n.</param>
        /// <param name="frmtadsnsp">Input formatting option. When enabled, adds a leading space to your input if there is no trailing whitespace at the end of the previous action..</param>
        /// <param name="frmtrmblln">Output formatting option. When enabled, replaces all occurrences of two or more consecutive newlines in the output with one newline..</param>
        /// <param name="frmtrmspch">Output formatting option. When enabled, removes #/@%}{+&#x3D;~|\\^&lt;&gt; from the output..</param>
        /// <param name="frmttriminc">Output formatting option. When enabled, removes some characters from the end of the output such that the output doesn&#39;t end in the middle of a sentence. If the output is less than one sentence long, does nothing..</param>
        /// <param name="maxContextLength">Maximum number of tokens to send to the model..</param>
        /// <param name="maxLength">Number of tokens to generate..</param>
        /// <param name="repPen">Base repetition penalty value..</param>
        /// <param name="repPenRange">Repetition penalty range..</param>
        /// <param name="repPenSlope">Repetition penalty slope..</param>
        /// <param name="singleline">Output formatting option. When enabled, removes everything after the first line of the output, including the newline..</param>
        /// <param name="temperature">Temperature value..</param>
        /// <param name="tfs">Tail free sampling value..</param>
        /// <param name="topA">Top-a sampling value..</param>
        /// <param name="topK">Top-k sampling value..</param>
        /// <param name="topP">Top-p sampling value..</param>
        /// <param name="typical">Typical sampling value..</param>
        /// <param name="samplerOrder">samplerOrder.</param>
        /// <param name="useDefaultBadwordsids">When True, uses the default KoboldAI bad word IDs..</param>
        /// <param name="stopSequence">stopSequence.</param>
        /// <param name="minP">Min-p sampling value..</param>
        /// <param name="smoothingFactor">Quadratic sampling value..</param>
        /// <param name="dynatempRange">Dynamic temperature range value..</param>
        /// <param name="dynatempExponent">Dynamic temperature exponent value..</param>
        public ModelPayloadRootKobold(int n = default(int), bool frmtadsnsp = default(bool), bool frmtrmblln = default(bool), bool frmtrmspch = default(bool), bool frmttriminc = default(bool), int maxContextLength = default(int), int maxLength = default(int), decimal repPen = default(decimal), int repPenRange = default(int), decimal repPenSlope = default(decimal), bool singleline = default(bool), decimal temperature = default(decimal), decimal tfs = default(decimal), decimal topA = default(decimal), int topK = default(int), decimal topP = default(decimal), decimal typical = default(decimal), List<int> samplerOrder = default(List<int>), bool useDefaultBadwordsids = default(bool), List<string> stopSequence = default(List<string>), decimal minP = default(decimal), decimal smoothingFactor = default(decimal), decimal dynatempRange = default(decimal), decimal dynatempExponent = default(decimal))
        {
            this.N = n;
            this.Frmtadsnsp = frmtadsnsp;
            this.Frmtrmblln = frmtrmblln;
            this.Frmtrmspch = frmtrmspch;
            this.Frmttriminc = frmttriminc;
            this.MaxContextLength = maxContextLength;
            this.MaxLength = maxLength;
            this.RepPen = repPen;
            this.RepPenRange = repPenRange;
            this.RepPenSlope = repPenSlope;
            this.Singleline = singleline;
            this.Temperature = temperature;
            this.Tfs = tfs;
            this.TopA = topA;
            this.TopK = topK;
            this.TopP = topP;
            this.Typical = typical;
            this.SamplerOrder = samplerOrder;
            this.UseDefaultBadwordsids = useDefaultBadwordsids;
            this.StopSequence = stopSequence;
            this.MinP = minP;
            this.SmoothingFactor = smoothingFactor;
            this.DynatempRange = dynatempRange;
            this.DynatempExponent = dynatempExponent;
        }

        /// <summary>
        /// Gets or Sets N
        /// </summary>
        [DataMember(Name = "n", EmitDefaultValue = false)]
        public int N { get; set; }

        /// <summary>
        /// Input formatting option. When enabled, adds a leading space to your input if there is no trailing whitespace at the end of the previous action.
        /// </summary>
        /// <value>Input formatting option. When enabled, adds a leading space to your input if there is no trailing whitespace at the end of the previous action.</value>
        [DataMember(Name = "frmtadsnsp", EmitDefaultValue = true)]
        public bool Frmtadsnsp { get; set; }

        /// <summary>
        /// Output formatting option. When enabled, replaces all occurrences of two or more consecutive newlines in the output with one newline.
        /// </summary>
        /// <value>Output formatting option. When enabled, replaces all occurrences of two or more consecutive newlines in the output with one newline.</value>
        [DataMember(Name = "frmtrmblln", EmitDefaultValue = true)]
        public bool Frmtrmblln { get; set; }

        /// <summary>
        /// Output formatting option. When enabled, removes #/@%}{+&#x3D;~|\\^&lt;&gt; from the output.
        /// </summary>
        /// <value>Output formatting option. When enabled, removes #/@%}{+&#x3D;~|\\^&lt;&gt; from the output.</value>
        [DataMember(Name = "frmtrmspch", EmitDefaultValue = true)]
        public bool Frmtrmspch { get; set; }

        /// <summary>
        /// Output formatting option. When enabled, removes some characters from the end of the output such that the output doesn&#39;t end in the middle of a sentence. If the output is less than one sentence long, does nothing.
        /// </summary>
        /// <value>Output formatting option. When enabled, removes some characters from the end of the output such that the output doesn&#39;t end in the middle of a sentence. If the output is less than one sentence long, does nothing.</value>
        [DataMember(Name = "frmttriminc", EmitDefaultValue = true)]
        public bool Frmttriminc { get; set; }

        /// <summary>
        /// Maximum number of tokens to send to the model.
        /// </summary>
        /// <value>Maximum number of tokens to send to the model.</value>
        [DataMember(Name = "max_context_length", EmitDefaultValue = false)]
        public int MaxContextLength { get; set; }

        /// <summary>
        /// Number of tokens to generate.
        /// </summary>
        /// <value>Number of tokens to generate.</value>
        [DataMember(Name = "max_length", EmitDefaultValue = false)]
        public int MaxLength { get; set; }

        /// <summary>
        /// Base repetition penalty value.
        /// </summary>
        /// <value>Base repetition penalty value.</value>
        [DataMember(Name = "rep_pen", EmitDefaultValue = false)]
        public decimal RepPen { get; set; }

        /// <summary>
        /// Repetition penalty range.
        /// </summary>
        /// <value>Repetition penalty range.</value>
        [DataMember(Name = "rep_pen_range", EmitDefaultValue = false)]
        public int RepPenRange { get; set; }

        /// <summary>
        /// Repetition penalty slope.
        /// </summary>
        /// <value>Repetition penalty slope.</value>
        [DataMember(Name = "rep_pen_slope", EmitDefaultValue = false)]
        public decimal RepPenSlope { get; set; }

        /// <summary>
        /// Output formatting option. When enabled, removes everything after the first line of the output, including the newline.
        /// </summary>
        /// <value>Output formatting option. When enabled, removes everything after the first line of the output, including the newline.</value>
        [DataMember(Name = "singleline", EmitDefaultValue = true)]
        public bool Singleline { get; set; }

        /// <summary>
        /// Temperature value.
        /// </summary>
        /// <value>Temperature value.</value>
        [DataMember(Name = "temperature", EmitDefaultValue = false)]
        public decimal Temperature { get; set; }

        /// <summary>
        /// Tail free sampling value.
        /// </summary>
        /// <value>Tail free sampling value.</value>
        [DataMember(Name = "tfs", EmitDefaultValue = false)]
        public decimal Tfs { get; set; }

        /// <summary>
        /// Top-a sampling value.
        /// </summary>
        /// <value>Top-a sampling value.</value>
        [DataMember(Name = "top_a", EmitDefaultValue = false)]
        public decimal TopA { get; set; }

        /// <summary>
        /// Top-k sampling value.
        /// </summary>
        /// <value>Top-k sampling value.</value>
        [DataMember(Name = "top_k", EmitDefaultValue = false)]
        public int TopK { get; set; }

        /// <summary>
        /// Top-p sampling value.
        /// </summary>
        /// <value>Top-p sampling value.</value>
        [DataMember(Name = "top_p", EmitDefaultValue = false)]
        public decimal TopP { get; set; }

        /// <summary>
        /// Typical sampling value.
        /// </summary>
        /// <value>Typical sampling value.</value>
        [DataMember(Name = "typical", EmitDefaultValue = false)]
        public decimal Typical { get; set; }

        /// <summary>
        /// Gets or Sets SamplerOrder
        /// </summary>
        [DataMember(Name = "sampler_order", EmitDefaultValue = false)]
        public List<int> SamplerOrder { get; set; }

        /// <summary>
        /// When True, uses the default KoboldAI bad word IDs.
        /// </summary>
        /// <value>When True, uses the default KoboldAI bad word IDs.</value>
        [DataMember(Name = "use_default_badwordsids", EmitDefaultValue = true)]
        public bool UseDefaultBadwordsids { get; set; }

        /// <summary>
        /// Gets or Sets StopSequence
        /// </summary>
        [DataMember(Name = "stop_sequence", EmitDefaultValue = false)]
        public List<string> StopSequence { get; set; }

        /// <summary>
        /// Min-p sampling value.
        /// </summary>
        /// <value>Min-p sampling value.</value>
        [DataMember(Name = "min_p", EmitDefaultValue = false)]
        public decimal MinP { get; set; }

        /// <summary>
        /// Quadratic sampling value.
        /// </summary>
        /// <value>Quadratic sampling value.</value>
        [DataMember(Name = "smoothing_factor", EmitDefaultValue = false)]
        public decimal SmoothingFactor { get; set; }

        /// <summary>
        /// Dynamic temperature range value.
        /// </summary>
        /// <value>Dynamic temperature range value.</value>
        [DataMember(Name = "dynatemp_range", EmitDefaultValue = false)]
        public decimal DynatempRange { get; set; }

        /// <summary>
        /// Dynamic temperature exponent value.
        /// </summary>
        /// <value>Dynamic temperature exponent value.</value>
        [DataMember(Name = "dynatemp_exponent", EmitDefaultValue = false)]
        public decimal DynatempExponent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModelPayloadRootKobold {\n");
            sb.Append("  N: ").Append(N).Append("\n");
            sb.Append("  Frmtadsnsp: ").Append(Frmtadsnsp).Append("\n");
            sb.Append("  Frmtrmblln: ").Append(Frmtrmblln).Append("\n");
            sb.Append("  Frmtrmspch: ").Append(Frmtrmspch).Append("\n");
            sb.Append("  Frmttriminc: ").Append(Frmttriminc).Append("\n");
            sb.Append("  MaxContextLength: ").Append(MaxContextLength).Append("\n");
            sb.Append("  MaxLength: ").Append(MaxLength).Append("\n");
            sb.Append("  RepPen: ").Append(RepPen).Append("\n");
            sb.Append("  RepPenRange: ").Append(RepPenRange).Append("\n");
            sb.Append("  RepPenSlope: ").Append(RepPenSlope).Append("\n");
            sb.Append("  Singleline: ").Append(Singleline).Append("\n");
            sb.Append("  Temperature: ").Append(Temperature).Append("\n");
            sb.Append("  Tfs: ").Append(Tfs).Append("\n");
            sb.Append("  TopA: ").Append(TopA).Append("\n");
            sb.Append("  TopK: ").Append(TopK).Append("\n");
            sb.Append("  TopP: ").Append(TopP).Append("\n");
            sb.Append("  Typical: ").Append(Typical).Append("\n");
            sb.Append("  SamplerOrder: ").Append(SamplerOrder).Append("\n");
            sb.Append("  UseDefaultBadwordsids: ").Append(UseDefaultBadwordsids).Append("\n");
            sb.Append("  StopSequence: ").Append(StopSequence).Append("\n");
            sb.Append("  MinP: ").Append(MinP).Append("\n");
            sb.Append("  SmoothingFactor: ").Append(SmoothingFactor).Append("\n");
            sb.Append("  DynatempRange: ").Append(DynatempRange).Append("\n");
            sb.Append("  DynatempExponent: ").Append(DynatempExponent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelPayloadRootKobold);
        }

        /// <summary>
        /// Returns true if ModelPayloadRootKobold instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelPayloadRootKobold to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelPayloadRootKobold input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.N == input.N ||
                    this.N.Equals(input.N)
                ) && 
                (
                    this.Frmtadsnsp == input.Frmtadsnsp ||
                    this.Frmtadsnsp.Equals(input.Frmtadsnsp)
                ) && 
                (
                    this.Frmtrmblln == input.Frmtrmblln ||
                    this.Frmtrmblln.Equals(input.Frmtrmblln)
                ) && 
                (
                    this.Frmtrmspch == input.Frmtrmspch ||
                    this.Frmtrmspch.Equals(input.Frmtrmspch)
                ) && 
                (
                    this.Frmttriminc == input.Frmttriminc ||
                    this.Frmttriminc.Equals(input.Frmttriminc)
                ) && 
                (
                    this.MaxContextLength == input.MaxContextLength ||
                    this.MaxContextLength.Equals(input.MaxContextLength)
                ) && 
                (
                    this.MaxLength == input.MaxLength ||
                    this.MaxLength.Equals(input.MaxLength)
                ) && 
                (
                    this.RepPen == input.RepPen ||
                    this.RepPen.Equals(input.RepPen)
                ) && 
                (
                    this.RepPenRange == input.RepPenRange ||
                    this.RepPenRange.Equals(input.RepPenRange)
                ) && 
                (
                    this.RepPenSlope == input.RepPenSlope ||
                    this.RepPenSlope.Equals(input.RepPenSlope)
                ) && 
                (
                    this.Singleline == input.Singleline ||
                    this.Singleline.Equals(input.Singleline)
                ) && 
                (
                    this.Temperature == input.Temperature ||
                    this.Temperature.Equals(input.Temperature)
                ) && 
                (
                    this.Tfs == input.Tfs ||
                    this.Tfs.Equals(input.Tfs)
                ) && 
                (
                    this.TopA == input.TopA ||
                    this.TopA.Equals(input.TopA)
                ) && 
                (
                    this.TopK == input.TopK ||
                    this.TopK.Equals(input.TopK)
                ) && 
                (
                    this.TopP == input.TopP ||
                    this.TopP.Equals(input.TopP)
                ) && 
                (
                    this.Typical == input.Typical ||
                    this.Typical.Equals(input.Typical)
                ) && 
                (
                    this.SamplerOrder == input.SamplerOrder ||
                    this.SamplerOrder != null &&
                    input.SamplerOrder != null &&
                    this.SamplerOrder.SequenceEqual(input.SamplerOrder)
                ) && 
                (
                    this.UseDefaultBadwordsids == input.UseDefaultBadwordsids ||
                    this.UseDefaultBadwordsids.Equals(input.UseDefaultBadwordsids)
                ) && 
                (
                    this.StopSequence == input.StopSequence ||
                    this.StopSequence != null &&
                    input.StopSequence != null &&
                    this.StopSequence.SequenceEqual(input.StopSequence)
                ) && 
                (
                    this.MinP == input.MinP ||
                    this.MinP.Equals(input.MinP)
                ) && 
                (
                    this.SmoothingFactor == input.SmoothingFactor ||
                    this.SmoothingFactor.Equals(input.SmoothingFactor)
                ) && 
                (
                    this.DynatempRange == input.DynatempRange ||
                    this.DynatempRange.Equals(input.DynatempRange)
                ) && 
                (
                    this.DynatempExponent == input.DynatempExponent ||
                    this.DynatempExponent.Equals(input.DynatempExponent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.N.GetHashCode();
                hashCode = (hashCode * 59) + this.Frmtadsnsp.GetHashCode();
                hashCode = (hashCode * 59) + this.Frmtrmblln.GetHashCode();
                hashCode = (hashCode * 59) + this.Frmtrmspch.GetHashCode();
                hashCode = (hashCode * 59) + this.Frmttriminc.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxContextLength.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxLength.GetHashCode();
                hashCode = (hashCode * 59) + this.RepPen.GetHashCode();
                hashCode = (hashCode * 59) + this.RepPenRange.GetHashCode();
                hashCode = (hashCode * 59) + this.RepPenSlope.GetHashCode();
                hashCode = (hashCode * 59) + this.Singleline.GetHashCode();
                hashCode = (hashCode * 59) + this.Temperature.GetHashCode();
                hashCode = (hashCode * 59) + this.Tfs.GetHashCode();
                hashCode = (hashCode * 59) + this.TopA.GetHashCode();
                hashCode = (hashCode * 59) + this.TopK.GetHashCode();
                hashCode = (hashCode * 59) + this.TopP.GetHashCode();
                hashCode = (hashCode * 59) + this.Typical.GetHashCode();
                if (this.SamplerOrder != null)
                {
                    hashCode = (hashCode * 59) + this.SamplerOrder.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UseDefaultBadwordsids.GetHashCode();
                if (this.StopSequence != null)
                {
                    hashCode = (hashCode * 59) + this.StopSequence.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MinP.GetHashCode();
                hashCode = (hashCode * 59) + this.SmoothingFactor.GetHashCode();
                hashCode = (hashCode * 59) + this.DynatempRange.GetHashCode();
                hashCode = (hashCode * 59) + this.DynatempExponent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // N (int) maximum
            if (this.N > (int)20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for N, must be a value less than or equal to 20.", new [] { "N" });
            }

            // N (int) minimum
            if (this.N < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for N, must be a value greater than or equal to 1.", new [] { "N" });
            }

            // MaxContextLength (int) maximum
            if (this.MaxContextLength > (int)32000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxContextLength, must be a value less than or equal to 32000.", new [] { "MaxContextLength" });
            }

            // MaxContextLength (int) minimum
            if (this.MaxContextLength < (int)80)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxContextLength, must be a value greater than or equal to 80.", new [] { "MaxContextLength" });
            }

            // MaxLength (int) maximum
            if (this.MaxLength > (int)1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxLength, must be a value less than or equal to 1024.", new [] { "MaxLength" });
            }

            // MaxLength (int) minimum
            if (this.MaxLength < (int)16)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxLength, must be a value greater than or equal to 16.", new [] { "MaxLength" });
            }

            // RepPen (decimal) maximum
            if (this.RepPen > (decimal)3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RepPen, must be a value less than or equal to 3.", new [] { "RepPen" });
            }

            // RepPen (decimal) minimum
            if (this.RepPen < (decimal)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RepPen, must be a value greater than or equal to 1.", new [] { "RepPen" });
            }

            // RepPenRange (int) maximum
            if (this.RepPenRange > (int)4096)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RepPenRange, must be a value less than or equal to 4096.", new [] { "RepPenRange" });
            }

            // RepPenRange (int) minimum
            if (this.RepPenRange < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RepPenRange, must be a value greater than or equal to 0.", new [] { "RepPenRange" });
            }

            // RepPenSlope (decimal) maximum
            if (this.RepPenSlope > (decimal)1E+1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RepPenSlope, must be a value less than or equal to 1E+1.", new [] { "RepPenSlope" });
            }

            // RepPenSlope (decimal) minimum
            if (this.RepPenSlope < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RepPenSlope, must be a value greater than or equal to 0.", new [] { "RepPenSlope" });
            }

            // Temperature (decimal) maximum
            if (this.Temperature > (decimal)5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Temperature, must be a value less than or equal to 5.", new [] { "Temperature" });
            }

            // Temperature (decimal) minimum
            if (this.Temperature < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Temperature, must be a value greater than or equal to 0.", new [] { "Temperature" });
            }

            // Tfs (decimal) maximum
            if (this.Tfs > (decimal)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Tfs, must be a value less than or equal to 1.", new [] { "Tfs" });
            }

            // Tfs (decimal) minimum
            if (this.Tfs < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Tfs, must be a value greater than or equal to 0.", new [] { "Tfs" });
            }

            // TopA (decimal) maximum
            if (this.TopA > (decimal)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TopA, must be a value less than or equal to 1.", new [] { "TopA" });
            }

            // TopA (decimal) minimum
            if (this.TopA < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TopA, must be a value greater than or equal to 0.", new [] { "TopA" });
            }

            // TopK (int) maximum
            if (this.TopK > (int)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TopK, must be a value less than or equal to 100.", new [] { "TopK" });
            }

            // TopK (int) minimum
            if (this.TopK < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TopK, must be a value greater than or equal to 0.", new [] { "TopK" });
            }

            // TopP (decimal) maximum
            if (this.TopP > (decimal)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TopP, must be a value less than or equal to 1.", new [] { "TopP" });
            }

            // TopP (decimal) minimum
            if (this.TopP < (decimal)0.001)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TopP, must be a value greater than or equal to 0.001.", new [] { "TopP" });
            }

            // Typical (decimal) maximum
            if (this.Typical > (decimal)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Typical, must be a value less than or equal to 1.", new [] { "Typical" });
            }

            // Typical (decimal) minimum
            if (this.Typical < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Typical, must be a value greater than or equal to 0.", new [] { "Typical" });
            }

            // MinP (decimal) maximum
            if (this.MinP > (decimal)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MinP, must be a value less than or equal to 1.", new [] { "MinP" });
            }

            // MinP (decimal) minimum
            if (this.MinP < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MinP, must be a value greater than or equal to 0.", new [] { "MinP" });
            }

            // SmoothingFactor (decimal) maximum
            if (this.SmoothingFactor > (decimal)1E+1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SmoothingFactor, must be a value less than or equal to 1E+1.", new [] { "SmoothingFactor" });
            }

            // SmoothingFactor (decimal) minimum
            if (this.SmoothingFactor < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SmoothingFactor, must be a value greater than or equal to 0.", new [] { "SmoothingFactor" });
            }

            // DynatempRange (decimal) maximum
            if (this.DynatempRange > (decimal)5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DynatempRange, must be a value less than or equal to 5.", new [] { "DynatempRange" });
            }

            // DynatempRange (decimal) minimum
            if (this.DynatempRange < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DynatempRange, must be a value greater than or equal to 0.", new [] { "DynatempRange" });
            }

            // DynatempExponent (decimal) maximum
            if (this.DynatempExponent > (decimal)5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DynatempExponent, must be a value less than or equal to 5.", new [] { "DynatempExponent" });
            }

            // DynatempExponent (decimal) minimum
            if (this.DynatempExponent < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DynatempExponent, must be a value greater than or equal to 0.", new [] { "DynatempExponent" });
            }

            yield break;
        }
    }

}
