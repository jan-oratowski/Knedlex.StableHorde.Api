/*
 * AI Horde
 *
 * The API documentation for the AI Horde
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = StableHorde.Api.Client.OpenAPIDateConverter;

namespace StableHorde.Api.Model
{
    /// <summary>
    /// ContributionsDetails
    /// </summary>
    [DataContract(Name = "ContributionsDetails")]
    public partial class ContributionsDetails : IEquatable<ContributionsDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContributionsDetails" /> class.
        /// </summary>
        /// <param name="megapixelsteps">How many megapixelsteps this user has generated..</param>
        /// <param name="fulfillments">How many images this user has generated..</param>
        public ContributionsDetails(decimal megapixelsteps = default(decimal), int fulfillments = default(int))
        {
            this.Megapixelsteps = megapixelsteps;
            this.Fulfillments = fulfillments;
        }

        /// <summary>
        /// How many megapixelsteps this user has generated.
        /// </summary>
        /// <value>How many megapixelsteps this user has generated.</value>
        [DataMember(Name = "megapixelsteps", EmitDefaultValue = false)]
        public decimal Megapixelsteps { get; set; }

        /// <summary>
        /// How many images this user has generated.
        /// </summary>
        /// <value>How many images this user has generated.</value>
        [DataMember(Name = "fulfillments", EmitDefaultValue = false)]
        public int Fulfillments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContributionsDetails {\n");
            sb.Append("  Megapixelsteps: ").Append(Megapixelsteps).Append("\n");
            sb.Append("  Fulfillments: ").Append(Fulfillments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContributionsDetails);
        }

        /// <summary>
        /// Returns true if ContributionsDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ContributionsDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContributionsDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Megapixelsteps == input.Megapixelsteps ||
                    this.Megapixelsteps.Equals(input.Megapixelsteps)
                ) && 
                (
                    this.Fulfillments == input.Fulfillments ||
                    this.Fulfillments.Equals(input.Fulfillments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Megapixelsteps.GetHashCode();
                hashCode = (hashCode * 59) + this.Fulfillments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
