/*
 * AI Horde
 *
 * The API documentation for the AI Horde
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = StableHorde.Api.Client.OpenAPIDateConverter;

namespace StableHorde.Api.Model
{
    /// <summary>
    /// FilterPromptSuspicion
    /// </summary>
    [DataContract(Name = "FilterPromptSuspicion")]
    public partial class FilterPromptSuspicion : IEquatable<FilterPromptSuspicion>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FilterPromptSuspicion" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FilterPromptSuspicion() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FilterPromptSuspicion" /> class.
        /// </summary>
        /// <param name="suspicion">Rates how suspicious the provided prompt is. A suspicion over 2 means it would be blocked. (required) (default to &quot;0&quot;).</param>
        /// <param name="matches">matches.</param>
        public FilterPromptSuspicion(string suspicion = "0", List<string> matches = default(List<string>))
        {
            // to ensure "suspicion" is required (not null)
            if (suspicion == null)
            {
                throw new ArgumentNullException("suspicion is a required property for FilterPromptSuspicion and cannot be null");
            }
            this.Suspicion = suspicion;
            this.Matches = matches;
        }

        /// <summary>
        /// Rates how suspicious the provided prompt is. A suspicion over 2 means it would be blocked.
        /// </summary>
        /// <value>Rates how suspicious the provided prompt is. A suspicion over 2 means it would be blocked.</value>
        [DataMember(Name = "suspicion", IsRequired = true, EmitDefaultValue = true)]
        public string Suspicion { get; set; }

        /// <summary>
        /// Gets or Sets Matches
        /// </summary>
        [DataMember(Name = "matches", EmitDefaultValue = false)]
        public List<string> Matches { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FilterPromptSuspicion {\n");
            sb.Append("  Suspicion: ").Append(Suspicion).Append("\n");
            sb.Append("  Matches: ").Append(Matches).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FilterPromptSuspicion);
        }

        /// <summary>
        /// Returns true if FilterPromptSuspicion instances are equal
        /// </summary>
        /// <param name="input">Instance of FilterPromptSuspicion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FilterPromptSuspicion input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Suspicion == input.Suspicion ||
                    (this.Suspicion != null &&
                    this.Suspicion.Equals(input.Suspicion))
                ) && 
                (
                    this.Matches == input.Matches ||
                    this.Matches != null &&
                    input.Matches != null &&
                    this.Matches.SequenceEqual(input.Matches)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Suspicion != null)
                {
                    hashCode = (hashCode * 59) + this.Suspicion.GetHashCode();
                }
                if (this.Matches != null)
                {
                    hashCode = (hashCode * 59) + this.Matches.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
