/*
 * AI Horde
 *
 * The API documentation for the AI Horde
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = StableHorde.Api.Client.OpenAPIDateConverter;

namespace StableHorde.Api.Model
{
    /// <summary>
    /// PopInputStableAllOf
    /// </summary>
    [DataContract(Name = "PopInputStable_allOf")]
    public partial class PopInputStableAllOf : IEquatable<PopInputStableAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PopInputStableAllOf" /> class.
        /// </summary>
        /// <param name="maxPixels">The maximum amount of pixels this worker can generate..</param>
        /// <param name="blacklist">blacklist.</param>
        /// <param name="allowImg2img">If True, this worker will pick up img2img requests. (default to true).</param>
        /// <param name="allowPainting">If True, this worker will pick up inpainting/outpainting requests. (default to true).</param>
        /// <param name="allowUnsafeIpaddr">If True, this worker will pick up img2img requests coming from clients with an unsafe IP. (default to true).</param>
        /// <param name="allowPostProcessing">If True, this worker will pick up requests requesting post-processing. (default to true).</param>
        /// <param name="allowControlnet">If True, this worker will pick up requests requesting ControlNet. (default to true).</param>
        /// <param name="allowLora">If True, this worker will pick up requests requesting LoRas. (default to true).</param>
        public PopInputStableAllOf(int maxPixels = default(int), List<string> blacklist = default(List<string>), bool allowImg2img = true, bool allowPainting = true, bool allowUnsafeIpaddr = true, bool allowPostProcessing = true, bool allowControlnet = true, bool allowLora = true)
        {
            this.MaxPixels = maxPixels;
            this.Blacklist = blacklist;
            this.AllowImg2img = allowImg2img;
            this.AllowPainting = allowPainting;
            this.AllowUnsafeIpaddr = allowUnsafeIpaddr;
            this.AllowPostProcessing = allowPostProcessing;
            this.AllowControlnet = allowControlnet;
            this.AllowLora = allowLora;
        }

        /// <summary>
        /// The maximum amount of pixels this worker can generate.
        /// </summary>
        /// <value>The maximum amount of pixels this worker can generate.</value>
        [DataMember(Name = "max_pixels", EmitDefaultValue = false)]
        public int MaxPixels { get; set; }

        /// <summary>
        /// Gets or Sets Blacklist
        /// </summary>
        [DataMember(Name = "blacklist", EmitDefaultValue = false)]
        public List<string> Blacklist { get; set; }

        /// <summary>
        /// If True, this worker will pick up img2img requests.
        /// </summary>
        /// <value>If True, this worker will pick up img2img requests.</value>
        [DataMember(Name = "allow_img2img", EmitDefaultValue = true)]
        public bool AllowImg2img { get; set; }

        /// <summary>
        /// If True, this worker will pick up inpainting/outpainting requests.
        /// </summary>
        /// <value>If True, this worker will pick up inpainting/outpainting requests.</value>
        [DataMember(Name = "allow_painting", EmitDefaultValue = true)]
        public bool AllowPainting { get; set; }

        /// <summary>
        /// If True, this worker will pick up img2img requests coming from clients with an unsafe IP.
        /// </summary>
        /// <value>If True, this worker will pick up img2img requests coming from clients with an unsafe IP.</value>
        [DataMember(Name = "allow_unsafe_ipaddr", EmitDefaultValue = true)]
        public bool AllowUnsafeIpaddr { get; set; }

        /// <summary>
        /// If True, this worker will pick up requests requesting post-processing.
        /// </summary>
        /// <value>If True, this worker will pick up requests requesting post-processing.</value>
        [DataMember(Name = "allow_post_processing", EmitDefaultValue = true)]
        public bool AllowPostProcessing { get; set; }

        /// <summary>
        /// If True, this worker will pick up requests requesting ControlNet.
        /// </summary>
        /// <value>If True, this worker will pick up requests requesting ControlNet.</value>
        [DataMember(Name = "allow_controlnet", EmitDefaultValue = true)]
        public bool AllowControlnet { get; set; }

        /// <summary>
        /// If True, this worker will pick up requests requesting LoRas.
        /// </summary>
        /// <value>If True, this worker will pick up requests requesting LoRas.</value>
        [DataMember(Name = "allow_lora", EmitDefaultValue = true)]
        public bool AllowLora { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PopInputStableAllOf {\n");
            sb.Append("  MaxPixels: ").Append(MaxPixels).Append("\n");
            sb.Append("  Blacklist: ").Append(Blacklist).Append("\n");
            sb.Append("  AllowImg2img: ").Append(AllowImg2img).Append("\n");
            sb.Append("  AllowPainting: ").Append(AllowPainting).Append("\n");
            sb.Append("  AllowUnsafeIpaddr: ").Append(AllowUnsafeIpaddr).Append("\n");
            sb.Append("  AllowPostProcessing: ").Append(AllowPostProcessing).Append("\n");
            sb.Append("  AllowControlnet: ").Append(AllowControlnet).Append("\n");
            sb.Append("  AllowLora: ").Append(AllowLora).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PopInputStableAllOf);
        }

        /// <summary>
        /// Returns true if PopInputStableAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of PopInputStableAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PopInputStableAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MaxPixels == input.MaxPixels ||
                    this.MaxPixels.Equals(input.MaxPixels)
                ) && 
                (
                    this.Blacklist == input.Blacklist ||
                    this.Blacklist != null &&
                    input.Blacklist != null &&
                    this.Blacklist.SequenceEqual(input.Blacklist)
                ) && 
                (
                    this.AllowImg2img == input.AllowImg2img ||
                    this.AllowImg2img.Equals(input.AllowImg2img)
                ) && 
                (
                    this.AllowPainting == input.AllowPainting ||
                    this.AllowPainting.Equals(input.AllowPainting)
                ) && 
                (
                    this.AllowUnsafeIpaddr == input.AllowUnsafeIpaddr ||
                    this.AllowUnsafeIpaddr.Equals(input.AllowUnsafeIpaddr)
                ) && 
                (
                    this.AllowPostProcessing == input.AllowPostProcessing ||
                    this.AllowPostProcessing.Equals(input.AllowPostProcessing)
                ) && 
                (
                    this.AllowControlnet == input.AllowControlnet ||
                    this.AllowControlnet.Equals(input.AllowControlnet)
                ) && 
                (
                    this.AllowLora == input.AllowLora ||
                    this.AllowLora.Equals(input.AllowLora)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.MaxPixels.GetHashCode();
                if (this.Blacklist != null)
                {
                    hashCode = (hashCode * 59) + this.Blacklist.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AllowImg2img.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowPainting.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowUnsafeIpaddr.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowPostProcessing.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowControlnet.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowLora.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
