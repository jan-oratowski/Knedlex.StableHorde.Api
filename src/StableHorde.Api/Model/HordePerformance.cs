/*
 * AI Horde
 *
 * The API documentation for the AI Horde
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = StableHorde.Api.Client.OpenAPIDateConverter;

namespace StableHorde.Api.Model
{
    /// <summary>
    /// HordePerformance
    /// </summary>
    [DataContract(Name = "HordePerformance")]
    public partial class HordePerformance : IEquatable<HordePerformance>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HordePerformance" /> class.
        /// </summary>
        /// <param name="queuedRequests">The amount of waiting and processing image requests currently in this horde..</param>
        /// <param name="queuedTextRequests">The amount of waiting and processing text requests currently in this horde..</param>
        /// <param name="workerCount">How many workers are actively processing prompt generations in this horde in the past 5 minutes..</param>
        /// <param name="textWorkerCount">How many workers are actively processing prompt generations in this horde in the past 5 minutes..</param>
        /// <param name="threadCount">How many worker threads are actively processing prompt generations in this {horde_noun} in the past 5 minutes..</param>
        /// <param name="textThreadCount">How many worker threads are actively processing prompt generations in this {horde_noun} in the past 5 minutes..</param>
        /// <param name="queuedMegapixelsteps">The amount of megapixelsteps in waiting and processing requests currently in this horde..</param>
        /// <param name="pastMinuteMegapixelsteps">How many megapixelsteps this horde generated in the last minute..</param>
        /// <param name="queuedForms">The amount of image interrogations waiting and processing currently in this horde..</param>
        /// <param name="interrogatorCount">How many workers are actively processing image interrogations in this {horde_noun} in the past 5 minutes..</param>
        /// <param name="interrogatorThreadCount">How many worker threads are actively processing image interrogation in this {horde_noun} in the past 5 minutes..</param>
        /// <param name="queuedTokens">The amount of tokens in waiting and processing requests currently in this horde..</param>
        /// <param name="pastMinuteTokens">How many tokens this horde generated in the last minute..</param>
        public HordePerformance(int queuedRequests = default(int), int queuedTextRequests = default(int), int workerCount = default(int), int textWorkerCount = default(int), int threadCount = default(int), int textThreadCount = default(int), decimal queuedMegapixelsteps = default(decimal), decimal pastMinuteMegapixelsteps = default(decimal), decimal queuedForms = default(decimal), int interrogatorCount = default(int), int interrogatorThreadCount = default(int), decimal queuedTokens = default(decimal), decimal pastMinuteTokens = default(decimal))
        {
            this.QueuedRequests = queuedRequests;
            this.QueuedTextRequests = queuedTextRequests;
            this.WorkerCount = workerCount;
            this.TextWorkerCount = textWorkerCount;
            this.ThreadCount = threadCount;
            this.TextThreadCount = textThreadCount;
            this.QueuedMegapixelsteps = queuedMegapixelsteps;
            this.PastMinuteMegapixelsteps = pastMinuteMegapixelsteps;
            this.QueuedForms = queuedForms;
            this.InterrogatorCount = interrogatorCount;
            this.InterrogatorThreadCount = interrogatorThreadCount;
            this.QueuedTokens = queuedTokens;
            this.PastMinuteTokens = pastMinuteTokens;
        }

        /// <summary>
        /// The amount of waiting and processing image requests currently in this horde.
        /// </summary>
        /// <value>The amount of waiting and processing image requests currently in this horde.</value>
        [DataMember(Name = "queued_requests", EmitDefaultValue = false)]
        public int QueuedRequests { get; set; }

        /// <summary>
        /// The amount of waiting and processing text requests currently in this horde.
        /// </summary>
        /// <value>The amount of waiting and processing text requests currently in this horde.</value>
        [DataMember(Name = "queued_text_requests", EmitDefaultValue = false)]
        public int QueuedTextRequests { get; set; }

        /// <summary>
        /// How many workers are actively processing prompt generations in this horde in the past 5 minutes.
        /// </summary>
        /// <value>How many workers are actively processing prompt generations in this horde in the past 5 minutes.</value>
        [DataMember(Name = "worker_count", EmitDefaultValue = false)]
        public int WorkerCount { get; set; }

        /// <summary>
        /// How many workers are actively processing prompt generations in this horde in the past 5 minutes.
        /// </summary>
        /// <value>How many workers are actively processing prompt generations in this horde in the past 5 minutes.</value>
        [DataMember(Name = "text_worker_count", EmitDefaultValue = false)]
        public int TextWorkerCount { get; set; }

        /// <summary>
        /// How many worker threads are actively processing prompt generations in this {horde_noun} in the past 5 minutes.
        /// </summary>
        /// <value>How many worker threads are actively processing prompt generations in this {horde_noun} in the past 5 minutes.</value>
        [DataMember(Name = "thread_count", EmitDefaultValue = false)]
        public int ThreadCount { get; set; }

        /// <summary>
        /// How many worker threads are actively processing prompt generations in this {horde_noun} in the past 5 minutes.
        /// </summary>
        /// <value>How many worker threads are actively processing prompt generations in this {horde_noun} in the past 5 minutes.</value>
        [DataMember(Name = "text_thread_count", EmitDefaultValue = false)]
        public int TextThreadCount { get; set; }

        /// <summary>
        /// The amount of megapixelsteps in waiting and processing requests currently in this horde.
        /// </summary>
        /// <value>The amount of megapixelsteps in waiting and processing requests currently in this horde.</value>
        [DataMember(Name = "queued_megapixelsteps", EmitDefaultValue = false)]
        public decimal QueuedMegapixelsteps { get; set; }

        /// <summary>
        /// How many megapixelsteps this horde generated in the last minute.
        /// </summary>
        /// <value>How many megapixelsteps this horde generated in the last minute.</value>
        [DataMember(Name = "past_minute_megapixelsteps", EmitDefaultValue = false)]
        public decimal PastMinuteMegapixelsteps { get; set; }

        /// <summary>
        /// The amount of image interrogations waiting and processing currently in this horde.
        /// </summary>
        /// <value>The amount of image interrogations waiting and processing currently in this horde.</value>
        [DataMember(Name = "queued_forms", EmitDefaultValue = false)]
        public decimal QueuedForms { get; set; }

        /// <summary>
        /// How many workers are actively processing image interrogations in this {horde_noun} in the past 5 minutes.
        /// </summary>
        /// <value>How many workers are actively processing image interrogations in this {horde_noun} in the past 5 minutes.</value>
        [DataMember(Name = "interrogator_count", EmitDefaultValue = false)]
        public int InterrogatorCount { get; set; }

        /// <summary>
        /// How many worker threads are actively processing image interrogation in this {horde_noun} in the past 5 minutes.
        /// </summary>
        /// <value>How many worker threads are actively processing image interrogation in this {horde_noun} in the past 5 minutes.</value>
        [DataMember(Name = "interrogator_thread_count", EmitDefaultValue = false)]
        public int InterrogatorThreadCount { get; set; }

        /// <summary>
        /// The amount of tokens in waiting and processing requests currently in this horde.
        /// </summary>
        /// <value>The amount of tokens in waiting and processing requests currently in this horde.</value>
        [DataMember(Name = "queued_tokens", EmitDefaultValue = false)]
        public decimal QueuedTokens { get; set; }

        /// <summary>
        /// How many tokens this horde generated in the last minute.
        /// </summary>
        /// <value>How many tokens this horde generated in the last minute.</value>
        [DataMember(Name = "past_minute_tokens", EmitDefaultValue = false)]
        public decimal PastMinuteTokens { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HordePerformance {\n");
            sb.Append("  QueuedRequests: ").Append(QueuedRequests).Append("\n");
            sb.Append("  QueuedTextRequests: ").Append(QueuedTextRequests).Append("\n");
            sb.Append("  WorkerCount: ").Append(WorkerCount).Append("\n");
            sb.Append("  TextWorkerCount: ").Append(TextWorkerCount).Append("\n");
            sb.Append("  ThreadCount: ").Append(ThreadCount).Append("\n");
            sb.Append("  TextThreadCount: ").Append(TextThreadCount).Append("\n");
            sb.Append("  QueuedMegapixelsteps: ").Append(QueuedMegapixelsteps).Append("\n");
            sb.Append("  PastMinuteMegapixelsteps: ").Append(PastMinuteMegapixelsteps).Append("\n");
            sb.Append("  QueuedForms: ").Append(QueuedForms).Append("\n");
            sb.Append("  InterrogatorCount: ").Append(InterrogatorCount).Append("\n");
            sb.Append("  InterrogatorThreadCount: ").Append(InterrogatorThreadCount).Append("\n");
            sb.Append("  QueuedTokens: ").Append(QueuedTokens).Append("\n");
            sb.Append("  PastMinuteTokens: ").Append(PastMinuteTokens).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HordePerformance);
        }

        /// <summary>
        /// Returns true if HordePerformance instances are equal
        /// </summary>
        /// <param name="input">Instance of HordePerformance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HordePerformance input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.QueuedRequests == input.QueuedRequests ||
                    this.QueuedRequests.Equals(input.QueuedRequests)
                ) && 
                (
                    this.QueuedTextRequests == input.QueuedTextRequests ||
                    this.QueuedTextRequests.Equals(input.QueuedTextRequests)
                ) && 
                (
                    this.WorkerCount == input.WorkerCount ||
                    this.WorkerCount.Equals(input.WorkerCount)
                ) && 
                (
                    this.TextWorkerCount == input.TextWorkerCount ||
                    this.TextWorkerCount.Equals(input.TextWorkerCount)
                ) && 
                (
                    this.ThreadCount == input.ThreadCount ||
                    this.ThreadCount.Equals(input.ThreadCount)
                ) && 
                (
                    this.TextThreadCount == input.TextThreadCount ||
                    this.TextThreadCount.Equals(input.TextThreadCount)
                ) && 
                (
                    this.QueuedMegapixelsteps == input.QueuedMegapixelsteps ||
                    this.QueuedMegapixelsteps.Equals(input.QueuedMegapixelsteps)
                ) && 
                (
                    this.PastMinuteMegapixelsteps == input.PastMinuteMegapixelsteps ||
                    this.PastMinuteMegapixelsteps.Equals(input.PastMinuteMegapixelsteps)
                ) && 
                (
                    this.QueuedForms == input.QueuedForms ||
                    this.QueuedForms.Equals(input.QueuedForms)
                ) && 
                (
                    this.InterrogatorCount == input.InterrogatorCount ||
                    this.InterrogatorCount.Equals(input.InterrogatorCount)
                ) && 
                (
                    this.InterrogatorThreadCount == input.InterrogatorThreadCount ||
                    this.InterrogatorThreadCount.Equals(input.InterrogatorThreadCount)
                ) && 
                (
                    this.QueuedTokens == input.QueuedTokens ||
                    this.QueuedTokens.Equals(input.QueuedTokens)
                ) && 
                (
                    this.PastMinuteTokens == input.PastMinuteTokens ||
                    this.PastMinuteTokens.Equals(input.PastMinuteTokens)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.QueuedRequests.GetHashCode();
                hashCode = (hashCode * 59) + this.QueuedTextRequests.GetHashCode();
                hashCode = (hashCode * 59) + this.WorkerCount.GetHashCode();
                hashCode = (hashCode * 59) + this.TextWorkerCount.GetHashCode();
                hashCode = (hashCode * 59) + this.ThreadCount.GetHashCode();
                hashCode = (hashCode * 59) + this.TextThreadCount.GetHashCode();
                hashCode = (hashCode * 59) + this.QueuedMegapixelsteps.GetHashCode();
                hashCode = (hashCode * 59) + this.PastMinuteMegapixelsteps.GetHashCode();
                hashCode = (hashCode * 59) + this.QueuedForms.GetHashCode();
                hashCode = (hashCode * 59) + this.InterrogatorCount.GetHashCode();
                hashCode = (hashCode * 59) + this.InterrogatorThreadCount.GetHashCode();
                hashCode = (hashCode * 59) + this.QueuedTokens.GetHashCode();
                hashCode = (hashCode * 59) + this.PastMinuteTokens.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
