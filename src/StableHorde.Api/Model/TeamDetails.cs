/*
 * AI Horde
 *
 * The API documentation for the AI Horde
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = StableHorde.Api.Client.OpenAPIDateConverter;

namespace StableHorde.Api.Model
{
    /// <summary>
    /// TeamDetails
    /// </summary>
    [DataContract(Name = "TeamDetails")]
    public partial class TeamDetails : IEquatable<TeamDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TeamDetails" /> class.
        /// </summary>
        /// <param name="name">The Name given to this team..</param>
        /// <param name="id">The UUID of this team..</param>
        /// <param name="info">Extra information or comments about this team provided by its owner..</param>
        /// <param name="requestsFulfilled">How many images this team&#39;s workers have generated..</param>
        /// <param name="kudos">How many Kudos the workers in this team have been rewarded while part of this team..</param>
        /// <param name="uptime">The total amount of time workers have stayed online while on this team..</param>
        /// <param name="creator">The alias of the user which created this team..</param>
        /// <param name="workerCount">How many workers have been dedicated to this team..</param>
        /// <param name="workers">workers.</param>
        /// <param name="models">models.</param>
        public TeamDetails(string name = default(string), string id = default(string), string info = default(string), int requestsFulfilled = default(int), decimal kudos = default(decimal), int uptime = default(int), string creator = default(string), int workerCount = default(int), List<WorkerDetailsLite> workers = default(List<WorkerDetailsLite>), List<ActiveModelLite> models = default(List<ActiveModelLite>))
        {
            this.Name = name;
            this.Id = id;
            this.Info = info;
            this.RequestsFulfilled = requestsFulfilled;
            this.Kudos = kudos;
            this.Uptime = uptime;
            this.Creator = creator;
            this.WorkerCount = workerCount;
            this.Workers = workers;
            this.Models = models;
        }

        /// <summary>
        /// The Name given to this team.
        /// </summary>
        /// <value>The Name given to this team.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The UUID of this team.
        /// </summary>
        /// <value>The UUID of this team.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Extra information or comments about this team provided by its owner.
        /// </summary>
        /// <value>Extra information or comments about this team provided by its owner.</value>
        [DataMember(Name = "info", EmitDefaultValue = false)]
        public string Info { get; set; }

        /// <summary>
        /// How many images this team&#39;s workers have generated.
        /// </summary>
        /// <value>How many images this team&#39;s workers have generated.</value>
        [DataMember(Name = "requests_fulfilled", EmitDefaultValue = false)]
        public int RequestsFulfilled { get; set; }

        /// <summary>
        /// How many Kudos the workers in this team have been rewarded while part of this team.
        /// </summary>
        /// <value>How many Kudos the workers in this team have been rewarded while part of this team.</value>
        [DataMember(Name = "kudos", EmitDefaultValue = false)]
        public decimal Kudos { get; set; }

        /// <summary>
        /// The total amount of time workers have stayed online while on this team.
        /// </summary>
        /// <value>The total amount of time workers have stayed online while on this team.</value>
        [DataMember(Name = "uptime", EmitDefaultValue = false)]
        public int Uptime { get; set; }

        /// <summary>
        /// The alias of the user which created this team.
        /// </summary>
        /// <value>The alias of the user which created this team.</value>
        [DataMember(Name = "creator", EmitDefaultValue = false)]
        public string Creator { get; set; }

        /// <summary>
        /// How many workers have been dedicated to this team.
        /// </summary>
        /// <value>How many workers have been dedicated to this team.</value>
        [DataMember(Name = "worker_count", EmitDefaultValue = false)]
        public int WorkerCount { get; set; }

        /// <summary>
        /// Gets or Sets Workers
        /// </summary>
        [DataMember(Name = "workers", EmitDefaultValue = false)]
        public List<WorkerDetailsLite> Workers { get; set; }

        /// <summary>
        /// Gets or Sets Models
        /// </summary>
        [DataMember(Name = "models", EmitDefaultValue = false)]
        public List<ActiveModelLite> Models { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TeamDetails {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Info: ").Append(Info).Append("\n");
            sb.Append("  RequestsFulfilled: ").Append(RequestsFulfilled).Append("\n");
            sb.Append("  Kudos: ").Append(Kudos).Append("\n");
            sb.Append("  Uptime: ").Append(Uptime).Append("\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("  WorkerCount: ").Append(WorkerCount).Append("\n");
            sb.Append("  Workers: ").Append(Workers).Append("\n");
            sb.Append("  Models: ").Append(Models).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TeamDetails);
        }

        /// <summary>
        /// Returns true if TeamDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of TeamDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TeamDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Info == input.Info ||
                    (this.Info != null &&
                    this.Info.Equals(input.Info))
                ) && 
                (
                    this.RequestsFulfilled == input.RequestsFulfilled ||
                    this.RequestsFulfilled.Equals(input.RequestsFulfilled)
                ) && 
                (
                    this.Kudos == input.Kudos ||
                    this.Kudos.Equals(input.Kudos)
                ) && 
                (
                    this.Uptime == input.Uptime ||
                    this.Uptime.Equals(input.Uptime)
                ) && 
                (
                    this.Creator == input.Creator ||
                    (this.Creator != null &&
                    this.Creator.Equals(input.Creator))
                ) && 
                (
                    this.WorkerCount == input.WorkerCount ||
                    this.WorkerCount.Equals(input.WorkerCount)
                ) && 
                (
                    this.Workers == input.Workers ||
                    this.Workers != null &&
                    input.Workers != null &&
                    this.Workers.SequenceEqual(input.Workers)
                ) && 
                (
                    this.Models == input.Models ||
                    this.Models != null &&
                    input.Models != null &&
                    this.Models.SequenceEqual(input.Models)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Info != null)
                {
                    hashCode = (hashCode * 59) + this.Info.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RequestsFulfilled.GetHashCode();
                hashCode = (hashCode * 59) + this.Kudos.GetHashCode();
                hashCode = (hashCode * 59) + this.Uptime.GetHashCode();
                if (this.Creator != null)
                {
                    hashCode = (hashCode * 59) + this.Creator.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.WorkerCount.GetHashCode();
                if (this.Workers != null)
                {
                    hashCode = (hashCode * 59) + this.Workers.GetHashCode();
                }
                if (this.Models != null)
                {
                    hashCode = (hashCode * 59) + this.Models.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
