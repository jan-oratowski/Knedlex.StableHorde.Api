/*
 * AI Horde
 *
 * The API documentation for the AI Horde
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = StableHorde.Api.Client.OpenAPIDateConverter;

namespace StableHorde.Api.Model
{
    /// <summary>
    /// SharedKeyInput
    /// </summary>
    [DataContract(Name = "SharedKeyInput")]
    public partial class SharedKeyInput : IEquatable<SharedKeyInput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharedKeyInput" /> class.
        /// </summary>
        /// <param name="kudos">The Kudos limit assigned to this key. If -1, then anyone with this key can use an unlimited amount of kudos from this account..</param>
        /// <param name="expiry">The amount of days after which this key will expire. If -1, this key will not expire..</param>
        /// <param name="name">A descriptive name for this key..</param>
        /// <param name="maxImagePixels">The maximum amount of image pixels this key can generate per job. -1 means unlimited..</param>
        /// <param name="maxImageSteps">The maximum amount of image steps this key can use per job. -1 means unlimited..</param>
        /// <param name="maxTextTokens">The maximum amount of text tokens this key can generate per job. -1 means unlimited..</param>
        public SharedKeyInput(int kudos = default(int), int expiry = default(int), string name = default(string), int maxImagePixels = default(int), int maxImageSteps = default(int), int maxTextTokens = default(int))
        {
            this.Kudos = kudos;
            this.Expiry = expiry;
            this.Name = name;
            this.MaxImagePixels = maxImagePixels;
            this.MaxImageSteps = maxImageSteps;
            this.MaxTextTokens = maxTextTokens;
        }

        /// <summary>
        /// The Kudos limit assigned to this key. If -1, then anyone with this key can use an unlimited amount of kudos from this account.
        /// </summary>
        /// <value>The Kudos limit assigned to this key. If -1, then anyone with this key can use an unlimited amount of kudos from this account.</value>
        [DataMember(Name = "kudos", EmitDefaultValue = false)]
        public int Kudos { get; set; }

        /// <summary>
        /// The amount of days after which this key will expire. If -1, this key will not expire.
        /// </summary>
        /// <value>The amount of days after which this key will expire. If -1, this key will not expire.</value>
        [DataMember(Name = "expiry", EmitDefaultValue = false)]
        public int Expiry { get; set; }

        /// <summary>
        /// A descriptive name for this key.
        /// </summary>
        /// <value>A descriptive name for this key.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The maximum amount of image pixels this key can generate per job. -1 means unlimited.
        /// </summary>
        /// <value>The maximum amount of image pixels this key can generate per job. -1 means unlimited.</value>
        [DataMember(Name = "max_image_pixels", EmitDefaultValue = false)]
        public int MaxImagePixels { get; set; }

        /// <summary>
        /// The maximum amount of image steps this key can use per job. -1 means unlimited.
        /// </summary>
        /// <value>The maximum amount of image steps this key can use per job. -1 means unlimited.</value>
        [DataMember(Name = "max_image_steps", EmitDefaultValue = false)]
        public int MaxImageSteps { get; set; }

        /// <summary>
        /// The maximum amount of text tokens this key can generate per job. -1 means unlimited.
        /// </summary>
        /// <value>The maximum amount of text tokens this key can generate per job. -1 means unlimited.</value>
        [DataMember(Name = "max_text_tokens", EmitDefaultValue = false)]
        public int MaxTextTokens { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SharedKeyInput {\n");
            sb.Append("  Kudos: ").Append(Kudos).Append("\n");
            sb.Append("  Expiry: ").Append(Expiry).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  MaxImagePixels: ").Append(MaxImagePixels).Append("\n");
            sb.Append("  MaxImageSteps: ").Append(MaxImageSteps).Append("\n");
            sb.Append("  MaxTextTokens: ").Append(MaxTextTokens).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SharedKeyInput);
        }

        /// <summary>
        /// Returns true if SharedKeyInput instances are equal
        /// </summary>
        /// <param name="input">Instance of SharedKeyInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SharedKeyInput input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Kudos == input.Kudos ||
                    this.Kudos.Equals(input.Kudos)
                ) && 
                (
                    this.Expiry == input.Expiry ||
                    this.Expiry.Equals(input.Expiry)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.MaxImagePixels == input.MaxImagePixels ||
                    this.MaxImagePixels.Equals(input.MaxImagePixels)
                ) && 
                (
                    this.MaxImageSteps == input.MaxImageSteps ||
                    this.MaxImageSteps.Equals(input.MaxImageSteps)
                ) && 
                (
                    this.MaxTextTokens == input.MaxTextTokens ||
                    this.MaxTextTokens.Equals(input.MaxTextTokens)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Kudos.GetHashCode();
                hashCode = (hashCode * 59) + this.Expiry.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MaxImagePixels.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxImageSteps.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxTextTokens.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Kudos (int) maximum
            if (this.Kudos > (int)50000000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Kudos, must be a value less than or equal to 50000000.", new [] { "Kudos" });
            }

            // Kudos (int) minimum
            if (this.Kudos < (int)-1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Kudos, must be a value greater than or equal to -1.", new [] { "Kudos" });
            }

            // Expiry (int) minimum
            if (this.Expiry < (int)-1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Expiry, must be a value greater than or equal to -1.", new [] { "Expiry" });
            }

            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 255.", new [] { "Name" });
            }

            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 3.", new [] { "Name" });
            }

            // MaxImagePixels (int) maximum
            if (this.MaxImagePixels > (int)4194304)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxImagePixels, must be a value less than or equal to 4194304.", new [] { "MaxImagePixels" });
            }

            // MaxImagePixels (int) minimum
            if (this.MaxImagePixels < (int)-1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxImagePixels, must be a value greater than or equal to -1.", new [] { "MaxImagePixels" });
            }

            // MaxImageSteps (int) maximum
            if (this.MaxImageSteps > (int)500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxImageSteps, must be a value less than or equal to 500.", new [] { "MaxImageSteps" });
            }

            // MaxImageSteps (int) minimum
            if (this.MaxImageSteps < (int)-1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxImageSteps, must be a value greater than or equal to -1.", new [] { "MaxImageSteps" });
            }

            // MaxTextTokens (int) maximum
            if (this.MaxTextTokens > (int)500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxTextTokens, must be a value less than or equal to 500.", new [] { "MaxTextTokens" });
            }

            // MaxTextTokens (int) minimum
            if (this.MaxTextTokens < (int)-1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxTextTokens, must be a value greater than or equal to -1.", new [] { "MaxTextTokens" });
            }

            yield break;
        }
    }

}
