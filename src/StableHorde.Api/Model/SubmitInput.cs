/*
 * AI Horde
 *
 * The API documentation for the AI Horde
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = StableHorde.Api.Client.OpenAPIDateConverter;

namespace StableHorde.Api.Model
{
    /// <summary>
    /// SubmitInput
    /// </summary>
    [DataContract(Name = "SubmitInput")]
    public partial class SubmitInput : IEquatable<SubmitInput>, IValidatableObject
    {
        /// <summary>
        /// The state of this generation.
        /// </summary>
        /// <value>The state of this generation.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum Ok for value: ok
            /// </summary>
            [EnumMember(Value = "ok")]
            Ok = 1,

            /// <summary>
            /// Enum Censored for value: censored
            /// </summary>
            [EnumMember(Value = "censored")]
            Censored = 2,

            /// <summary>
            /// Enum Faulted for value: faulted
            /// </summary>
            [EnumMember(Value = "faulted")]
            Faulted = 3,

            /// <summary>
            /// Enum Csam for value: csam
            /// </summary>
            [EnumMember(Value = "csam")]
            Csam = 4

        }


        /// <summary>
        /// The state of this generation.
        /// </summary>
        /// <value>The state of this generation.</value>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubmitInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubmitInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubmitInput" /> class.
        /// </summary>
        /// <param name="id">The UUID of this generation. (required).</param>
        /// <param name="generation">R2 result was uploaded to R2, else the string of the result..</param>
        /// <param name="state">The state of this generation. (default to StateEnum.Ok).</param>
        public SubmitInput(string id = default(string), string generation = default(string), StateEnum? state = StateEnum.Ok)
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for SubmitInput and cannot be null");
            }
            this.Id = id;
            this.Generation = generation;
            this.State = state;
        }

        /// <summary>
        /// The UUID of this generation.
        /// </summary>
        /// <value>The UUID of this generation.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// R2 result was uploaded to R2, else the string of the result.
        /// </summary>
        /// <value>R2 result was uploaded to R2, else the string of the result.</value>
        [DataMember(Name = "generation", EmitDefaultValue = false)]
        public string Generation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubmitInput {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Generation: ").Append(Generation).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubmitInput);
        }

        /// <summary>
        /// Returns true if SubmitInput instances are equal
        /// </summary>
        /// <param name="input">Instance of SubmitInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubmitInput input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Generation == input.Generation ||
                    (this.Generation != null &&
                    this.Generation.Equals(input.Generation))
                ) && 
                (
                    this.State == input.State ||
                    this.State.Equals(input.State)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Generation != null)
                {
                    hashCode = (hashCode * 59) + this.Generation.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.State.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
