/*
 * AI Horde
 *
 * The API documentation for the AI Horde
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = StableHorde.Api.Client.OpenAPIDateConverter;

namespace StableHorde.Api.Model
{
    /// <summary>
    /// FilterRegex
    /// </summary>
    [DataContract(Name = "FilterRegex")]
    public partial class FilterRegex : IEquatable<FilterRegex>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FilterRegex" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FilterRegex() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FilterRegex" /> class.
        /// </summary>
        /// <param name="filterType">The integer defining this filter type. (required).</param>
        /// <param name="regex">The full regex for this filter type. (required).</param>
        public FilterRegex(int filterType = default(int), string regex = default(string))
        {
            this.FilterType = filterType;
            // to ensure "regex" is required (not null)
            if (regex == null)
            {
                throw new ArgumentNullException("regex is a required property for FilterRegex and cannot be null");
            }
            this.Regex = regex;
        }

        /// <summary>
        /// The integer defining this filter type.
        /// </summary>
        /// <value>The integer defining this filter type.</value>
        [DataMember(Name = "filter_type", IsRequired = true, EmitDefaultValue = true)]
        public int FilterType { get; set; }

        /// <summary>
        /// The full regex for this filter type.
        /// </summary>
        /// <value>The full regex for this filter type.</value>
        [DataMember(Name = "regex", IsRequired = true, EmitDefaultValue = true)]
        public string Regex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FilterRegex {\n");
            sb.Append("  FilterType: ").Append(FilterType).Append("\n");
            sb.Append("  Regex: ").Append(Regex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FilterRegex);
        }

        /// <summary>
        /// Returns true if FilterRegex instances are equal
        /// </summary>
        /// <param name="input">Instance of FilterRegex to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FilterRegex input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FilterType == input.FilterType ||
                    this.FilterType.Equals(input.FilterType)
                ) && 
                (
                    this.Regex == input.Regex ||
                    (this.Regex != null &&
                    this.Regex.Equals(input.Regex))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.FilterType.GetHashCode();
                if (this.Regex != null)
                {
                    hashCode = (hashCode * 59) + this.Regex.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // FilterType (int) maximum
            if (this.FilterType > (int)29)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FilterType, must be a value less than or equal to 29.", new [] { "FilterType" });
            }

            // FilterType (int) minimum
            if (this.FilterType < (int)10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FilterType, must be a value greater than or equal to 10.", new [] { "FilterType" });
            }

            yield break;
        }
    }

}
