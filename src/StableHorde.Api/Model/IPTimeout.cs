/*
 * AI Horde
 *
 * The API documentation for the AI Horde
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = StableHorde.Api.Client.OpenAPIDateConverter;

namespace StableHorde.Api.Model
{
    /// <summary>
    /// IPTimeout
    /// </summary>
    [DataContract(Name = "IPTimeout")]
    public partial class IPTimeout : IEquatable<IPTimeout>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IPTimeout" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IPTimeout() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IPTimeout" /> class.
        /// </summary>
        /// <param name="ipaddr">The CIDR which is in timeout. (required).</param>
        /// <param name="seconds">How many more seconds this IP block is in timeout  (required).</param>
        public IPTimeout(string ipaddr = default(string), int seconds = default(int))
        {
            // to ensure "ipaddr" is required (not null)
            if (ipaddr == null)
            {
                throw new ArgumentNullException("ipaddr is a required property for IPTimeout and cannot be null");
            }
            this.Ipaddr = ipaddr;
            this.Seconds = seconds;
        }

        /// <summary>
        /// The CIDR which is in timeout.
        /// </summary>
        /// <value>The CIDR which is in timeout.</value>
        [DataMember(Name = "ipaddr", IsRequired = true, EmitDefaultValue = true)]
        public string Ipaddr { get; set; }

        /// <summary>
        /// How many more seconds this IP block is in timeout 
        /// </summary>
        /// <value>How many more seconds this IP block is in timeout </value>
        [DataMember(Name = "seconds", IsRequired = true, EmitDefaultValue = true)]
        public int Seconds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IPTimeout {\n");
            sb.Append("  Ipaddr: ").Append(Ipaddr).Append("\n");
            sb.Append("  Seconds: ").Append(Seconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IPTimeout);
        }

        /// <summary>
        /// Returns true if IPTimeout instances are equal
        /// </summary>
        /// <param name="input">Instance of IPTimeout to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IPTimeout input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Ipaddr == input.Ipaddr ||
                    (this.Ipaddr != null &&
                    this.Ipaddr.Equals(input.Ipaddr))
                ) && 
                (
                    this.Seconds == input.Seconds ||
                    this.Seconds.Equals(input.Seconds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ipaddr != null)
                {
                    hashCode = (hashCode * 59) + this.Ipaddr.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Seconds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Ipaddr (string) maxLength
            if (this.Ipaddr != null && this.Ipaddr.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Ipaddr, length must be less than 40.", new [] { "Ipaddr" });
            }

            // Ipaddr (string) minLength
            if (this.Ipaddr != null && this.Ipaddr.Length < 7)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Ipaddr, length must be greater than 7.", new [] { "Ipaddr" });
            }

            yield break;
        }
    }

}
