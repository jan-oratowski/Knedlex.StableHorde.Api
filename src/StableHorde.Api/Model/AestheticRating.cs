/*
 * AI Horde
 *
 * The API documentation for the AI Horde
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = StableHorde.Api.Client.OpenAPIDateConverter;

namespace StableHorde.Api.Model
{
    /// <summary>
    /// AestheticRating
    /// </summary>
    [DataContract(Name = "AestheticRating")]
    public partial class AestheticRating : IEquatable<AestheticRating>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AestheticRating" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AestheticRating() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AestheticRating" /> class.
        /// </summary>
        /// <param name="id">The UUID of image being rated. (required).</param>
        /// <param name="rating">The aesthetic rating 1-10 for this image. (required).</param>
        /// <param name="artifacts">The artifacts rating for this image. 0 for flawless generation that perfectly fits to the prompt. 1 for small, hardly recognizable flaws. 2 small flaws that can easily be spotted, but don not harm the aesthetic experience. 3 for flaws that look obviously wrong, but only mildly harm the aesthetic experience. 4 for flaws that look obviously wrong &amp; significantly harm the aesthetic experience. 5 for flaws that make the image look like total garbage..</param>
        public AestheticRating(string id = default(string), int rating = default(int), int artifacts = default(int))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for AestheticRating and cannot be null");
            }
            this.Id = id;
            this.Rating = rating;
            this.Artifacts = artifacts;
        }

        /// <summary>
        /// The UUID of image being rated.
        /// </summary>
        /// <value>The UUID of image being rated.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The aesthetic rating 1-10 for this image.
        /// </summary>
        /// <value>The aesthetic rating 1-10 for this image.</value>
        [DataMember(Name = "rating", IsRequired = true, EmitDefaultValue = true)]
        public int Rating { get; set; }

        /// <summary>
        /// The artifacts rating for this image. 0 for flawless generation that perfectly fits to the prompt. 1 for small, hardly recognizable flaws. 2 small flaws that can easily be spotted, but don not harm the aesthetic experience. 3 for flaws that look obviously wrong, but only mildly harm the aesthetic experience. 4 for flaws that look obviously wrong &amp; significantly harm the aesthetic experience. 5 for flaws that make the image look like total garbage.
        /// </summary>
        /// <value>The artifacts rating for this image. 0 for flawless generation that perfectly fits to the prompt. 1 for small, hardly recognizable flaws. 2 small flaws that can easily be spotted, but don not harm the aesthetic experience. 3 for flaws that look obviously wrong, but only mildly harm the aesthetic experience. 4 for flaws that look obviously wrong &amp; significantly harm the aesthetic experience. 5 for flaws that make the image look like total garbage.</value>
        [DataMember(Name = "artifacts", EmitDefaultValue = false)]
        public int Artifacts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AestheticRating {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  Artifacts: ").Append(Artifacts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AestheticRating);
        }

        /// <summary>
        /// Returns true if AestheticRating instances are equal
        /// </summary>
        /// <param name="input">Instance of AestheticRating to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AestheticRating input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Rating == input.Rating ||
                    this.Rating.Equals(input.Rating)
                ) && 
                (
                    this.Artifacts == input.Artifacts ||
                    this.Artifacts.Equals(input.Artifacts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Rating.GetHashCode();
                hashCode = (hashCode * 59) + this.Artifacts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) maxLength
            if (this.Id != null && this.Id.Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, length must be less than 36.", new [] { "Id" });
            }

            // Id (string) minLength
            if (this.Id != null && this.Id.Length < 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, length must be greater than 36.", new [] { "Id" });
            }

            // Rating (int) maximum
            if (this.Rating > (int)10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Rating, must be a value less than or equal to 10.", new [] { "Rating" });
            }

            // Rating (int) minimum
            if (this.Rating < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Rating, must be a value greater than or equal to 1.", new [] { "Rating" });
            }

            // Artifacts (int) maximum
            if (this.Artifacts > (int)5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Artifacts, must be a value less than or equal to 5.", new [] { "Artifacts" });
            }

            // Artifacts (int) minimum
            if (this.Artifacts < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Artifacts, must be a value greater than or equal to 0.", new [] { "Artifacts" });
            }

            yield break;
        }
    }

}
