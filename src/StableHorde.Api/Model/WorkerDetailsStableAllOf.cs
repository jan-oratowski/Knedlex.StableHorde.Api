/*
 * Stable Horde
 *
 * The API documentation for the Stable Horde
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = StableHorde.Api.Client.OpenAPIDateConverter;

namespace StableHorde.Api.Model
{
    /// <summary>
    /// WorkerDetailsStableAllOf
    /// </summary>
    [DataContract(Name = "WorkerDetailsStable_allOf")]
    public partial class WorkerDetailsStableAllOf : IEquatable<WorkerDetailsStableAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkerDetailsStableAllOf" /> class.
        /// </summary>
        /// <param name="maxPixels">The maximum pixels in resolution this worker can generate.</param>
        /// <param name="megapixelstepsGenerated">How many megapixelsteps this worker has generated until now.</param>
        /// <param name="img2img">If True, this worker supports and allows img2img requests. (default to true).</param>
        /// <param name="painting">If True, this worker supports and allows inpainting requests. (default to true).</param>
        public WorkerDetailsStableAllOf(int maxPixels = default(int), decimal megapixelstepsGenerated = default(decimal), bool img2img = true, bool painting = true)
        {
            this.MaxPixels = maxPixels;
            this.MegapixelstepsGenerated = megapixelstepsGenerated;
            this.Img2img = img2img;
            this.Painting = painting;
        }

        /// <summary>
        /// The maximum pixels in resolution this worker can generate
        /// </summary>
        /// <value>The maximum pixels in resolution this worker can generate</value>
        [DataMember(Name = "max_pixels", EmitDefaultValue = false)]
        public int MaxPixels { get; set; }

        /// <summary>
        /// How many megapixelsteps this worker has generated until now
        /// </summary>
        /// <value>How many megapixelsteps this worker has generated until now</value>
        [DataMember(Name = "megapixelsteps_generated", EmitDefaultValue = false)]
        public decimal MegapixelstepsGenerated { get; set; }

        /// <summary>
        /// If True, this worker supports and allows img2img requests.
        /// </summary>
        /// <value>If True, this worker supports and allows img2img requests.</value>
        [DataMember(Name = "img2img", EmitDefaultValue = true)]
        public bool Img2img { get; set; }

        /// <summary>
        /// If True, this worker supports and allows inpainting requests.
        /// </summary>
        /// <value>If True, this worker supports and allows inpainting requests.</value>
        [DataMember(Name = "painting", EmitDefaultValue = true)]
        public bool Painting { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkerDetailsStableAllOf {\n");
            sb.Append("  MaxPixels: ").Append(MaxPixels).Append("\n");
            sb.Append("  MegapixelstepsGenerated: ").Append(MegapixelstepsGenerated).Append("\n");
            sb.Append("  Img2img: ").Append(Img2img).Append("\n");
            sb.Append("  Painting: ").Append(Painting).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WorkerDetailsStableAllOf);
        }

        /// <summary>
        /// Returns true if WorkerDetailsStableAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of WorkerDetailsStableAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkerDetailsStableAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MaxPixels == input.MaxPixels ||
                    this.MaxPixels.Equals(input.MaxPixels)
                ) && 
                (
                    this.MegapixelstepsGenerated == input.MegapixelstepsGenerated ||
                    this.MegapixelstepsGenerated.Equals(input.MegapixelstepsGenerated)
                ) && 
                (
                    this.Img2img == input.Img2img ||
                    this.Img2img.Equals(input.Img2img)
                ) && 
                (
                    this.Painting == input.Painting ||
                    this.Painting.Equals(input.Painting)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.MaxPixels.GetHashCode();
                hashCode = (hashCode * 59) + this.MegapixelstepsGenerated.GetHashCode();
                hashCode = (hashCode * 59) + this.Img2img.GetHashCode();
                hashCode = (hashCode * 59) + this.Painting.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
