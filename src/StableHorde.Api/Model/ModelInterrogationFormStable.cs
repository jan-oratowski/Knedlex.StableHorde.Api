/*
 * AI Horde
 *
 * The API documentation for the AI Horde
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = StableHorde.Api.Client.OpenAPIDateConverter;

namespace StableHorde.Api.Model
{
    /// <summary>
    /// ModelInterrogationFormStable
    /// </summary>
    [DataContract(Name = "ModelInterrogationFormStable")]
    public partial class ModelInterrogationFormStable : IEquatable<ModelInterrogationFormStable>, IValidatableObject
    {
        /// <summary>
        /// The type of interrogation this is.
        /// </summary>
        /// <value>The type of interrogation this is.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NameEnum
        {
            /// <summary>
            /// Enum Caption for value: caption
            /// </summary>
            [EnumMember(Value = "caption")]
            Caption = 1,

            /// <summary>
            /// Enum Interrogation for value: interrogation
            /// </summary>
            [EnumMember(Value = "interrogation")]
            Interrogation = 2,

            /// <summary>
            /// Enum Nsfw for value: nsfw
            /// </summary>
            [EnumMember(Value = "nsfw")]
            Nsfw = 3,

            /// <summary>
            /// Enum GFPGAN for value: GFPGAN
            /// </summary>
            [EnumMember(Value = "GFPGAN")]
            GFPGAN = 4,

            /// <summary>
            /// Enum RealESRGANX4plus for value: RealESRGAN_x4plus
            /// </summary>
            [EnumMember(Value = "RealESRGAN_x4plus")]
            RealESRGANX4plus = 5,

            /// <summary>
            /// Enum RealESRGANX2plus for value: RealESRGAN_x2plus
            /// </summary>
            [EnumMember(Value = "RealESRGAN_x2plus")]
            RealESRGANX2plus = 6,

            /// <summary>
            /// Enum RealESRGANX4plusAnime6B for value: RealESRGAN_x4plus_anime_6B
            /// </summary>
            [EnumMember(Value = "RealESRGAN_x4plus_anime_6B")]
            RealESRGANX4plusAnime6B = 7,

            /// <summary>
            /// Enum NMKDSiax for value: NMKD_Siax
            /// </summary>
            [EnumMember(Value = "NMKD_Siax")]
            NMKDSiax = 8,

            /// <summary>
            /// Enum _4xAnimeSharp for value: 4x_AnimeSharp
            /// </summary>
            [EnumMember(Value = "4x_AnimeSharp")]
            _4xAnimeSharp = 9,

            /// <summary>
            /// Enum CodeFormers for value: CodeFormers
            /// </summary>
            [EnumMember(Value = "CodeFormers")]
            CodeFormers = 10,

            /// <summary>
            /// Enum StripBackground for value: strip_background
            /// </summary>
            [EnumMember(Value = "strip_background")]
            StripBackground = 11

        }


        /// <summary>
        /// The type of interrogation this is.
        /// </summary>
        /// <value>The type of interrogation this is.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public NameEnum Name { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelInterrogationFormStable" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModelInterrogationFormStable() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelInterrogationFormStable" /> class.
        /// </summary>
        /// <param name="name">The type of interrogation this is. (required).</param>
        /// <param name="payload">payload.</param>
        public ModelInterrogationFormStable(NameEnum name = default(NameEnum), ModelInterrogationFormPayloadStable payload = default(ModelInterrogationFormPayloadStable))
        {
            this.Name = name;
            this.Payload = payload;
        }

        /// <summary>
        /// Gets or Sets Payload
        /// </summary>
        [DataMember(Name = "payload", EmitDefaultValue = false)]
        public ModelInterrogationFormPayloadStable Payload { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModelInterrogationFormStable {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelInterrogationFormStable);
        }

        /// <summary>
        /// Returns true if ModelInterrogationFormStable instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelInterrogationFormStable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelInterrogationFormStable input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    this.Name.Equals(input.Name)
                ) && 
                (
                    this.Payload == input.Payload ||
                    (this.Payload != null &&
                    this.Payload.Equals(input.Payload))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Name.GetHashCode();
                if (this.Payload != null)
                {
                    hashCode = (hashCode * 59) + this.Payload.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
