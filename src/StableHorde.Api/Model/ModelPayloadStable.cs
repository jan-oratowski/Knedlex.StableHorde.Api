/*
 * Stable Horde
 *
 * The API documentation for the Stable Horde
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = StableHorde.Api.Client.OpenAPIDateConverter;

namespace StableHorde.Api.Model
{
    /// <summary>
    /// ModelPayloadStable
    /// </summary>
    [DataContract(Name = "ModelPayloadStable")]
    public partial class ModelPayloadStable : IEquatable<ModelPayloadStable>, IValidatableObject
    {
        /// <summary>
        /// Defines SamplerName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SamplerNameEnum
        {
            /// <summary>
            /// Enum KLms for value: k_lms
            /// </summary>
            [EnumMember(Value = "k_lms")]
            KLms = 1,

            /// <summary>
            /// Enum KHeun for value: k_heun
            /// </summary>
            [EnumMember(Value = "k_heun")]
            KHeun = 2,

            /// <summary>
            /// Enum KEuler for value: k_euler
            /// </summary>
            [EnumMember(Value = "k_euler")]
            KEuler = 3,

            /// <summary>
            /// Enum KEulerA for value: k_euler_a
            /// </summary>
            [EnumMember(Value = "k_euler_a")]
            KEulerA = 4,

            /// <summary>
            /// Enum KDpm2 for value: k_dpm_2
            /// </summary>
            [EnumMember(Value = "k_dpm_2")]
            KDpm2 = 5,

            /// <summary>
            /// Enum KDpm2A for value: k_dpm_2_a
            /// </summary>
            [EnumMember(Value = "k_dpm_2_a")]
            KDpm2A = 6,

            /// <summary>
            /// Enum DDIM for value: DDIM
            /// </summary>
            [EnumMember(Value = "DDIM")]
            DDIM = 7,

            /// <summary>
            /// Enum PLMS for value: PLMS
            /// </summary>
            [EnumMember(Value = "PLMS")]
            PLMS = 8

        }


        /// <summary>
        /// Gets or Sets SamplerName
        /// </summary>
        [DataMember(Name = "sampler_name", EmitDefaultValue = false)]
        public SamplerNameEnum? SamplerName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelPayloadStable" /> class.
        /// </summary>
        /// <param name="samplerName">samplerName (default to SamplerNameEnum.KEuler).</param>
        /// <param name="toggles">Obsolete Toggles used in the SD Webui. To be removed. Do not modify unless you know what you&#39;re doing..</param>
        /// <param name="cfgScale">cfgScale.</param>
        /// <param name="denoisingStrength">denoisingStrength.</param>
        /// <param name="seed">The seed to use to generete this request.</param>
        /// <param name="height">The height of the image to generate.</param>
        /// <param name="width">The width of the image to generate.</param>
        /// <param name="seedVariation">If passed with multiple n, the provided seed will be incremented every time by this value.</param>
        /// <param name="useGfpgan">Set to true to process the generated image with GFPGAN (face correction).</param>
        /// <param name="useRealEsrgan">Set to true to process the generated image with RealESRGAN.</param>
        /// <param name="useLdsr">Set to true to process the generated image with LDSR.</param>
        /// <param name="useUpscaling">Set to true to upscale the image.</param>
        /// <param name="prompt">The prompt which will be sent to Stable Diffusion to generate an image.</param>
        /// <param name="ddimSteps">ddimSteps.</param>
        /// <param name="nIter">The amount of images to generate.</param>
        /// <param name="useNsfwCensor">When true will apply NSFW censoring model on the generation.</param>
        public ModelPayloadStable(SamplerNameEnum? samplerName = SamplerNameEnum.KEuler, List<int> toggles = default(List<int>), decimal cfgScale = default(decimal), decimal denoisingStrength = default(decimal), string seed = default(string), int height = default(int), int width = default(int), int seedVariation = default(int), bool useGfpgan = default(bool), bool useRealEsrgan = default(bool), bool useLdsr = default(bool), bool useUpscaling = default(bool), string prompt = default(string), int ddimSteps = default(int), int nIter = default(int), bool useNsfwCensor = default(bool))
        {
            this.SamplerName = samplerName;
            this.Toggles = toggles;
            this.CfgScale = cfgScale;
            this.DenoisingStrength = denoisingStrength;
            this.Seed = seed;
            this.Height = height;
            this.Width = width;
            this.SeedVariation = seedVariation;
            this.UseGfpgan = useGfpgan;
            this.UseRealEsrgan = useRealEsrgan;
            this.UseLdsr = useLdsr;
            this.UseUpscaling = useUpscaling;
            this.Prompt = prompt;
            this.DdimSteps = ddimSteps;
            this.NIter = nIter;
            this.UseNsfwCensor = useNsfwCensor;
        }

        /// <summary>
        /// Obsolete Toggles used in the SD Webui. To be removed. Do not modify unless you know what you&#39;re doing.
        /// </summary>
        /// <value>Obsolete Toggles used in the SD Webui. To be removed. Do not modify unless you know what you&#39;re doing.</value>
        [DataMember(Name = "toggles", EmitDefaultValue = false)]
        public List<int> Toggles { get; set; }

        /// <summary>
        /// Gets or Sets CfgScale
        /// </summary>
        [DataMember(Name = "cfg_scale", EmitDefaultValue = false)]
        public decimal CfgScale { get; set; }

        /// <summary>
        /// Gets or Sets DenoisingStrength
        /// </summary>
        [DataMember(Name = "denoising_strength", EmitDefaultValue = false)]
        public decimal DenoisingStrength { get; set; }

        /// <summary>
        /// The seed to use to generete this request
        /// </summary>
        /// <value>The seed to use to generete this request</value>
        [DataMember(Name = "seed", EmitDefaultValue = false)]
        public string Seed { get; set; }

        /// <summary>
        /// The height of the image to generate
        /// </summary>
        /// <value>The height of the image to generate</value>
        [DataMember(Name = "height", EmitDefaultValue = false)]
        public int Height { get; set; }

        /// <summary>
        /// The width of the image to generate
        /// </summary>
        /// <value>The width of the image to generate</value>
        [DataMember(Name = "width", EmitDefaultValue = false)]
        public int Width { get; set; }

        /// <summary>
        /// If passed with multiple n, the provided seed will be incremented every time by this value
        /// </summary>
        /// <value>If passed with multiple n, the provided seed will be incremented every time by this value</value>
        [DataMember(Name = "seed_variation", EmitDefaultValue = false)]
        public int SeedVariation { get; set; }

        /// <summary>
        /// Set to true to process the generated image with GFPGAN (face correction)
        /// </summary>
        /// <value>Set to true to process the generated image with GFPGAN (face correction)</value>
        [DataMember(Name = "use_gfpgan", EmitDefaultValue = true)]
        public bool UseGfpgan { get; set; }

        /// <summary>
        /// Set to true to process the generated image with RealESRGAN
        /// </summary>
        /// <value>Set to true to process the generated image with RealESRGAN</value>
        [DataMember(Name = "use_real_esrgan", EmitDefaultValue = true)]
        public bool UseRealEsrgan { get; set; }

        /// <summary>
        /// Set to true to process the generated image with LDSR
        /// </summary>
        /// <value>Set to true to process the generated image with LDSR</value>
        [DataMember(Name = "use_ldsr", EmitDefaultValue = true)]
        public bool UseLdsr { get; set; }

        /// <summary>
        /// Set to true to upscale the image
        /// </summary>
        /// <value>Set to true to upscale the image</value>
        [DataMember(Name = "use_upscaling", EmitDefaultValue = true)]
        public bool UseUpscaling { get; set; }

        /// <summary>
        /// The prompt which will be sent to Stable Diffusion to generate an image
        /// </summary>
        /// <value>The prompt which will be sent to Stable Diffusion to generate an image</value>
        [DataMember(Name = "prompt", EmitDefaultValue = false)]
        public string Prompt { get; set; }

        /// <summary>
        /// Gets or Sets DdimSteps
        /// </summary>
        [DataMember(Name = "ddim_steps", EmitDefaultValue = false)]
        public int DdimSteps { get; set; }

        /// <summary>
        /// The amount of images to generate
        /// </summary>
        /// <value>The amount of images to generate</value>
        [DataMember(Name = "n_iter", EmitDefaultValue = false)]
        public int NIter { get; set; }

        /// <summary>
        /// When true will apply NSFW censoring model on the generation
        /// </summary>
        /// <value>When true will apply NSFW censoring model on the generation</value>
        [DataMember(Name = "use_nsfw_censor", EmitDefaultValue = true)]
        public bool UseNsfwCensor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModelPayloadStable {\n");
            sb.Append("  SamplerName: ").Append(SamplerName).Append("\n");
            sb.Append("  Toggles: ").Append(Toggles).Append("\n");
            sb.Append("  CfgScale: ").Append(CfgScale).Append("\n");
            sb.Append("  DenoisingStrength: ").Append(DenoisingStrength).Append("\n");
            sb.Append("  Seed: ").Append(Seed).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  SeedVariation: ").Append(SeedVariation).Append("\n");
            sb.Append("  UseGfpgan: ").Append(UseGfpgan).Append("\n");
            sb.Append("  UseRealEsrgan: ").Append(UseRealEsrgan).Append("\n");
            sb.Append("  UseLdsr: ").Append(UseLdsr).Append("\n");
            sb.Append("  UseUpscaling: ").Append(UseUpscaling).Append("\n");
            sb.Append("  Prompt: ").Append(Prompt).Append("\n");
            sb.Append("  DdimSteps: ").Append(DdimSteps).Append("\n");
            sb.Append("  NIter: ").Append(NIter).Append("\n");
            sb.Append("  UseNsfwCensor: ").Append(UseNsfwCensor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelPayloadStable);
        }

        /// <summary>
        /// Returns true if ModelPayloadStable instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelPayloadStable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelPayloadStable input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SamplerName == input.SamplerName ||
                    this.SamplerName.Equals(input.SamplerName)
                ) && 
                (
                    this.Toggles == input.Toggles ||
                    this.Toggles != null &&
                    input.Toggles != null &&
                    this.Toggles.SequenceEqual(input.Toggles)
                ) && 
                (
                    this.CfgScale == input.CfgScale ||
                    this.CfgScale.Equals(input.CfgScale)
                ) && 
                (
                    this.DenoisingStrength == input.DenoisingStrength ||
                    this.DenoisingStrength.Equals(input.DenoisingStrength)
                ) && 
                (
                    this.Seed == input.Seed ||
                    (this.Seed != null &&
                    this.Seed.Equals(input.Seed))
                ) && 
                (
                    this.Height == input.Height ||
                    this.Height.Equals(input.Height)
                ) && 
                (
                    this.Width == input.Width ||
                    this.Width.Equals(input.Width)
                ) && 
                (
                    this.SeedVariation == input.SeedVariation ||
                    this.SeedVariation.Equals(input.SeedVariation)
                ) && 
                (
                    this.UseGfpgan == input.UseGfpgan ||
                    this.UseGfpgan.Equals(input.UseGfpgan)
                ) && 
                (
                    this.UseRealEsrgan == input.UseRealEsrgan ||
                    this.UseRealEsrgan.Equals(input.UseRealEsrgan)
                ) && 
                (
                    this.UseLdsr == input.UseLdsr ||
                    this.UseLdsr.Equals(input.UseLdsr)
                ) && 
                (
                    this.UseUpscaling == input.UseUpscaling ||
                    this.UseUpscaling.Equals(input.UseUpscaling)
                ) && 
                (
                    this.Prompt == input.Prompt ||
                    (this.Prompt != null &&
                    this.Prompt.Equals(input.Prompt))
                ) && 
                (
                    this.DdimSteps == input.DdimSteps ||
                    this.DdimSteps.Equals(input.DdimSteps)
                ) && 
                (
                    this.NIter == input.NIter ||
                    this.NIter.Equals(input.NIter)
                ) && 
                (
                    this.UseNsfwCensor == input.UseNsfwCensor ||
                    this.UseNsfwCensor.Equals(input.UseNsfwCensor)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SamplerName.GetHashCode();
                if (this.Toggles != null)
                {
                    hashCode = (hashCode * 59) + this.Toggles.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CfgScale.GetHashCode();
                hashCode = (hashCode * 59) + this.DenoisingStrength.GetHashCode();
                if (this.Seed != null)
                {
                    hashCode = (hashCode * 59) + this.Seed.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Height.GetHashCode();
                hashCode = (hashCode * 59) + this.Width.GetHashCode();
                hashCode = (hashCode * 59) + this.SeedVariation.GetHashCode();
                hashCode = (hashCode * 59) + this.UseGfpgan.GetHashCode();
                hashCode = (hashCode * 59) + this.UseRealEsrgan.GetHashCode();
                hashCode = (hashCode * 59) + this.UseLdsr.GetHashCode();
                hashCode = (hashCode * 59) + this.UseUpscaling.GetHashCode();
                if (this.Prompt != null)
                {
                    hashCode = (hashCode * 59) + this.Prompt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DdimSteps.GetHashCode();
                hashCode = (hashCode * 59) + this.NIter.GetHashCode();
                hashCode = (hashCode * 59) + this.UseNsfwCensor.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // CfgScale (decimal) maximum
            if (this.CfgScale > (decimal)3E+1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CfgScale, must be a value less than or equal to 3E+1.", new [] { "CfgScale" });
            }

            // CfgScale (decimal) minimum
            if (this.CfgScale < (decimal)-4E+1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CfgScale, must be a value greater than or equal to -4E+1.", new [] { "CfgScale" });
            }

            // DenoisingStrength (decimal) maximum
            if (this.DenoisingStrength > (decimal)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DenoisingStrength, must be a value less than or equal to 1.", new [] { "DenoisingStrength" });
            }

            // DenoisingStrength (decimal) minimum
            if (this.DenoisingStrength < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DenoisingStrength, must be a value greater than or equal to 0.", new [] { "DenoisingStrength" });
            }

            // Height (int) maximum
            if (this.Height > (int)1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Height, must be a value less than or equal to 1024.", new [] { "Height" });
            }

            // Height (int) minimum
            if (this.Height < (int)64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Height, must be a value greater than or equal to 64.", new [] { "Height" });
            }

            // Width (int) maximum
            if (this.Width > (int)1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Width, must be a value less than or equal to 1024.", new [] { "Width" });
            }

            // Width (int) minimum
            if (this.Width < (int)64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Width, must be a value greater than or equal to 64.", new [] { "Width" });
            }

            // SeedVariation (int) maximum
            if (this.SeedVariation > (int)1000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SeedVariation, must be a value less than or equal to 1000.", new [] { "SeedVariation" });
            }

            // SeedVariation (int) minimum
            if (this.SeedVariation < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SeedVariation, must be a value greater than or equal to 1.", new [] { "SeedVariation" });
            }

            yield break;
        }
    }

}
