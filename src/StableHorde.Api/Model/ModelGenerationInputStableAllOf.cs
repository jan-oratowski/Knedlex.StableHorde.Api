/*
 * Stable Horde
 *
 * The API documentation for the Stable Horde
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = StableHorde.Api.Client.OpenAPIDateConverter;

namespace StableHorde.Api.Model
{
    /// <summary>
    /// ModelGenerationInputStableAllOf
    /// </summary>
    [DataContract(Name = "ModelGenerationInputStable_allOf")]
    public partial class ModelGenerationInputStableAllOf : IEquatable<ModelGenerationInputStableAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelGenerationInputStableAllOf" /> class.
        /// </summary>
        /// <param name="steps">steps.</param>
        /// <param name="n">The amount of images to generate.</param>
        public ModelGenerationInputStableAllOf(int steps = default(int), int n = default(int))
        {
            this.Steps = steps;
            this.N = n;
        }

        /// <summary>
        /// Gets or Sets Steps
        /// </summary>
        [DataMember(Name = "steps", EmitDefaultValue = false)]
        public int Steps { get; set; }

        /// <summary>
        /// The amount of images to generate
        /// </summary>
        /// <value>The amount of images to generate</value>
        [DataMember(Name = "n", EmitDefaultValue = false)]
        public int N { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModelGenerationInputStableAllOf {\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("  N: ").Append(N).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelGenerationInputStableAllOf);
        }

        /// <summary>
        /// Returns true if ModelGenerationInputStableAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelGenerationInputStableAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelGenerationInputStableAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Steps == input.Steps ||
                    this.Steps.Equals(input.Steps)
                ) && 
                (
                    this.N == input.N ||
                    this.N.Equals(input.N)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Steps.GetHashCode();
                hashCode = (hashCode * 59) + this.N.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Steps (int) maximum
            if (this.Steps > (int)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Steps, must be a value less than or equal to 100.", new [] { "Steps" });
            }

            // Steps (int) minimum
            if (this.Steps < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Steps, must be a value greater than or equal to 1.", new [] { "Steps" });
            }

            // N (int) maximum
            if (this.N > (int)20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for N, must be a value less than or equal to 20.", new [] { "N" });
            }

            // N (int) minimum
            if (this.N < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for N, must be a value greater than or equal to 1.", new [] { "N" });
            }

            yield break;
        }
    }

}
