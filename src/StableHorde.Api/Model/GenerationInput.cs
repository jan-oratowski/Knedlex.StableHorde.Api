/*
 * Stable Horde
 *
 * The API documentation for the Stable Horde
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = StableHorde.Api.Client.OpenAPIDateConverter;

namespace StableHorde.Api.Model
{
    /// <summary>
    /// GenerationInput
    /// </summary>
    [DataContract(Name = "GenerationInput")]
    public partial class GenerationInput : IEquatable<GenerationInput>, IValidatableObject
    {
        /// <summary>
        /// If source_image is provided, specifies how to process it.
        /// </summary>
        /// <value>If source_image is provided, specifies how to process it.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SourceProcessingEnum
        {
            /// <summary>
            /// Enum Img2img for value: img2img
            /// </summary>
            [EnumMember(Value = "img2img")]
            Img2img = 1,

            /// <summary>
            /// Enum Inpainting for value: inpainting
            /// </summary>
            [EnumMember(Value = "inpainting")]
            Inpainting = 2,

            /// <summary>
            /// Enum Outpainting for value: outpainting
            /// </summary>
            [EnumMember(Value = "outpainting")]
            Outpainting = 3

        }


        /// <summary>
        /// If source_image is provided, specifies how to process it.
        /// </summary>
        /// <value>If source_image is provided, specifies how to process it.</value>
        [DataMember(Name = "source_processing", EmitDefaultValue = false)]
        public SourceProcessingEnum? SourceProcessing { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerationInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GenerationInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerationInput" /> class.
        /// </summary>
        /// <param name="prompt">The prompt which will be sent to Stable Diffusion to generate an image (required).</param>
        /// <param name="_params">_params.</param>
        /// <param name="nsfw">Set to true if this request is NSFW. This will skip workers which censor images. (default to false).</param>
        /// <param name="trustedWorkers">When true, only trusted workers will serve this request. When False, Evaluating workers will also be used which can increase speed but adds more risk! (default to true).</param>
        /// <param name="censorNsfw">If the request is SFW, and the worker accidentaly generates NSFW, it will send back a censored image. (default to false).</param>
        /// <param name="workers">workers.</param>
        /// <param name="models">models.</param>
        /// <param name="sourceImage">The Base64-encoded webp to use for img2img.</param>
        /// <param name="sourceProcessing">If source_image is provided, specifies how to process it. (default to SourceProcessingEnum.Img2img).</param>
        /// <param name="sourceMask">If source_processing is set to &#39;inpainting&#39; or &#39;outpainting&#39;, this parameter can be optionally provided as the  Base64-encoded webp mask of the areas to inpaint. If this arg is not passed, the inpainting/outpainting mask has to be embedded as alpha channel.</param>
        public GenerationInput(string prompt = default(string), ModelGenerationInputStable _params = default(ModelGenerationInputStable), bool nsfw = false, bool trustedWorkers = true, bool censorNsfw = false, List<string> workers = default(List<string>), List<string> models = default(List<string>), string sourceImage = default(string), SourceProcessingEnum? sourceProcessing = SourceProcessingEnum.Img2img, string sourceMask = default(string))
        {
            // to ensure "prompt" is required (not null)
            if (prompt == null)
            {
                throw new ArgumentNullException("prompt is a required property for GenerationInput and cannot be null");
            }
            this.Prompt = prompt;
            this.Params = _params;
            this.Nsfw = nsfw;
            this.TrustedWorkers = trustedWorkers;
            this.CensorNsfw = censorNsfw;
            this.Workers = workers;
            this.Models = models;
            this.SourceImage = sourceImage;
            this.SourceProcessing = sourceProcessing;
            this.SourceMask = sourceMask;
        }

        /// <summary>
        /// The prompt which will be sent to Stable Diffusion to generate an image
        /// </summary>
        /// <value>The prompt which will be sent to Stable Diffusion to generate an image</value>
        [DataMember(Name = "prompt", IsRequired = true, EmitDefaultValue = true)]
        public string Prompt { get; set; }

        /// <summary>
        /// Gets or Sets Params
        /// </summary>
        [DataMember(Name = "params", EmitDefaultValue = false)]
        public ModelGenerationInputStable Params { get; set; }

        /// <summary>
        /// Set to true if this request is NSFW. This will skip workers which censor images.
        /// </summary>
        /// <value>Set to true if this request is NSFW. This will skip workers which censor images.</value>
        [DataMember(Name = "nsfw", EmitDefaultValue = true)]
        public bool Nsfw { get; set; }

        /// <summary>
        /// When true, only trusted workers will serve this request. When False, Evaluating workers will also be used which can increase speed but adds more risk!
        /// </summary>
        /// <value>When true, only trusted workers will serve this request. When False, Evaluating workers will also be used which can increase speed but adds more risk!</value>
        [DataMember(Name = "trusted_workers", EmitDefaultValue = true)]
        public bool TrustedWorkers { get; set; }

        /// <summary>
        /// If the request is SFW, and the worker accidentaly generates NSFW, it will send back a censored image.
        /// </summary>
        /// <value>If the request is SFW, and the worker accidentaly generates NSFW, it will send back a censored image.</value>
        [DataMember(Name = "censor_nsfw", EmitDefaultValue = true)]
        public bool CensorNsfw { get; set; }

        /// <summary>
        /// Gets or Sets Workers
        /// </summary>
        [DataMember(Name = "workers", EmitDefaultValue = false)]
        public List<string> Workers { get; set; }

        /// <summary>
        /// Gets or Sets Models
        /// </summary>
        [DataMember(Name = "models", EmitDefaultValue = false)]
        public List<string> Models { get; set; }

        /// <summary>
        /// The Base64-encoded webp to use for img2img
        /// </summary>
        /// <value>The Base64-encoded webp to use for img2img</value>
        [DataMember(Name = "source_image", EmitDefaultValue = false)]
        public string SourceImage { get; set; }

        /// <summary>
        /// If source_processing is set to &#39;inpainting&#39; or &#39;outpainting&#39;, this parameter can be optionally provided as the  Base64-encoded webp mask of the areas to inpaint. If this arg is not passed, the inpainting/outpainting mask has to be embedded as alpha channel
        /// </summary>
        /// <value>If source_processing is set to &#39;inpainting&#39; or &#39;outpainting&#39;, this parameter can be optionally provided as the  Base64-encoded webp mask of the areas to inpaint. If this arg is not passed, the inpainting/outpainting mask has to be embedded as alpha channel</value>
        [DataMember(Name = "source_mask", EmitDefaultValue = false)]
        public string SourceMask { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GenerationInput {\n");
            sb.Append("  Prompt: ").Append(Prompt).Append("\n");
            sb.Append("  Params: ").Append(Params).Append("\n");
            sb.Append("  Nsfw: ").Append(Nsfw).Append("\n");
            sb.Append("  TrustedWorkers: ").Append(TrustedWorkers).Append("\n");
            sb.Append("  CensorNsfw: ").Append(CensorNsfw).Append("\n");
            sb.Append("  Workers: ").Append(Workers).Append("\n");
            sb.Append("  Models: ").Append(Models).Append("\n");
            sb.Append("  SourceImage: ").Append(SourceImage).Append("\n");
            sb.Append("  SourceProcessing: ").Append(SourceProcessing).Append("\n");
            sb.Append("  SourceMask: ").Append(SourceMask).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GenerationInput);
        }

        /// <summary>
        /// Returns true if GenerationInput instances are equal
        /// </summary>
        /// <param name="input">Instance of GenerationInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GenerationInput input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Prompt == input.Prompt ||
                    (this.Prompt != null &&
                    this.Prompt.Equals(input.Prompt))
                ) && 
                (
                    this.Params == input.Params ||
                    (this.Params != null &&
                    this.Params.Equals(input.Params))
                ) && 
                (
                    this.Nsfw == input.Nsfw ||
                    this.Nsfw.Equals(input.Nsfw)
                ) && 
                (
                    this.TrustedWorkers == input.TrustedWorkers ||
                    this.TrustedWorkers.Equals(input.TrustedWorkers)
                ) && 
                (
                    this.CensorNsfw == input.CensorNsfw ||
                    this.CensorNsfw.Equals(input.CensorNsfw)
                ) && 
                (
                    this.Workers == input.Workers ||
                    this.Workers != null &&
                    input.Workers != null &&
                    this.Workers.SequenceEqual(input.Workers)
                ) && 
                (
                    this.Models == input.Models ||
                    this.Models != null &&
                    input.Models != null &&
                    this.Models.SequenceEqual(input.Models)
                ) && 
                (
                    this.SourceImage == input.SourceImage ||
                    (this.SourceImage != null &&
                    this.SourceImage.Equals(input.SourceImage))
                ) && 
                (
                    this.SourceProcessing == input.SourceProcessing ||
                    this.SourceProcessing.Equals(input.SourceProcessing)
                ) && 
                (
                    this.SourceMask == input.SourceMask ||
                    (this.SourceMask != null &&
                    this.SourceMask.Equals(input.SourceMask))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Prompt != null)
                {
                    hashCode = (hashCode * 59) + this.Prompt.GetHashCode();
                }
                if (this.Params != null)
                {
                    hashCode = (hashCode * 59) + this.Params.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Nsfw.GetHashCode();
                hashCode = (hashCode * 59) + this.TrustedWorkers.GetHashCode();
                hashCode = (hashCode * 59) + this.CensorNsfw.GetHashCode();
                if (this.Workers != null)
                {
                    hashCode = (hashCode * 59) + this.Workers.GetHashCode();
                }
                if (this.Models != null)
                {
                    hashCode = (hashCode * 59) + this.Models.GetHashCode();
                }
                if (this.SourceImage != null)
                {
                    hashCode = (hashCode * 59) + this.SourceImage.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SourceProcessing.GetHashCode();
                if (this.SourceMask != null)
                {
                    hashCode = (hashCode * 59) + this.SourceMask.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Prompt (string) minLength
            if (this.Prompt != null && this.Prompt.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Prompt, length must be greater than 1.", new [] { "Prompt" });
            }

            yield break;
        }
    }

}
