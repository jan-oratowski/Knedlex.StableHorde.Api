/*
 * AI Horde
 *
 * The API documentation for the AI Horde
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = StableHorde.Api.Client.OpenAPIDateConverter;

namespace StableHorde.Api.Model
{
    /// <summary>
    /// PopInput
    /// </summary>
    [DataContract(Name = "PopInput")]
    public partial class PopInput : IEquatable<PopInput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PopInput" /> class.
        /// </summary>
        /// <param name="name">The Name of the Worker..</param>
        /// <param name="priorityUsernames">priorityUsernames.</param>
        /// <param name="nsfw">Whether this worker can generate NSFW requests or not. (default to false).</param>
        /// <param name="models">models.</param>
        /// <param name="bridgeAgent">The worker name, version and website. (default to &quot;unknown:0:unknown&quot;).</param>
        /// <param name="threads">How many threads this worker is running. This is used to accurately the current power available in the horde..</param>
        /// <param name="requireUpfrontKudos">If True, this worker will only pick up requests where the owner has the required kudos to consume already available. (default to false).</param>
        /// <param name="amount">How many jobvs to pop at the same time.</param>
        public PopInput(string name = default(string), List<string> priorityUsernames = default(List<string>), bool nsfw = false, List<string> models = default(List<string>), string bridgeAgent = "unknown:0:unknown", int threads = default(int), bool requireUpfrontKudos = false, int amount = default(int))
        {
            this.Name = name;
            this.PriorityUsernames = priorityUsernames;
            this.Nsfw = nsfw;
            this.Models = models;
            // use default value if no "bridgeAgent" provided
            this.BridgeAgent = bridgeAgent ?? "unknown:0:unknown";
            this.Threads = threads;
            this.RequireUpfrontKudos = requireUpfrontKudos;
            this.Amount = amount;
        }

        /// <summary>
        /// The Name of the Worker.
        /// </summary>
        /// <value>The Name of the Worker.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets PriorityUsernames
        /// </summary>
        [DataMember(Name = "priority_usernames", EmitDefaultValue = false)]
        public List<string> PriorityUsernames { get; set; }

        /// <summary>
        /// Whether this worker can generate NSFW requests or not.
        /// </summary>
        /// <value>Whether this worker can generate NSFW requests or not.</value>
        [DataMember(Name = "nsfw", EmitDefaultValue = true)]
        public bool Nsfw { get; set; }

        /// <summary>
        /// Gets or Sets Models
        /// </summary>
        [DataMember(Name = "models", EmitDefaultValue = false)]
        public List<string> Models { get; set; }

        /// <summary>
        /// The worker name, version and website.
        /// </summary>
        /// <value>The worker name, version and website.</value>
        [DataMember(Name = "bridge_agent", EmitDefaultValue = false)]
        public string BridgeAgent { get; set; }

        /// <summary>
        /// How many threads this worker is running. This is used to accurately the current power available in the horde.
        /// </summary>
        /// <value>How many threads this worker is running. This is used to accurately the current power available in the horde.</value>
        [DataMember(Name = "threads", EmitDefaultValue = false)]
        public int Threads { get; set; }

        /// <summary>
        /// If True, this worker will only pick up requests where the owner has the required kudos to consume already available.
        /// </summary>
        /// <value>If True, this worker will only pick up requests where the owner has the required kudos to consume already available.</value>
        [DataMember(Name = "require_upfront_kudos", EmitDefaultValue = true)]
        public bool RequireUpfrontKudos { get; set; }

        /// <summary>
        /// How many jobvs to pop at the same time
        /// </summary>
        /// <value>How many jobvs to pop at the same time</value>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public int Amount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PopInput {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PriorityUsernames: ").Append(PriorityUsernames).Append("\n");
            sb.Append("  Nsfw: ").Append(Nsfw).Append("\n");
            sb.Append("  Models: ").Append(Models).Append("\n");
            sb.Append("  BridgeAgent: ").Append(BridgeAgent).Append("\n");
            sb.Append("  Threads: ").Append(Threads).Append("\n");
            sb.Append("  RequireUpfrontKudos: ").Append(RequireUpfrontKudos).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PopInput);
        }

        /// <summary>
        /// Returns true if PopInput instances are equal
        /// </summary>
        /// <param name="input">Instance of PopInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PopInput input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PriorityUsernames == input.PriorityUsernames ||
                    this.PriorityUsernames != null &&
                    input.PriorityUsernames != null &&
                    this.PriorityUsernames.SequenceEqual(input.PriorityUsernames)
                ) && 
                (
                    this.Nsfw == input.Nsfw ||
                    this.Nsfw.Equals(input.Nsfw)
                ) && 
                (
                    this.Models == input.Models ||
                    this.Models != null &&
                    input.Models != null &&
                    this.Models.SequenceEqual(input.Models)
                ) && 
                (
                    this.BridgeAgent == input.BridgeAgent ||
                    (this.BridgeAgent != null &&
                    this.BridgeAgent.Equals(input.BridgeAgent))
                ) && 
                (
                    this.Threads == input.Threads ||
                    this.Threads.Equals(input.Threads)
                ) && 
                (
                    this.RequireUpfrontKudos == input.RequireUpfrontKudos ||
                    this.RequireUpfrontKudos.Equals(input.RequireUpfrontKudos)
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.PriorityUsernames != null)
                {
                    hashCode = (hashCode * 59) + this.PriorityUsernames.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Nsfw.GetHashCode();
                if (this.Models != null)
                {
                    hashCode = (hashCode * 59) + this.Models.GetHashCode();
                }
                if (this.BridgeAgent != null)
                {
                    hashCode = (hashCode * 59) + this.BridgeAgent.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Threads.GetHashCode();
                hashCode = (hashCode * 59) + this.RequireUpfrontKudos.GetHashCode();
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // BridgeAgent (string) maxLength
            if (this.BridgeAgent != null && this.BridgeAgent.Length > 1000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BridgeAgent, length must be less than 1000.", new [] { "BridgeAgent" });
            }

            // Threads (int) maximum
            if (this.Threads > (int)50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Threads, must be a value less than or equal to 50.", new [] { "Threads" });
            }

            // Threads (int) minimum
            if (this.Threads < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Threads, must be a value greater than or equal to 1.", new [] { "Threads" });
            }

            // Amount (int) maximum
            if (this.Amount > (int)20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Amount, must be a value less than or equal to 20.", new [] { "Amount" });
            }

            // Amount (int) minimum
            if (this.Amount < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Amount, must be a value greater than or equal to 1.", new [] { "Amount" });
            }

            yield break;
        }
    }

}
