/*
 * Stable Horde
 *
 * The API documentation for the Stable Horde
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = StableHorde.Api.Client.OpenAPIDateConverter;

namespace StableHorde.Api.Model
{
    /// <summary>
    /// NoValidRequestFoundStable
    /// </summary>
    [DataContract(Name = "NoValidRequestFoundStable")]
    public partial class NoValidRequestFoundStable : IEquatable<NoValidRequestFoundStable>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NoValidRequestFoundStable" /> class.
        /// </summary>
        /// <param name="workerId">How many waiting requests were skipped because they demanded a specific worker.</param>
        /// <param name="performance">How many waiting requests were skipped because they demanded a specific worker.</param>
        /// <param name="nsfw">How many waiting requests were skipped because they demanded a nsfw generation which this worker does not provide..</param>
        /// <param name="blacklist">How many waiting requests were skipped because they demanded a generation with a word that this worker does not accept..</param>
        /// <param name="untrusted">How many waiting requests were skipped because they demanded a trusted worker which this worker is not..</param>
        /// <param name="models">How many waiting requests were skipped because they demanded a different model than what this worker provides..</param>
        /// <param name="maxPixels">How many waiting requests were skipped because they demanded a higher size than this worker provides.</param>
        /// <param name="unsafeIp">How many waiting requests were skipped because they came from an unsafe IP.</param>
        /// <param name="img2img">How many waiting requests were skipped because they requested img2img.</param>
        /// <param name="painting">How many waiting requests were skipped because they requested inpainting/outpainting.</param>
        public NoValidRequestFoundStable(int workerId = default(int), int performance = default(int), int nsfw = default(int), int blacklist = default(int), int untrusted = default(int), int models = default(int), int maxPixels = default(int), int unsafeIp = default(int), int img2img = default(int), int painting = default(int))
        {
            this.WorkerId = workerId;
            this.Performance = performance;
            this.Nsfw = nsfw;
            this.Blacklist = blacklist;
            this.Untrusted = untrusted;
            this.Models = models;
            this.MaxPixels = maxPixels;
            this.UnsafeIp = unsafeIp;
            this.Img2img = img2img;
            this.Painting = painting;
        }

        /// <summary>
        /// How many waiting requests were skipped because they demanded a specific worker
        /// </summary>
        /// <value>How many waiting requests were skipped because they demanded a specific worker</value>
        [DataMember(Name = "worker_id", EmitDefaultValue = false)]
        public int WorkerId { get; set; }

        /// <summary>
        /// How many waiting requests were skipped because they demanded a specific worker
        /// </summary>
        /// <value>How many waiting requests were skipped because they demanded a specific worker</value>
        [DataMember(Name = "performance", EmitDefaultValue = false)]
        public int Performance { get; set; }

        /// <summary>
        /// How many waiting requests were skipped because they demanded a nsfw generation which this worker does not provide.
        /// </summary>
        /// <value>How many waiting requests were skipped because they demanded a nsfw generation which this worker does not provide.</value>
        [DataMember(Name = "nsfw", EmitDefaultValue = false)]
        public int Nsfw { get; set; }

        /// <summary>
        /// How many waiting requests were skipped because they demanded a generation with a word that this worker does not accept.
        /// </summary>
        /// <value>How many waiting requests were skipped because they demanded a generation with a word that this worker does not accept.</value>
        [DataMember(Name = "blacklist", EmitDefaultValue = false)]
        public int Blacklist { get; set; }

        /// <summary>
        /// How many waiting requests were skipped because they demanded a trusted worker which this worker is not.
        /// </summary>
        /// <value>How many waiting requests were skipped because they demanded a trusted worker which this worker is not.</value>
        [DataMember(Name = "untrusted", EmitDefaultValue = false)]
        public int Untrusted { get; set; }

        /// <summary>
        /// How many waiting requests were skipped because they demanded a different model than what this worker provides.
        /// </summary>
        /// <value>How many waiting requests were skipped because they demanded a different model than what this worker provides.</value>
        [DataMember(Name = "models", EmitDefaultValue = false)]
        public int Models { get; set; }

        /// <summary>
        /// How many waiting requests were skipped because they demanded a higher size than this worker provides
        /// </summary>
        /// <value>How many waiting requests were skipped because they demanded a higher size than this worker provides</value>
        [DataMember(Name = "max_pixels", EmitDefaultValue = false)]
        public int MaxPixels { get; set; }

        /// <summary>
        /// How many waiting requests were skipped because they came from an unsafe IP
        /// </summary>
        /// <value>How many waiting requests were skipped because they came from an unsafe IP</value>
        [DataMember(Name = "unsafe_ip", EmitDefaultValue = false)]
        public int UnsafeIp { get; set; }

        /// <summary>
        /// How many waiting requests were skipped because they requested img2img
        /// </summary>
        /// <value>How many waiting requests were skipped because they requested img2img</value>
        [DataMember(Name = "img2img", EmitDefaultValue = false)]
        public int Img2img { get; set; }

        /// <summary>
        /// How many waiting requests were skipped because they requested inpainting/outpainting
        /// </summary>
        /// <value>How many waiting requests were skipped because they requested inpainting/outpainting</value>
        [DataMember(Name = "painting", EmitDefaultValue = false)]
        public int Painting { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NoValidRequestFoundStable {\n");
            sb.Append("  WorkerId: ").Append(WorkerId).Append("\n");
            sb.Append("  Performance: ").Append(Performance).Append("\n");
            sb.Append("  Nsfw: ").Append(Nsfw).Append("\n");
            sb.Append("  Blacklist: ").Append(Blacklist).Append("\n");
            sb.Append("  Untrusted: ").Append(Untrusted).Append("\n");
            sb.Append("  Models: ").Append(Models).Append("\n");
            sb.Append("  MaxPixels: ").Append(MaxPixels).Append("\n");
            sb.Append("  UnsafeIp: ").Append(UnsafeIp).Append("\n");
            sb.Append("  Img2img: ").Append(Img2img).Append("\n");
            sb.Append("  Painting: ").Append(Painting).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NoValidRequestFoundStable);
        }

        /// <summary>
        /// Returns true if NoValidRequestFoundStable instances are equal
        /// </summary>
        /// <param name="input">Instance of NoValidRequestFoundStable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NoValidRequestFoundStable input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.WorkerId == input.WorkerId ||
                    this.WorkerId.Equals(input.WorkerId)
                ) && 
                (
                    this.Performance == input.Performance ||
                    this.Performance.Equals(input.Performance)
                ) && 
                (
                    this.Nsfw == input.Nsfw ||
                    this.Nsfw.Equals(input.Nsfw)
                ) && 
                (
                    this.Blacklist == input.Blacklist ||
                    this.Blacklist.Equals(input.Blacklist)
                ) && 
                (
                    this.Untrusted == input.Untrusted ||
                    this.Untrusted.Equals(input.Untrusted)
                ) && 
                (
                    this.Models == input.Models ||
                    this.Models.Equals(input.Models)
                ) && 
                (
                    this.MaxPixels == input.MaxPixels ||
                    this.MaxPixels.Equals(input.MaxPixels)
                ) && 
                (
                    this.UnsafeIp == input.UnsafeIp ||
                    this.UnsafeIp.Equals(input.UnsafeIp)
                ) && 
                (
                    this.Img2img == input.Img2img ||
                    this.Img2img.Equals(input.Img2img)
                ) && 
                (
                    this.Painting == input.Painting ||
                    this.Painting.Equals(input.Painting)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.WorkerId.GetHashCode();
                hashCode = (hashCode * 59) + this.Performance.GetHashCode();
                hashCode = (hashCode * 59) + this.Nsfw.GetHashCode();
                hashCode = (hashCode * 59) + this.Blacklist.GetHashCode();
                hashCode = (hashCode * 59) + this.Untrusted.GetHashCode();
                hashCode = (hashCode * 59) + this.Models.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxPixels.GetHashCode();
                hashCode = (hashCode * 59) + this.UnsafeIp.GetHashCode();
                hashCode = (hashCode * 59) + this.Img2img.GetHashCode();
                hashCode = (hashCode * 59) + this.Painting.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
