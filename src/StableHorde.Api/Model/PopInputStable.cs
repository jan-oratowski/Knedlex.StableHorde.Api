/*
 * Stable Horde
 *
 * The API documentation for the Stable Horde
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = StableHorde.Api.Client.OpenAPIDateConverter;

namespace StableHorde.Api.Model
{
    /// <summary>
    /// PopInputStable
    /// </summary>
    [DataContract(Name = "PopInputStable")]
    public partial class PopInputStable : IEquatable<PopInputStable>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PopInputStable" /> class.
        /// </summary>
        /// <param name="name">The Name of the Worker.</param>
        /// <param name="priorityUsernames">priorityUsernames.</param>
        /// <param name="nsfw">Whether this worker can generate NSFW requests or not. (default to false).</param>
        /// <param name="blacklist">blacklist.</param>
        /// <param name="models">models.</param>
        /// <param name="bridgeVersion">The version of the bridge used by this worker.</param>
        /// <param name="maxPixels">The maximum amount of pixels this worker can generate.</param>
        /// <param name="allowImg2img">If True, this worker will pick up img2img requests (default to true).</param>
        /// <param name="allowPainting">If True, this worker will pick up inpainting/outpainting requests (default to true).</param>
        /// <param name="allowUnsafeIpaddr">If True, this worker will pick up img2img requests coming from clients with an unsafe IP. (default to true).</param>
        public PopInputStable(string name = default(string), List<string> priorityUsernames = default(List<string>), bool nsfw = false, List<string> blacklist = default(List<string>), List<string> models = default(List<string>), int bridgeVersion = default(int), int maxPixels = default(int), bool allowImg2img = true, bool allowPainting = true, bool allowUnsafeIpaddr = true)
        {
            this.Name = name;
            this.PriorityUsernames = priorityUsernames;
            this.Nsfw = nsfw;
            this.Blacklist = blacklist;
            this.Models = models;
            this.BridgeVersion = bridgeVersion;
            this.MaxPixels = maxPixels;
            this.AllowImg2img = allowImg2img;
            this.AllowPainting = allowPainting;
            this.AllowUnsafeIpaddr = allowUnsafeIpaddr;
        }

        /// <summary>
        /// The Name of the Worker
        /// </summary>
        /// <value>The Name of the Worker</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets PriorityUsernames
        /// </summary>
        [DataMember(Name = "priority_usernames", EmitDefaultValue = false)]
        public List<string> PriorityUsernames { get; set; }

        /// <summary>
        /// Whether this worker can generate NSFW requests or not.
        /// </summary>
        /// <value>Whether this worker can generate NSFW requests or not.</value>
        [DataMember(Name = "nsfw", EmitDefaultValue = true)]
        public bool Nsfw { get; set; }

        /// <summary>
        /// Gets or Sets Blacklist
        /// </summary>
        [DataMember(Name = "blacklist", EmitDefaultValue = false)]
        public List<string> Blacklist { get; set; }

        /// <summary>
        /// Gets or Sets Models
        /// </summary>
        [DataMember(Name = "models", EmitDefaultValue = false)]
        public List<string> Models { get; set; }

        /// <summary>
        /// The version of the bridge used by this worker
        /// </summary>
        /// <value>The version of the bridge used by this worker</value>
        [DataMember(Name = "bridge_version", EmitDefaultValue = false)]
        public int BridgeVersion { get; set; }

        /// <summary>
        /// The maximum amount of pixels this worker can generate
        /// </summary>
        /// <value>The maximum amount of pixels this worker can generate</value>
        [DataMember(Name = "max_pixels", EmitDefaultValue = false)]
        public int MaxPixels { get; set; }

        /// <summary>
        /// If True, this worker will pick up img2img requests
        /// </summary>
        /// <value>If True, this worker will pick up img2img requests</value>
        [DataMember(Name = "allow_img2img", EmitDefaultValue = true)]
        public bool AllowImg2img { get; set; }

        /// <summary>
        /// If True, this worker will pick up inpainting/outpainting requests
        /// </summary>
        /// <value>If True, this worker will pick up inpainting/outpainting requests</value>
        [DataMember(Name = "allow_painting", EmitDefaultValue = true)]
        public bool AllowPainting { get; set; }

        /// <summary>
        /// If True, this worker will pick up img2img requests coming from clients with an unsafe IP.
        /// </summary>
        /// <value>If True, this worker will pick up img2img requests coming from clients with an unsafe IP.</value>
        [DataMember(Name = "allow_unsafe_ipaddr", EmitDefaultValue = true)]
        public bool AllowUnsafeIpaddr { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PopInputStable {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PriorityUsernames: ").Append(PriorityUsernames).Append("\n");
            sb.Append("  Nsfw: ").Append(Nsfw).Append("\n");
            sb.Append("  Blacklist: ").Append(Blacklist).Append("\n");
            sb.Append("  Models: ").Append(Models).Append("\n");
            sb.Append("  BridgeVersion: ").Append(BridgeVersion).Append("\n");
            sb.Append("  MaxPixels: ").Append(MaxPixels).Append("\n");
            sb.Append("  AllowImg2img: ").Append(AllowImg2img).Append("\n");
            sb.Append("  AllowPainting: ").Append(AllowPainting).Append("\n");
            sb.Append("  AllowUnsafeIpaddr: ").Append(AllowUnsafeIpaddr).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PopInputStable);
        }

        /// <summary>
        /// Returns true if PopInputStable instances are equal
        /// </summary>
        /// <param name="input">Instance of PopInputStable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PopInputStable input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PriorityUsernames == input.PriorityUsernames ||
                    this.PriorityUsernames != null &&
                    input.PriorityUsernames != null &&
                    this.PriorityUsernames.SequenceEqual(input.PriorityUsernames)
                ) && 
                (
                    this.Nsfw == input.Nsfw ||
                    this.Nsfw.Equals(input.Nsfw)
                ) && 
                (
                    this.Blacklist == input.Blacklist ||
                    this.Blacklist != null &&
                    input.Blacklist != null &&
                    this.Blacklist.SequenceEqual(input.Blacklist)
                ) && 
                (
                    this.Models == input.Models ||
                    this.Models != null &&
                    input.Models != null &&
                    this.Models.SequenceEqual(input.Models)
                ) && 
                (
                    this.BridgeVersion == input.BridgeVersion ||
                    this.BridgeVersion.Equals(input.BridgeVersion)
                ) && 
                (
                    this.MaxPixels == input.MaxPixels ||
                    this.MaxPixels.Equals(input.MaxPixels)
                ) && 
                (
                    this.AllowImg2img == input.AllowImg2img ||
                    this.AllowImg2img.Equals(input.AllowImg2img)
                ) && 
                (
                    this.AllowPainting == input.AllowPainting ||
                    this.AllowPainting.Equals(input.AllowPainting)
                ) && 
                (
                    this.AllowUnsafeIpaddr == input.AllowUnsafeIpaddr ||
                    this.AllowUnsafeIpaddr.Equals(input.AllowUnsafeIpaddr)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.PriorityUsernames != null)
                {
                    hashCode = (hashCode * 59) + this.PriorityUsernames.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Nsfw.GetHashCode();
                if (this.Blacklist != null)
                {
                    hashCode = (hashCode * 59) + this.Blacklist.GetHashCode();
                }
                if (this.Models != null)
                {
                    hashCode = (hashCode * 59) + this.Models.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BridgeVersion.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxPixels.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowImg2img.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowPainting.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowUnsafeIpaddr.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
