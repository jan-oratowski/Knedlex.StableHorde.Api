/*
 * AI Horde
 *
 * The API documentation for the AI Horde
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = StableHorde.Api.Client.OpenAPIDateConverter;

namespace StableHorde.Api.Model
{
    /// <summary>
    /// GenerationMetadataStable
    /// </summary>
    [DataContract(Name = "GenerationMetadataStable")]
    public partial class GenerationMetadataStable : IEquatable<GenerationMetadataStable>, IValidatableObject
    {
        /// <summary>
        /// The relevance of the metadata field
        /// </summary>
        /// <value>The relevance of the metadata field</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Lora for value: lora
            /// </summary>
            [EnumMember(Value = "lora")]
            Lora = 1,

            /// <summary>
            /// Enum Ti for value: ti
            /// </summary>
            [EnumMember(Value = "ti")]
            Ti = 2,

            /// <summary>
            /// Enum Censorship for value: censorship
            /// </summary>
            [EnumMember(Value = "censorship")]
            Censorship = 3,

            /// <summary>
            /// Enum SourceImage for value: source_image
            /// </summary>
            [EnumMember(Value = "source_image")]
            SourceImage = 4,

            /// <summary>
            /// Enum SourceMask for value: source_mask
            /// </summary>
            [EnumMember(Value = "source_mask")]
            SourceMask = 5,

            /// <summary>
            /// Enum BatchIndex for value: batch_index
            /// </summary>
            [EnumMember(Value = "batch_index")]
            BatchIndex = 6

        }


        /// <summary>
        /// The relevance of the metadata field
        /// </summary>
        /// <value>The relevance of the metadata field</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// The value of the metadata field
        /// </summary>
        /// <value>The value of the metadata field</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ValueEnum
        {
            /// <summary>
            /// Enum DownloadFailed for value: download_failed
            /// </summary>
            [EnumMember(Value = "download_failed")]
            DownloadFailed = 1,

            /// <summary>
            /// Enum ParseFailed for value: parse_failed
            /// </summary>
            [EnumMember(Value = "parse_failed")]
            ParseFailed = 2,

            /// <summary>
            /// Enum BaselineMismatch for value: baseline_mismatch
            /// </summary>
            [EnumMember(Value = "baseline_mismatch")]
            BaselineMismatch = 3,

            /// <summary>
            /// Enum Csam for value: csam
            /// </summary>
            [EnumMember(Value = "csam")]
            Csam = 4,

            /// <summary>
            /// Enum Nsfw for value: nsfw
            /// </summary>
            [EnumMember(Value = "nsfw")]
            Nsfw = 5,

            /// <summary>
            /// Enum SeeRef for value: see_ref
            /// </summary>
            [EnumMember(Value = "see_ref")]
            SeeRef = 6

        }


        /// <summary>
        /// The value of the metadata field
        /// </summary>
        /// <value>The value of the metadata field</value>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public ValueEnum Value { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerationMetadataStable" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GenerationMetadataStable() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerationMetadataStable" /> class.
        /// </summary>
        /// <param name="type">The relevance of the metadata field (required).</param>
        /// <param name="value">The value of the metadata field (required).</param>
        /// <param name="_ref">Optionally a reference for the metadata (e.g. a lora ID).</param>
        public GenerationMetadataStable(TypeEnum type = default(TypeEnum), ValueEnum value = default(ValueEnum), string _ref = default(string))
        {
            this.Type = type;
            this.Value = value;
            this.Ref = _ref;
        }

        /// <summary>
        /// Optionally a reference for the metadata (e.g. a lora ID)
        /// </summary>
        /// <value>Optionally a reference for the metadata (e.g. a lora ID)</value>
        [DataMember(Name = "ref", EmitDefaultValue = false)]
        public string Ref { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GenerationMetadataStable {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Ref: ").Append(Ref).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GenerationMetadataStable);
        }

        /// <summary>
        /// Returns true if GenerationMetadataStable instances are equal
        /// </summary>
        /// <param name="input">Instance of GenerationMetadataStable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GenerationMetadataStable input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                ) && 
                (
                    this.Ref == input.Ref ||
                    (this.Ref != null &&
                    this.Ref.Equals(input.Ref))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.Value.GetHashCode();
                if (this.Ref != null)
                {
                    hashCode = (hashCode * 59) + this.Ref.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Ref (string) maxLength
            if (this.Ref != null && this.Ref.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Ref, length must be less than 255.", new [] { "Ref" });
            }

            yield break;
        }
    }

}
