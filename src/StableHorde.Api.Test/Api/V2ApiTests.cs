/*
 * Stable Horde
 *
 * The API documentation for the Stable Horde
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using StableHorde.Api.Client;
using StableHorde.Api.Api;
// uncomment below to import models
//using StableHorde.Api.Model;

namespace StableHorde.Api.Test.Api
{
    /// <summary>
    ///  Class for testing V2Api
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class V2ApiTests : IDisposable
    {
        private V2Api instance;

        public V2ApiTests()
        {
            instance = new V2Api();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of V2Api
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' V2Api
            //Assert.IsType<V2Api>(instance);
        }

        /// <summary>
        /// Test DeleteAsyncStatus
        /// </summary>
        [Fact]
        public void DeleteAsyncStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string xFields = null;
            //var response = instance.DeleteAsyncStatus(id, xFields);
            //Assert.IsType<RequestStatusStable>(response);
        }

        /// <summary>
        /// Test DeleteWorkerSingle
        /// </summary>
        [Fact]
        public void DeleteWorkerSingleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workerId = null;
            //string apikey = null;
            //string xFields = null;
            //var response = instance.DeleteWorkerSingle(workerId, apikey, xFields);
            //Assert.IsType<DeletedWorker>(response);
        }

        /// <summary>
        /// Test GetAsyncCheck
        /// </summary>
        [Fact]
        public void GetAsyncCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string xFields = null;
            //var response = instance.GetAsyncCheck(id, xFields);
            //Assert.IsType<RequestStatusCheck>(response);
        }

        /// <summary>
        /// Test GetAsyncStatus
        /// </summary>
        [Fact]
        public void GetAsyncStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string xFields = null;
            //var response = instance.GetAsyncStatus(id, xFields);
            //Assert.IsType<RequestStatusStable>(response);
        }

        /// <summary>
        /// Test GetFindUser
        /// </summary>
        [Fact]
        public void GetFindUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apikey = null;
            //string xFields = null;
            //var response = instance.GetFindUser(apikey, xFields);
            //Assert.IsType<UserDetailsStable>(response);
        }

        /// <summary>
        /// Test GetHordeLoad
        /// </summary>
        [Fact]
        public void GetHordeLoadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xFields = null;
            //var response = instance.GetHordeLoad(xFields);
            //Assert.IsType<HordePerformanceStable>(response);
        }

        /// <summary>
        /// Test GetHordeModes
        /// </summary>
        [Fact]
        public void GetHordeModesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apikey = null;
            //string xFields = null;
            //var response = instance.GetHordeModes(apikey, xFields);
            //Assert.IsType<HordeModes>(response);
        }

        /// <summary>
        /// Test GetHordeNews
        /// </summary>
        [Fact]
        public void GetHordeNewsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xFields = null;
            //var response = instance.GetHordeNews(xFields);
            //Assert.IsType<List<Newspiece>>(response);
        }

        /// <summary>
        /// Test GetModels
        /// </summary>
        [Fact]
        public void GetModelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xFields = null;
            //var response = instance.GetModels(xFields);
            //Assert.IsType<List<ActiveModel>>(response);
        }

        /// <summary>
        /// Test GetUserSingle
        /// </summary>
        [Fact]
        public void GetUserSingleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string apikey = null;
            //string xFields = null;
            //var response = instance.GetUserSingle(userId, apikey, xFields);
            //Assert.IsType<UserDetailsStable>(response);
        }

        /// <summary>
        /// Test GetUsers
        /// </summary>
        [Fact]
        public void GetUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xFields = null;
            //var response = instance.GetUsers(xFields);
            //Assert.IsType<UserDetailsStable>(response);
        }

        /// <summary>
        /// Test GetWorkerSingle
        /// </summary>
        [Fact]
        public void GetWorkerSingleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workerId = null;
            //string apikey = null;
            //string xFields = null;
            //var response = instance.GetWorkerSingle(workerId, apikey, xFields);
            //Assert.IsType<WorkerDetailsStable>(response);
        }

        /// <summary>
        /// Test GetWorkers
        /// </summary>
        [Fact]
        public void GetWorkersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xFields = null;
            //var response = instance.GetWorkers(xFields);
            //Assert.IsType<List<WorkerDetailsStable>>(response);
        }

        /// <summary>
        /// Test PostAsyncGenerate
        /// </summary>
        [Fact]
        public void PostAsyncGenerateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apikey = null;
            //GenerationInput payload = null;
            //string xFields = null;
            //var response = instance.PostAsyncGenerate(apikey, payload, xFields);
            //Assert.IsType<RequestAsync>(response);
        }

        /// <summary>
        /// Test PostJobPop
        /// </summary>
        [Fact]
        public void PostJobPopTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apikey = null;
            //PopInputStable payload = null;
            //string xFields = null;
            //var response = instance.PostJobPop(apikey, payload, xFields);
            //Assert.IsType<GenerationPayload>(response);
        }

        /// <summary>
        /// Test PostJobSubmit
        /// </summary>
        [Fact]
        public void PostJobSubmitTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apikey = null;
            //PostJobSubmitRequest payload = null;
            //string xFields = null;
            //var response = instance.PostJobSubmit(apikey, payload, xFields);
            //Assert.IsType<GenerationSubmitted>(response);
        }

        /// <summary>
        /// Test PostSyncGenerate
        /// </summary>
        [Fact]
        public void PostSyncGenerateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apikey = null;
            //GenerationInput payload = null;
            //string xFields = null;
            //var response = instance.PostSyncGenerate(apikey, payload, xFields);
            //Assert.IsType<RequestStatusStable>(response);
        }

        /// <summary>
        /// Test PostTransferKudos
        /// </summary>
        [Fact]
        public void PostTransferKudosTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apikey = null;
            //PostTransferKudosRequest payload = null;
            //string xFields = null;
            //var response = instance.PostTransferKudos(apikey, payload, xFields);
            //Assert.IsType<KudosTransferred>(response);
        }

        /// <summary>
        /// Test PutHordeModes
        /// </summary>
        [Fact]
        public void PutHordeModesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apikey = null;
            //PutHordeModesRequest payload = null;
            //string xFields = null;
            //var response = instance.PutHordeModes(apikey, payload, xFields);
            //Assert.IsType<HordeModes>(response);
        }

        /// <summary>
        /// Test PutUserSingle
        /// </summary>
        [Fact]
        public void PutUserSingleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string apikey = null;
            //PutUserSingleRequest payload = null;
            //string xFields = null;
            //var response = instance.PutUserSingle(userId, apikey, payload, xFields);
            //Assert.IsType<ModifyUser>(response);
        }

        /// <summary>
        /// Test PutWorkerSingle
        /// </summary>
        [Fact]
        public void PutWorkerSingleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workerId = null;
            //string apikey = null;
            //PutWorkerSingleRequest payload = null;
            //string xFields = null;
            //var response = instance.PutWorkerSingle(workerId, apikey, payload, xFields);
            //Assert.IsType<ModifyWorker>(response);
        }
    }
}
