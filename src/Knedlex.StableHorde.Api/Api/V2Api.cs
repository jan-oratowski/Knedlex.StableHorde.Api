/*
 * AI Horde
 *
 * The API documentation for the AI Horde
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Knedlex.StableHorde.Api.Client;
using Knedlex.StableHorde.Api.Model;

namespace Knedlex.StableHorde.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IV2ApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Moderator Only: Delete a regex filter
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SimpleResponse</returns>
        SimpleResponse DeleteFilterSingle(string filterId, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Moderator Only: Delete a regex filter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SimpleResponse</returns>
        ApiResponse<SimpleResponse> DeleteFilterSingleWithHttpInfo(string filterId, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Cancel an unfinished request
        /// </summary>
        /// <remarks>
        /// This request will include all already generated images in base64 encoded .webp files.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RequestStatusStable</returns>
        RequestStatusStable DeleteImageAsyncStatus(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Cancel an unfinished request
        /// </summary>
        /// <remarks>
        /// This request will include all already generated images in base64 encoded .webp files.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RequestStatusStable</returns>
        ApiResponse<RequestStatusStable> DeleteImageAsyncStatusWithHttpInfo(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Cancel an unfinished interrogation request
        /// </summary>
        /// <remarks>
        /// This request will return all already interrogated image results.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterrogationStatus</returns>
        InterrogationStatus DeleteInterrogationStatus(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Cancel an unfinished interrogation request
        /// </summary>
        /// <remarks>
        /// This request will return all already interrogated image results.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterrogationStatus</returns>
        ApiResponse<InterrogationStatus> DeleteInterrogationStatusWithHttpInfo(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Remove a worker&#39;s IP block
        /// </summary>
        /// <remarks>
        /// Only usable by horde moderators
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SimpleResponse</returns>
        SimpleResponse DeleteOperationsBlockWorkerIp(string workerId, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Remove a worker&#39;s IP block
        /// </summary>
        /// <remarks>
        /// Only usable by horde moderators
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SimpleResponse</returns>
        ApiResponse<SimpleResponse> DeleteOperationsBlockWorkerIpWithHttpInfo(string workerId, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Remove an IP from timeout
        /// </summary>
        /// <remarks>
        /// Only usable by horde moderators
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SimpleResponse</returns>
        SimpleResponse DeleteOperationsIp(string apikey, DeleteTimeoutIPInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Remove an IP from timeout
        /// </summary>
        /// <remarks>
        /// Only usable by horde moderators
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SimpleResponse</returns>
        ApiResponse<SimpleResponse> DeleteOperationsIpWithHttpInfo(string apikey, DeleteTimeoutIPInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Delete an existing SharedKey for this user
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedkeyId"></param>
        /// <param name="apikey">User API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SimpleResponse</returns>
        SimpleResponse DeleteSharedKeySingle(string sharedkeyId, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Delete an existing SharedKey for this user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedkeyId"></param>
        /// <param name="apikey">User API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SimpleResponse</returns>
        ApiResponse<SimpleResponse> DeleteSharedKeySingleWithHttpInfo(string sharedkeyId, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Delete the team entry
        /// </summary>
        /// <remarks>
        /// Only the team&#39;s creator or a horde moderator can use this endpoint. This action is unrecoverable!
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="apikey">The Moderator or Owner API key. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeletedTeam</returns>
        DeletedTeam DeleteTeamSingle(string teamId, string clientAgent = default(string), string apikey = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Delete the team entry
        /// </summary>
        /// <remarks>
        /// Only the team&#39;s creator or a horde moderator can use this endpoint. This action is unrecoverable!
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="apikey">The Moderator or Owner API key. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeletedTeam</returns>
        ApiResponse<DeletedTeam> DeleteTeamSingleWithHttpInfo(string teamId, string clientAgent = default(string), string apikey = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Cancel an unfinished request
        /// </summary>
        /// <remarks>
        /// This request will include all already generated texts.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RequestStatusKobold</returns>
        RequestStatusKobold DeleteTextAsyncStatus(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Cancel an unfinished request
        /// </summary>
        /// <remarks>
        /// This request will include all already generated texts.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RequestStatusKobold</returns>
        ApiResponse<RequestStatusKobold> DeleteTextAsyncStatusWithHttpInfo(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Delete the worker entry
        /// </summary>
        /// <remarks>
        /// This will delete the worker and their statistics. Will not affect the kudos generated by that worker for their owner. Only the worker&#39;s owner and an admin can use this endpoint. This action is unrecoverable!
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeletedWorker</returns>
        DeletedWorker DeleteWorkerSingle(string workerId, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Delete the worker entry
        /// </summary>
        /// <remarks>
        /// This will delete the worker and their statistics. Will not affect the kudos generated by that worker for their owner. Only the worker&#39;s owner and an admin can use this endpoint. This action is unrecoverable!
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeletedWorker</returns>
        ApiResponse<DeletedWorker> DeleteWorkerSingleWithHttpInfo(string workerId, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Moderator Only: A List all filters, or filtered by the query
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;FilterRegex&gt;</returns>
        List<FilterRegex> GetFilterRegex(string apikey, string clientAgent = default(string), int? filterType = default(int?), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Moderator Only: A List all filters, or filtered by the query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;FilterRegex&gt;</returns>
        ApiResponse<List<FilterRegex>> GetFilterRegexWithHttpInfo(string apikey, string clientAgent = default(string), int? filterType = default(int?), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Moderator Only: Display a single filter
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;FilterDetails&gt;</returns>
        List<FilterDetails> GetFilterSingle(string filterId, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Moderator Only: Display a single filter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;FilterDetails&gt;</returns>
        ApiResponse<List<FilterDetails>> GetFilterSingleWithHttpInfo(string filterId, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Moderator Only: A List all filters, or filtered by the query
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="contains">Only return filter containing this word. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;FilterDetails&gt;</returns>
        List<FilterDetails> GetFilters(string apikey, string clientAgent = default(string), int? filterType = default(int?), string contains = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Moderator Only: A List all filters, or filtered by the query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="contains">Only return filter containing this word. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;FilterDetails&gt;</returns>
        ApiResponse<List<FilterDetails>> GetFiltersWithHttpInfo(string apikey, string clientAgent = default(string), int? filterType = default(int?), string contains = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Lookup user details based on their API key
        /// </summary>
        /// <remarks>
        /// This can be used to verify a user exists
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">User API key we&#39;re looking for. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserDetails</returns>
        UserDetails GetFindUser(string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Lookup user details based on their API key
        /// </summary>
        /// <remarks>
        /// This can be used to verify a user exists
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">User API key we&#39;re looking for. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserDetails</returns>
        ApiResponse<UserDetails> GetFindUserWithHttpInfo(string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// If this loads, this node is available
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetHeartbeat(string clientAgent = default(string), int operationIndex = 0);

        /// <summary>
        /// If this loads, this node is available
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetHeartbeatWithHttpInfo(string clientAgent = default(string), int operationIndex = 0);
        /// <summary>
        /// Details about the current performance of this Horde
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HordePerformance</returns>
        HordePerformance GetHordeLoad(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Details about the current performance of this Horde
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HordePerformance</returns>
        ApiResponse<HordePerformance> GetHordeLoadWithHttpInfo(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Horde Maintenance Mode Status
        /// </summary>
        /// <remarks>
        /// Use this endpoint to quicky determine if this horde is in maintenance, invite_only or raid mode.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The Admin or Owner API key. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HordeModes</returns>
        HordeModes GetHordeModes(string apikey = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Horde Maintenance Mode Status
        /// </summary>
        /// <remarks>
        /// Use this endpoint to quicky determine if this horde is in maintenance, invite_only or raid mode.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The Admin or Owner API key. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HordeModes</returns>
        ApiResponse<HordeModes> GetHordeModesWithHttpInfo(string apikey = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Read the latest happenings on the horde
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Newspiece&gt;</returns>
        List<Newspiece> GetHordeNews(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Read the latest happenings on the horde
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Newspiece&gt;</returns>
        ApiResponse<List<Newspiece>> GetHordeNewsWithHttpInfo(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Retrieve the status of an Asynchronous generation request without images
        /// </summary>
        /// <remarks>
        /// Use this request to check the status of a currently running asynchronous request without consuming bandwidth.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RequestStatusCheck</returns>
        RequestStatusCheck GetImageAsyncCheck(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Retrieve the status of an Asynchronous generation request without images
        /// </summary>
        /// <remarks>
        /// Use this request to check the status of a currently running asynchronous request without consuming bandwidth.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RequestStatusCheck</returns>
        ApiResponse<RequestStatusCheck> GetImageAsyncCheckWithHttpInfo(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Retrieve the full status of an Asynchronous generation request
        /// </summary>
        /// <remarks>
        /// This request will include all already generated images in download URL or base64 encoded .webp files. As such, you are requested to not retrieve this endpoint often. Instead use the /check/ endpoint first This endpoint is limited to 10 request per minute
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RequestStatusStable</returns>
        RequestStatusStable GetImageAsyncStatus(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Retrieve the full status of an Asynchronous generation request
        /// </summary>
        /// <remarks>
        /// This request will include all already generated images in download URL or base64 encoded .webp files. As such, you are requested to not retrieve this endpoint often. Instead use the /check/ endpoint first This endpoint is limited to 10 request per minute
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RequestStatusStable</returns>
        ApiResponse<RequestStatusStable> GetImageAsyncStatusWithHttpInfo(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Details how many images were generated per model for the past day, month and total
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ImgModelStats</returns>
        ImgModelStats GetImageHordeStatsModels(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Details how many images were generated per model for the past day, month and total
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ImgModelStats</returns>
        ApiResponse<ImgModelStats> GetImageHordeStatsModelsWithHttpInfo(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Details how many images have been generated in the past minux,hour,day,month and total
        /// </summary>
        /// <remarks>
        /// Also shows the amount of pixelsteps for the same timeframe.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatsImgTotals</returns>
        StatsImgTotals GetImageHordeStatsTotals(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Details how many images have been generated in the past minux,hour,day,month and total
        /// </summary>
        /// <remarks>
        /// Also shows the amount of pixelsteps for the same timeframe.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatsImgTotals</returns>
        ApiResponse<StatsImgTotals> GetImageHordeStatsTotalsWithHttpInfo(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Retrieve the full status of an interrogation request
        /// </summary>
        /// <remarks>
        /// This request will include all already generated images. As such, you are requested to not retrieve this endpoint often. Instead use the /check/ endpoint first
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterrogationStatus</returns>
        InterrogationStatus GetInterrogationStatus(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Retrieve the full status of an interrogation request
        /// </summary>
        /// <remarks>
        /// This request will include all already generated images. As such, you are requested to not retrieve this endpoint often. Instead use the /check/ endpoint first
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterrogationStatus</returns>
        ApiResponse<InterrogationStatus> GetInterrogationStatusWithHttpInfo(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Returns all the statistics of a specific model in this horde
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelName"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ActiveModel</returns>
        ActiveModel GetModelSingle(string modelName, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Returns all the statistics of a specific model in this horde
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelName"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ActiveModel</returns>
        ApiResponse<ActiveModel> GetModelSingleWithHttpInfo(string modelName, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Returns a list of models active currently in this horde
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="type">Filter the models by type (image or text). (optional, default to &quot;image&quot;)</param>
        /// <param name="minCount">Filter only models that have at least this amount of threads serving. (optional)</param>
        /// <param name="maxCount">Filter the models that have at most this amount of threads serving. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ActiveModel&gt;</returns>
        List<ActiveModel> GetModels(string clientAgent = default(string), string type = default(string), int? minCount = default(int?), int? maxCount = default(int?), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Returns a list of models active currently in this horde
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="type">Filter the models by type (image or text). (optional, default to &quot;image&quot;)</param>
        /// <param name="minCount">Filter only models that have at least this amount of threads serving. (optional)</param>
        /// <param name="maxCount">Filter the models that have at most this amount of threads serving. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ActiveModel&gt;</returns>
        ApiResponse<List<ActiveModel>> GetModelsWithHttpInfo(string clientAgent = default(string), string type = default(string), int? minCount = default(int?), int? maxCount = default(int?), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Return all existing IP Block timeouts
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;IPTimeout&gt;</returns>
        List<IPTimeout> GetOperationsIp(string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Return all existing IP Block timeouts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;IPTimeout&gt;</returns>
        ApiResponse<List<IPTimeout>> GetOperationsIpWithHttpInfo(string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Check if an IP or CIDR is in timeout
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ipaddr"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;IPTimeout&gt;</returns>
        List<IPTimeout> GetOperationsIpSingle(string ipaddr, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Check if an IP or CIDR is in timeout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ipaddr"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;IPTimeout&gt;</returns>
        ApiResponse<List<IPTimeout>> GetOperationsIpSingleWithHttpInfo(string ipaddr, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Get details about an existing Shared Key
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedkeyId"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SharedKeyDetails</returns>
        SharedKeyDetails GetSharedKeySingle(string sharedkeyId, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Get details about an existing Shared Key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedkeyId"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SharedKeyDetails</returns>
        ApiResponse<SharedKeyDetails> GetSharedKeySingleWithHttpInfo(string sharedkeyId, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Details of a worker Team
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="apikey">The Moderator or Owner API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TeamDetails</returns>
        TeamDetails GetTeamSingle(string teamId, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Details of a worker Team
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="apikey">The Moderator or Owner API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TeamDetails</returns>
        ApiResponse<TeamDetails> GetTeamSingleWithHttpInfo(string teamId, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// A List with the details of all teams
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TeamDetails&gt;</returns>
        List<TeamDetails> GetTeams(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// A List with the details of all teams
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TeamDetails&gt;</returns>
        ApiResponse<List<TeamDetails>> GetTeamsWithHttpInfo(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Retrieve the full status of an Asynchronous generation request
        /// </summary>
        /// <remarks>
        /// This request will include all already generated texts.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RequestStatusKobold</returns>
        RequestStatusKobold GetTextAsyncStatus(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Retrieve the full status of an Asynchronous generation request
        /// </summary>
        /// <remarks>
        /// This request will include all already generated texts.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RequestStatusKobold</returns>
        ApiResponse<RequestStatusKobold> GetTextAsyncStatusWithHttpInfo(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Details how many texts were generated per model for the past day, month and total
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TxtModelStats</returns>
        TxtModelStats GetTextHordeStatsModels(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Details how many texts were generated per model for the past day, month and total
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TxtModelStats</returns>
        ApiResponse<TxtModelStats> GetTextHordeStatsModelsWithHttpInfo(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Details how many texts have been generated in the past minux,hour,day,month and total
        /// </summary>
        /// <remarks>
        /// Also shows the amount of pixelsteps for the same timeframe.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatsTxtTotals</returns>
        StatsTxtTotals GetTextHordeStatsTotals(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Details how many texts have been generated in the past minux,hour,day,month and total
        /// </summary>
        /// <remarks>
        /// Also shows the amount of pixelsteps for the same timeframe.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatsTxtTotals</returns>
        ApiResponse<StatsTxtTotals> GetTextHordeStatsTotalsWithHttpInfo(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Details and statistics about a specific user
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apikey">The Admin, Mod or Owner API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserDetails</returns>
        UserDetails GetUserSingle(string userId, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Details and statistics about a specific user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apikey">The Admin, Mod or Owner API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserDetails</returns>
        ApiResponse<UserDetails> GetUserSingleWithHttpInfo(string userId, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// A List with the details and statistic of all registered users
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="page">Which page of results to return. Each page has 25 users. (optional, default to 1)</param>
        /// <param name="sort">How to sort the returned list. (optional, default to &quot;kudos&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserDetails</returns>
        UserDetails GetUsers(string clientAgent = default(string), int? page = default(int?), string sort = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// A List with the details and statistic of all registered users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="page">Which page of results to return. Each page has 25 users. (optional, default to 1)</param>
        /// <param name="sort">How to sort the returned list. (optional, default to &quot;kudos&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserDetails</returns>
        ApiResponse<UserDetails> GetUsersWithHttpInfo(string clientAgent = default(string), int? page = default(int?), string sort = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Details of a registered worker
        /// </summary>
        /// <remarks>
        /// Can retrieve the details of a worker even if inactive (A worker is considered inactive if it has not checked in for 5 minutes)
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WorkerDetails</returns>
        WorkerDetails GetWorkerSingle(string workerId, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Details of a registered worker
        /// </summary>
        /// <remarks>
        /// Can retrieve the details of a worker even if inactive (A worker is considered inactive if it has not checked in for 5 minutes)
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WorkerDetails</returns>
        ApiResponse<WorkerDetails> GetWorkerSingleWithHttpInfo(string workerId, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// A List with the details of all registered and active workers
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A Moderator API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="type">Filter the workers by type (image, text or interrogation). (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;WorkerDetails&gt;</returns>
        List<WorkerDetails> GetWorkers(string apikey = default(string), string clientAgent = default(string), string type = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// A List with the details of all registered and active workers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A Moderator API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="type">Filter the workers by type (image, text or interrogation). (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;WorkerDetails&gt;</returns>
        ApiResponse<List<WorkerDetails>> GetWorkersWithHttpInfo(string apikey = default(string), string clientAgent = default(string), string type = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Moderator Only: Modify an existing regex filter
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FilterDetails</returns>
        FilterDetails PatchFilterSingle(string filterId, string apikey, PatchExistingFilter payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Moderator Only: Modify an existing regex filter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FilterDetails</returns>
        ApiResponse<FilterDetails> PatchFilterSingleWithHttpInfo(string filterId, string apikey, PatchExistingFilter payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Modify an existing Shared Key
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedkeyId"></param>
        /// <param name="apikey">User API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SharedKeyDetails</returns>
        SharedKeyDetails PatchSharedKeySingle(string sharedkeyId, string apikey, SharedKeyInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Modify an existing Shared Key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedkeyId"></param>
        /// <param name="apikey">User API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SharedKeyDetails</returns>
        ApiResponse<SharedKeyDetails> PatchSharedKeySingleWithHttpInfo(string sharedkeyId, string apikey, SharedKeyInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Update a Team&#39;s information
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="payload"></param>
        /// <param name="apikey">The Moderator or Creator API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModifyTeam</returns>
        ModifyTeam PatchTeamSingle(string teamId, ModifyTeamInput payload, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Update a Team&#39;s information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="payload"></param>
        /// <param name="apikey">The Moderator or Creator API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModifyTeam</returns>
        ApiResponse<ModifyTeam> PatchTeamSingleWithHttpInfo(string teamId, ModifyTeamInput payload, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Submit aesthetic ratings for generated images to be used by LAION and Stability
        /// </summary>
        /// <remarks>
        /// AI The request has to have been sent as shared: true. You can select the best image in the set, and/or provide a rating for each or some images in the set. If you select best-of image, you will gain 4 kudos. Each rating is 5 kudos. Best-of will be ignored when ratings conflict with it. You can never gain more kudos than you spent for this generation. Your reward at max will be your kudos consumption - 1.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerationSubmitted</returns>
        GenerationSubmitted PostAesthetics(string id, AestheticsPayload payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Submit aesthetic ratings for generated images to be used by LAION and Stability
        /// </summary>
        /// <remarks>
        /// AI The request has to have been sent as shared: true. You can select the best image in the set, and/or provide a rating for each or some images in the set. If you select best-of image, you will gain 4 kudos. Each rating is 5 kudos. Best-of will be ignored when ratings conflict with it. You can never gain more kudos than you spent for this generation. Your reward at max will be your kudos consumption - 1.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerationSubmitted</returns>
        ApiResponse<GenerationSubmitted> PostAestheticsWithHttpInfo(string id, AestheticsPayload payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Awards Kudos to registed user
        /// </summary>
        /// <remarks>
        /// This API can only be used through privileged access.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The sending user&#39;s API key.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>KudosAwarded</returns>
        KudosAwarded PostAwardKudos(string apikey, PostAwardKudosRequest payload, string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Awards Kudos to registed user
        /// </summary>
        /// <remarks>
        /// This API can only be used through privileged access.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The sending user&#39;s API key.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of KudosAwarded</returns>
        ApiResponse<KudosAwarded> PostAwardKudosWithHttpInfo(string apikey, PostAwardKudosRequest payload, string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Moderator Only: Check The suspicion of the provided prompt
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FilterPromptSuspicion</returns>
        FilterPromptSuspicion PostFilters(string apikey, PostFiltersRequest payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Moderator Only: Check The suspicion of the provided prompt
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FilterPromptSuspicion</returns>
        ApiResponse<FilterPromptSuspicion> PostFiltersWithHttpInfo(string apikey, PostFiltersRequest payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Initiate an Asynchronous request to generate images
        /// </summary>
        /// <remarks>
        /// This endpoint will immediately return with the UUID of the request for generation. This endpoint will always be accepted, even if there are no workers available currently to fulfill this request. Perhaps some will appear in the next 10 minutes. Asynchronous requests live for 10 minutes before being considered stale and being deleted.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RequestAsync</returns>
        RequestAsync PostImageAsyncGenerate(string apikey, GenerationInputStable payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Initiate an Asynchronous request to generate images
        /// </summary>
        /// <remarks>
        /// This endpoint will immediately return with the UUID of the request for generation. This endpoint will always be accepted, even if there are no workers available currently to fulfill this request. Perhaps some will appear in the next 10 minutes. Asynchronous requests live for 10 minutes before being considered stale and being deleted.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RequestAsync</returns>
        ApiResponse<RequestAsync> PostImageAsyncGenerateWithHttpInfo(string apikey, GenerationInputStable payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Check if there are generation requests queued for fulfillment
        /// </summary>
        /// <remarks>
        /// This endpoint is used by registered workers only
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerationPayloadStable</returns>
        GenerationPayloadStable PostImageJobPop(string apikey, PopInputStable payload, string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Check if there are generation requests queued for fulfillment
        /// </summary>
        /// <remarks>
        /// This endpoint is used by registered workers only
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerationPayloadStable</returns>
        ApiResponse<GenerationPayloadStable> PostImageJobPopWithHttpInfo(string apikey, PopInputStable payload, string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Submit a generated image
        /// </summary>
        /// <remarks>
        /// This endpoint is used by registered workers only
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The worker&#39;s owner API key.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerationSubmitted</returns>
        GenerationSubmitted PostImageJobSubmit(string apikey, SubmitInputStable payload, string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Submit a generated image
        /// </summary>
        /// <remarks>
        /// This endpoint is used by registered workers only
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The worker&#39;s owner API key.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerationSubmitted</returns>
        ApiResponse<GenerationSubmitted> PostImageJobSubmitWithHttpInfo(string apikey, SubmitInputStable payload, string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Initiate an Asynchronous request to interrogate an image
        /// </summary>
        /// <remarks>
        /// This endpoint will immediately return with the UUID of the request for interrogation. This endpoint will always be accepted, even if there are no workers available currently to fulfill this request. Perhaps some will appear in the next 20 minutes. Asynchronous requests live for 20 minutes before being considered stale and being deleted.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A User API key</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RequestInterrogationResponse</returns>
        RequestInterrogationResponse PostInterrogate(string apikey, ModelInterrogationInputStable payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Initiate an Asynchronous request to interrogate an image
        /// </summary>
        /// <remarks>
        /// This endpoint will immediately return with the UUID of the request for interrogation. This endpoint will always be accepted, even if there are no workers available currently to fulfill this request. Perhaps some will appear in the next 20 minutes. Asynchronous requests live for 20 minutes before being considered stale and being deleted.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A User API key</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RequestInterrogationResponse</returns>
        ApiResponse<RequestInterrogationResponse> PostInterrogateWithHttpInfo(string apikey, ModelInterrogationInputStable payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Check if there are interrogation requests queued for fulfillment
        /// </summary>
        /// <remarks>
        /// This endpoint is used by registered workers only
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterrogationPopPayload</returns>
        InterrogationPopPayload PostInterrogatePop(string apikey, InterrogationPopInput payload, string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Check if there are interrogation requests queued for fulfillment
        /// </summary>
        /// <remarks>
        /// This endpoint is used by registered workers only
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterrogationPopPayload</returns>
        ApiResponse<InterrogationPopPayload> PostInterrogatePopWithHttpInfo(string apikey, InterrogationPopInput payload, string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Submit the results of an interrogated image
        /// </summary>
        /// <remarks>
        /// This endpoint is used by registered workers only
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The worker&#39;s owner API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerationSubmitted</returns>
        GenerationSubmitted PostInterrogateSubmit(string apikey, PostInterrogateSubmitRequest payload, string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Submit the results of an interrogated image
        /// </summary>
        /// <remarks>
        /// This endpoint is used by registered workers only
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The worker&#39;s owner API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerationSubmitted</returns>
        ApiResponse<GenerationSubmitted> PostInterrogateSubmitWithHttpInfo(string apikey, PostInterrogateSubmitRequest payload, string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Add an IP or CIDR to timeout
        /// </summary>
        /// <remarks>
        /// Only usable by horde moderators
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SimpleResponse</returns>
        SimpleResponse PostOperationsIp(string apikey, AddTimeoutIPInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Add an IP or CIDR to timeout
        /// </summary>
        /// <remarks>
        /// Only usable by horde moderators
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SimpleResponse</returns>
        ApiResponse<SimpleResponse> PostOperationsIpWithHttpInfo(string apikey, AddTimeoutIPInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Create a new team
        /// </summary>
        /// <remarks>
        /// Only trusted users can create new teams.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A User API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModifyTeam</returns>
        ModifyTeam PostTeams(string apikey, CreateTeamInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Create a new team
        /// </summary>
        /// <remarks>
        /// Only trusted users can create new teams.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A User API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModifyTeam</returns>
        ApiResponse<ModifyTeam> PostTeamsWithHttpInfo(string apikey, CreateTeamInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Initiate an Asynchronous request to generate text
        /// </summary>
        /// <remarks>
        /// This endpoint will immediately return with the UUID of the request for generation. This endpoint will always be accepted, even if there are no workers available currently to fulfill this request. Perhaps some will appear in the next 20 minutes. Asynchronous requests live for 20 minutes before being considered stale and being deleted.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RequestAsync</returns>
        RequestAsync PostTextAsyncGenerate(string apikey, GenerationInputKobold payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Initiate an Asynchronous request to generate text
        /// </summary>
        /// <remarks>
        /// This endpoint will immediately return with the UUID of the request for generation. This endpoint will always be accepted, even if there are no workers available currently to fulfill this request. Perhaps some will appear in the next 20 minutes. Asynchronous requests live for 20 minutes before being considered stale and being deleted.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RequestAsync</returns>
        ApiResponse<RequestAsync> PostTextAsyncGenerateWithHttpInfo(string apikey, GenerationInputKobold payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Check if there are generation requests queued for fulfillment
        /// </summary>
        /// <remarks>
        /// This endpoint is used by registered workers only
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerationPayload</returns>
        GenerationPayload PostTextJobPop(string apikey, PopInputKobold payload, string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Check if there are generation requests queued for fulfillment
        /// </summary>
        /// <remarks>
        /// This endpoint is used by registered workers only
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerationPayload</returns>
        ApiResponse<GenerationPayload> PostTextJobPopWithHttpInfo(string apikey, PopInputKobold payload, string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Submit generated text
        /// </summary>
        /// <remarks>
        /// This endpoint is used by registered workers only
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The worker&#39;s owner API key.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerationSubmitted</returns>
        GenerationSubmitted PostTextJobSubmit(string apikey, SubmitInputKobold payload, string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Submit generated text
        /// </summary>
        /// <remarks>
        /// This endpoint is used by registered workers only
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The worker&#39;s owner API key.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerationSubmitted</returns>
        ApiResponse<GenerationSubmitted> PostTextJobSubmitWithHttpInfo(string apikey, SubmitInputKobold payload, string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Transfer Kudos to another registed user
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The sending user&#39;s API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>KudosTransferred</returns>
        KudosTransferred PostTransferKudos(string apikey, PostAwardKudosRequest payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Transfer Kudos to another registed user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The sending user&#39;s API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of KudosTransferred</returns>
        ApiResponse<KudosTransferred> PostTransferKudosWithHttpInfo(string apikey, PostAwardKudosRequest payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Moderator Only: Add a new regex filter
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FilterDetails</returns>
        FilterDetails PutFilters(string apikey, PutNewFilter payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Moderator Only: Add a new regex filter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FilterDetails</returns>
        ApiResponse<FilterDetails> PutFiltersWithHttpInfo(string apikey, PutNewFilter payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Change Horde Modes
        /// </summary>
        /// <remarks>
        /// Endpoint for admins to (un)set the horde into maintenance, invite_only or raid modes.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The Admin API key.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HordeModes</returns>
        HordeModes PutHordeModes(string apikey, PutHordeModesRequest payload, string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Change Horde Modes
        /// </summary>
        /// <remarks>
        /// Endpoint for admins to (un)set the horde into maintenance, invite_only or raid modes.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The Admin API key.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HordeModes</returns>
        ApiResponse<HordeModes> PutHordeModesWithHttpInfo(string apikey, PutHordeModesRequest payload, string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Block worker&#39;s from a specific IP for 24 hours
        /// </summary>
        /// <remarks>
        /// Only usable by horde moderators
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SimpleResponse</returns>
        SimpleResponse PutOperationsBlockWorkerIp(string workerId, string apikey, AddWorkerTimeout payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Block worker&#39;s from a specific IP for 24 hours
        /// </summary>
        /// <remarks>
        /// Only usable by horde moderators
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SimpleResponse</returns>
        ApiResponse<SimpleResponse> PutOperationsBlockWorkerIpWithHttpInfo(string workerId, string apikey, AddWorkerTimeout payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Create a new SharedKey for this user
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">User API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SharedKeyDetails</returns>
        SharedKeyDetails PutSharedKey(string apikey, SharedKeyInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Create a new SharedKey for this user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">User API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SharedKeyDetails</returns>
        ApiResponse<SharedKeyDetails> PutSharedKeyWithHttpInfo(string apikey, SharedKeyInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// Endpoint for horde admins to perform operations on users
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apikey">The Admin API .</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModifyUser</returns>
        ModifyUser PutUserSingle(string userId, string apikey, ModifyUserInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// Endpoint for horde admins to perform operations on users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apikey">The Admin API .</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModifyUser</returns>
        ApiResponse<ModifyUser> PutUserSingleWithHttpInfo(string userId, string apikey, ModifyUserInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModifyWorker</returns>
        ModifyWorker PutWorkerSingle(string workerId, string apikey, ModifyWorkerInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModifyWorker</returns>
        ApiResponse<ModifyWorker> PutWorkerSingleWithHttpInfo(string workerId, string apikey, ModifyWorkerInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IV2ApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Moderator Only: Delete a regex filter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SimpleResponse</returns>
        System.Threading.Tasks.Task<SimpleResponse> DeleteFilterSingleAsync(string filterId, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Moderator Only: Delete a regex filter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SimpleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimpleResponse>> DeleteFilterSingleWithHttpInfoAsync(string filterId, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cancel an unfinished request
        /// </summary>
        /// <remarks>
        /// This request will include all already generated images in base64 encoded .webp files.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RequestStatusStable</returns>
        System.Threading.Tasks.Task<RequestStatusStable> DeleteImageAsyncStatusAsync(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel an unfinished request
        /// </summary>
        /// <remarks>
        /// This request will include all already generated images in base64 encoded .webp files.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RequestStatusStable)</returns>
        System.Threading.Tasks.Task<ApiResponse<RequestStatusStable>> DeleteImageAsyncStatusWithHttpInfoAsync(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cancel an unfinished interrogation request
        /// </summary>
        /// <remarks>
        /// This request will return all already interrogated image results.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterrogationStatus</returns>
        System.Threading.Tasks.Task<InterrogationStatus> DeleteInterrogationStatusAsync(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel an unfinished interrogation request
        /// </summary>
        /// <remarks>
        /// This request will return all already interrogated image results.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterrogationStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterrogationStatus>> DeleteInterrogationStatusWithHttpInfoAsync(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a worker&#39;s IP block
        /// </summary>
        /// <remarks>
        /// Only usable by horde moderators
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SimpleResponse</returns>
        System.Threading.Tasks.Task<SimpleResponse> DeleteOperationsBlockWorkerIpAsync(string workerId, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a worker&#39;s IP block
        /// </summary>
        /// <remarks>
        /// Only usable by horde moderators
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SimpleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimpleResponse>> DeleteOperationsBlockWorkerIpWithHttpInfoAsync(string workerId, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove an IP from timeout
        /// </summary>
        /// <remarks>
        /// Only usable by horde moderators
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SimpleResponse</returns>
        System.Threading.Tasks.Task<SimpleResponse> DeleteOperationsIpAsync(string apikey, DeleteTimeoutIPInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove an IP from timeout
        /// </summary>
        /// <remarks>
        /// Only usable by horde moderators
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SimpleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimpleResponse>> DeleteOperationsIpWithHttpInfoAsync(string apikey, DeleteTimeoutIPInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an existing SharedKey for this user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedkeyId"></param>
        /// <param name="apikey">User API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SimpleResponse</returns>
        System.Threading.Tasks.Task<SimpleResponse> DeleteSharedKeySingleAsync(string sharedkeyId, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete an existing SharedKey for this user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedkeyId"></param>
        /// <param name="apikey">User API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SimpleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimpleResponse>> DeleteSharedKeySingleWithHttpInfoAsync(string sharedkeyId, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete the team entry
        /// </summary>
        /// <remarks>
        /// Only the team&#39;s creator or a horde moderator can use this endpoint. This action is unrecoverable!
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="apikey">The Moderator or Owner API key. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeletedTeam</returns>
        System.Threading.Tasks.Task<DeletedTeam> DeleteTeamSingleAsync(string teamId, string clientAgent = default(string), string apikey = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete the team entry
        /// </summary>
        /// <remarks>
        /// Only the team&#39;s creator or a horde moderator can use this endpoint. This action is unrecoverable!
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="apikey">The Moderator or Owner API key. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeletedTeam)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeletedTeam>> DeleteTeamSingleWithHttpInfoAsync(string teamId, string clientAgent = default(string), string apikey = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cancel an unfinished request
        /// </summary>
        /// <remarks>
        /// This request will include all already generated texts.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RequestStatusKobold</returns>
        System.Threading.Tasks.Task<RequestStatusKobold> DeleteTextAsyncStatusAsync(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel an unfinished request
        /// </summary>
        /// <remarks>
        /// This request will include all already generated texts.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RequestStatusKobold)</returns>
        System.Threading.Tasks.Task<ApiResponse<RequestStatusKobold>> DeleteTextAsyncStatusWithHttpInfoAsync(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete the worker entry
        /// </summary>
        /// <remarks>
        /// This will delete the worker and their statistics. Will not affect the kudos generated by that worker for their owner. Only the worker&#39;s owner and an admin can use this endpoint. This action is unrecoverable!
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeletedWorker</returns>
        System.Threading.Tasks.Task<DeletedWorker> DeleteWorkerSingleAsync(string workerId, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete the worker entry
        /// </summary>
        /// <remarks>
        /// This will delete the worker and their statistics. Will not affect the kudos generated by that worker for their owner. Only the worker&#39;s owner and an admin can use this endpoint. This action is unrecoverable!
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeletedWorker)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeletedWorker>> DeleteWorkerSingleWithHttpInfoAsync(string workerId, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Moderator Only: A List all filters, or filtered by the query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FilterRegex&gt;</returns>
        System.Threading.Tasks.Task<List<FilterRegex>> GetFilterRegexAsync(string apikey, string clientAgent = default(string), int? filterType = default(int?), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Moderator Only: A List all filters, or filtered by the query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FilterRegex&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FilterRegex>>> GetFilterRegexWithHttpInfoAsync(string apikey, string clientAgent = default(string), int? filterType = default(int?), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Moderator Only: Display a single filter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FilterDetails&gt;</returns>
        System.Threading.Tasks.Task<List<FilterDetails>> GetFilterSingleAsync(string filterId, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Moderator Only: Display a single filter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FilterDetails&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FilterDetails>>> GetFilterSingleWithHttpInfoAsync(string filterId, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Moderator Only: A List all filters, or filtered by the query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="contains">Only return filter containing this word. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FilterDetails&gt;</returns>
        System.Threading.Tasks.Task<List<FilterDetails>> GetFiltersAsync(string apikey, string clientAgent = default(string), int? filterType = default(int?), string contains = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Moderator Only: A List all filters, or filtered by the query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="contains">Only return filter containing this word. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FilterDetails&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FilterDetails>>> GetFiltersWithHttpInfoAsync(string apikey, string clientAgent = default(string), int? filterType = default(int?), string contains = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Lookup user details based on their API key
        /// </summary>
        /// <remarks>
        /// This can be used to verify a user exists
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">User API key we&#39;re looking for. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserDetails</returns>
        System.Threading.Tasks.Task<UserDetails> GetFindUserAsync(string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Lookup user details based on their API key
        /// </summary>
        /// <remarks>
        /// This can be used to verify a user exists
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">User API key we&#39;re looking for. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserDetails>> GetFindUserWithHttpInfoAsync(string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// If this loads, this node is available
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetHeartbeatAsync(string clientAgent = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// If this loads, this node is available
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetHeartbeatWithHttpInfoAsync(string clientAgent = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Details about the current performance of this Horde
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HordePerformance</returns>
        System.Threading.Tasks.Task<HordePerformance> GetHordeLoadAsync(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Details about the current performance of this Horde
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HordePerformance)</returns>
        System.Threading.Tasks.Task<ApiResponse<HordePerformance>> GetHordeLoadWithHttpInfoAsync(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Horde Maintenance Mode Status
        /// </summary>
        /// <remarks>
        /// Use this endpoint to quicky determine if this horde is in maintenance, invite_only or raid mode.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The Admin or Owner API key. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HordeModes</returns>
        System.Threading.Tasks.Task<HordeModes> GetHordeModesAsync(string apikey = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Horde Maintenance Mode Status
        /// </summary>
        /// <remarks>
        /// Use this endpoint to quicky determine if this horde is in maintenance, invite_only or raid mode.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The Admin or Owner API key. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HordeModes)</returns>
        System.Threading.Tasks.Task<ApiResponse<HordeModes>> GetHordeModesWithHttpInfoAsync(string apikey = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read the latest happenings on the horde
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Newspiece&gt;</returns>
        System.Threading.Tasks.Task<List<Newspiece>> GetHordeNewsAsync(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read the latest happenings on the horde
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Newspiece&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Newspiece>>> GetHordeNewsWithHttpInfoAsync(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the status of an Asynchronous generation request without images
        /// </summary>
        /// <remarks>
        /// Use this request to check the status of a currently running asynchronous request without consuming bandwidth.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RequestStatusCheck</returns>
        System.Threading.Tasks.Task<RequestStatusCheck> GetImageAsyncCheckAsync(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the status of an Asynchronous generation request without images
        /// </summary>
        /// <remarks>
        /// Use this request to check the status of a currently running asynchronous request without consuming bandwidth.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RequestStatusCheck)</returns>
        System.Threading.Tasks.Task<ApiResponse<RequestStatusCheck>> GetImageAsyncCheckWithHttpInfoAsync(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the full status of an Asynchronous generation request
        /// </summary>
        /// <remarks>
        /// This request will include all already generated images in download URL or base64 encoded .webp files. As such, you are requested to not retrieve this endpoint often. Instead use the /check/ endpoint first This endpoint is limited to 10 request per minute
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RequestStatusStable</returns>
        System.Threading.Tasks.Task<RequestStatusStable> GetImageAsyncStatusAsync(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the full status of an Asynchronous generation request
        /// </summary>
        /// <remarks>
        /// This request will include all already generated images in download URL or base64 encoded .webp files. As such, you are requested to not retrieve this endpoint often. Instead use the /check/ endpoint first This endpoint is limited to 10 request per minute
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RequestStatusStable)</returns>
        System.Threading.Tasks.Task<ApiResponse<RequestStatusStable>> GetImageAsyncStatusWithHttpInfoAsync(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Details how many images were generated per model for the past day, month and total
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImgModelStats</returns>
        System.Threading.Tasks.Task<ImgModelStats> GetImageHordeStatsModelsAsync(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Details how many images were generated per model for the past day, month and total
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImgModelStats)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImgModelStats>> GetImageHordeStatsModelsWithHttpInfoAsync(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Details how many images have been generated in the past minux,hour,day,month and total
        /// </summary>
        /// <remarks>
        /// Also shows the amount of pixelsteps for the same timeframe.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatsImgTotals</returns>
        System.Threading.Tasks.Task<StatsImgTotals> GetImageHordeStatsTotalsAsync(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Details how many images have been generated in the past minux,hour,day,month and total
        /// </summary>
        /// <remarks>
        /// Also shows the amount of pixelsteps for the same timeframe.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatsImgTotals)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatsImgTotals>> GetImageHordeStatsTotalsWithHttpInfoAsync(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the full status of an interrogation request
        /// </summary>
        /// <remarks>
        /// This request will include all already generated images. As such, you are requested to not retrieve this endpoint often. Instead use the /check/ endpoint first
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterrogationStatus</returns>
        System.Threading.Tasks.Task<InterrogationStatus> GetInterrogationStatusAsync(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the full status of an interrogation request
        /// </summary>
        /// <remarks>
        /// This request will include all already generated images. As such, you are requested to not retrieve this endpoint often. Instead use the /check/ endpoint first
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterrogationStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterrogationStatus>> GetInterrogationStatusWithHttpInfoAsync(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns all the statistics of a specific model in this horde
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelName"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActiveModel</returns>
        System.Threading.Tasks.Task<ActiveModel> GetModelSingleAsync(string modelName, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns all the statistics of a specific model in this horde
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelName"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActiveModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActiveModel>> GetModelSingleWithHttpInfoAsync(string modelName, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a list of models active currently in this horde
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="type">Filter the models by type (image or text). (optional, default to &quot;image&quot;)</param>
        /// <param name="minCount">Filter only models that have at least this amount of threads serving. (optional)</param>
        /// <param name="maxCount">Filter the models that have at most this amount of threads serving. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ActiveModel&gt;</returns>
        System.Threading.Tasks.Task<List<ActiveModel>> GetModelsAsync(string clientAgent = default(string), string type = default(string), int? minCount = default(int?), int? maxCount = default(int?), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list of models active currently in this horde
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="type">Filter the models by type (image or text). (optional, default to &quot;image&quot;)</param>
        /// <param name="minCount">Filter only models that have at least this amount of threads serving. (optional)</param>
        /// <param name="maxCount">Filter the models that have at most this amount of threads serving. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ActiveModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ActiveModel>>> GetModelsWithHttpInfoAsync(string clientAgent = default(string), string type = default(string), int? minCount = default(int?), int? maxCount = default(int?), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return all existing IP Block timeouts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;IPTimeout&gt;</returns>
        System.Threading.Tasks.Task<List<IPTimeout>> GetOperationsIpAsync(string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return all existing IP Block timeouts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;IPTimeout&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<IPTimeout>>> GetOperationsIpWithHttpInfoAsync(string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Check if an IP or CIDR is in timeout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ipaddr"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;IPTimeout&gt;</returns>
        System.Threading.Tasks.Task<List<IPTimeout>> GetOperationsIpSingleAsync(string ipaddr, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check if an IP or CIDR is in timeout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ipaddr"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;IPTimeout&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<IPTimeout>>> GetOperationsIpSingleWithHttpInfoAsync(string ipaddr, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get details about an existing Shared Key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedkeyId"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SharedKeyDetails</returns>
        System.Threading.Tasks.Task<SharedKeyDetails> GetSharedKeySingleAsync(string sharedkeyId, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get details about an existing Shared Key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedkeyId"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SharedKeyDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<SharedKeyDetails>> GetSharedKeySingleWithHttpInfoAsync(string sharedkeyId, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Details of a worker Team
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="apikey">The Moderator or Owner API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TeamDetails</returns>
        System.Threading.Tasks.Task<TeamDetails> GetTeamSingleAsync(string teamId, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Details of a worker Team
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="apikey">The Moderator or Owner API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TeamDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamDetails>> GetTeamSingleWithHttpInfoAsync(string teamId, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// A List with the details of all teams
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TeamDetails&gt;</returns>
        System.Threading.Tasks.Task<List<TeamDetails>> GetTeamsAsync(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// A List with the details of all teams
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TeamDetails&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TeamDetails>>> GetTeamsWithHttpInfoAsync(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the full status of an Asynchronous generation request
        /// </summary>
        /// <remarks>
        /// This request will include all already generated texts.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RequestStatusKobold</returns>
        System.Threading.Tasks.Task<RequestStatusKobold> GetTextAsyncStatusAsync(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the full status of an Asynchronous generation request
        /// </summary>
        /// <remarks>
        /// This request will include all already generated texts.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RequestStatusKobold)</returns>
        System.Threading.Tasks.Task<ApiResponse<RequestStatusKobold>> GetTextAsyncStatusWithHttpInfoAsync(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Details how many texts were generated per model for the past day, month and total
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TxtModelStats</returns>
        System.Threading.Tasks.Task<TxtModelStats> GetTextHordeStatsModelsAsync(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Details how many texts were generated per model for the past day, month and total
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TxtModelStats)</returns>
        System.Threading.Tasks.Task<ApiResponse<TxtModelStats>> GetTextHordeStatsModelsWithHttpInfoAsync(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Details how many texts have been generated in the past minux,hour,day,month and total
        /// </summary>
        /// <remarks>
        /// Also shows the amount of pixelsteps for the same timeframe.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatsTxtTotals</returns>
        System.Threading.Tasks.Task<StatsTxtTotals> GetTextHordeStatsTotalsAsync(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Details how many texts have been generated in the past minux,hour,day,month and total
        /// </summary>
        /// <remarks>
        /// Also shows the amount of pixelsteps for the same timeframe.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatsTxtTotals)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatsTxtTotals>> GetTextHordeStatsTotalsWithHttpInfoAsync(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Details and statistics about a specific user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apikey">The Admin, Mod or Owner API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserDetails</returns>
        System.Threading.Tasks.Task<UserDetails> GetUserSingleAsync(string userId, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Details and statistics about a specific user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apikey">The Admin, Mod or Owner API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserDetails>> GetUserSingleWithHttpInfoAsync(string userId, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// A List with the details and statistic of all registered users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="page">Which page of results to return. Each page has 25 users. (optional, default to 1)</param>
        /// <param name="sort">How to sort the returned list. (optional, default to &quot;kudos&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserDetails</returns>
        System.Threading.Tasks.Task<UserDetails> GetUsersAsync(string clientAgent = default(string), int? page = default(int?), string sort = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// A List with the details and statistic of all registered users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="page">Which page of results to return. Each page has 25 users. (optional, default to 1)</param>
        /// <param name="sort">How to sort the returned list. (optional, default to &quot;kudos&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserDetails>> GetUsersWithHttpInfoAsync(string clientAgent = default(string), int? page = default(int?), string sort = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Details of a registered worker
        /// </summary>
        /// <remarks>
        /// Can retrieve the details of a worker even if inactive (A worker is considered inactive if it has not checked in for 5 minutes)
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkerDetails</returns>
        System.Threading.Tasks.Task<WorkerDetails> GetWorkerSingleAsync(string workerId, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Details of a registered worker
        /// </summary>
        /// <remarks>
        /// Can retrieve the details of a worker even if inactive (A worker is considered inactive if it has not checked in for 5 minutes)
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkerDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkerDetails>> GetWorkerSingleWithHttpInfoAsync(string workerId, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// A List with the details of all registered and active workers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A Moderator API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="type">Filter the workers by type (image, text or interrogation). (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WorkerDetails&gt;</returns>
        System.Threading.Tasks.Task<List<WorkerDetails>> GetWorkersAsync(string apikey = default(string), string clientAgent = default(string), string type = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// A List with the details of all registered and active workers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A Moderator API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="type">Filter the workers by type (image, text or interrogation). (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WorkerDetails&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WorkerDetails>>> GetWorkersWithHttpInfoAsync(string apikey = default(string), string clientAgent = default(string), string type = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Moderator Only: Modify an existing regex filter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FilterDetails</returns>
        System.Threading.Tasks.Task<FilterDetails> PatchFilterSingleAsync(string filterId, string apikey, PatchExistingFilter payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Moderator Only: Modify an existing regex filter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FilterDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<FilterDetails>> PatchFilterSingleWithHttpInfoAsync(string filterId, string apikey, PatchExistingFilter payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Modify an existing Shared Key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedkeyId"></param>
        /// <param name="apikey">User API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SharedKeyDetails</returns>
        System.Threading.Tasks.Task<SharedKeyDetails> PatchSharedKeySingleAsync(string sharedkeyId, string apikey, SharedKeyInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Modify an existing Shared Key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedkeyId"></param>
        /// <param name="apikey">User API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SharedKeyDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<SharedKeyDetails>> PatchSharedKeySingleWithHttpInfoAsync(string sharedkeyId, string apikey, SharedKeyInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a Team&#39;s information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="payload"></param>
        /// <param name="apikey">The Moderator or Creator API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifyTeam</returns>
        System.Threading.Tasks.Task<ModifyTeam> PatchTeamSingleAsync(string teamId, ModifyTeamInput payload, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a Team&#39;s information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="payload"></param>
        /// <param name="apikey">The Moderator or Creator API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifyTeam)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModifyTeam>> PatchTeamSingleWithHttpInfoAsync(string teamId, ModifyTeamInput payload, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Submit aesthetic ratings for generated images to be used by LAION and Stability
        /// </summary>
        /// <remarks>
        /// AI The request has to have been sent as shared: true. You can select the best image in the set, and/or provide a rating for each or some images in the set. If you select best-of image, you will gain 4 kudos. Each rating is 5 kudos. Best-of will be ignored when ratings conflict with it. You can never gain more kudos than you spent for this generation. Your reward at max will be your kudos consumption - 1.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerationSubmitted</returns>
        System.Threading.Tasks.Task<GenerationSubmitted> PostAestheticsAsync(string id, AestheticsPayload payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Submit aesthetic ratings for generated images to be used by LAION and Stability
        /// </summary>
        /// <remarks>
        /// AI The request has to have been sent as shared: true. You can select the best image in the set, and/or provide a rating for each or some images in the set. If you select best-of image, you will gain 4 kudos. Each rating is 5 kudos. Best-of will be ignored when ratings conflict with it. You can never gain more kudos than you spent for this generation. Your reward at max will be your kudos consumption - 1.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerationSubmitted)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenerationSubmitted>> PostAestheticsWithHttpInfoAsync(string id, AestheticsPayload payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Awards Kudos to registed user
        /// </summary>
        /// <remarks>
        /// This API can only be used through privileged access.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The sending user&#39;s API key.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KudosAwarded</returns>
        System.Threading.Tasks.Task<KudosAwarded> PostAwardKudosAsync(string apikey, PostAwardKudosRequest payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Awards Kudos to registed user
        /// </summary>
        /// <remarks>
        /// This API can only be used through privileged access.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The sending user&#39;s API key.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KudosAwarded)</returns>
        System.Threading.Tasks.Task<ApiResponse<KudosAwarded>> PostAwardKudosWithHttpInfoAsync(string apikey, PostAwardKudosRequest payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Moderator Only: Check The suspicion of the provided prompt
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FilterPromptSuspicion</returns>
        System.Threading.Tasks.Task<FilterPromptSuspicion> PostFiltersAsync(string apikey, PostFiltersRequest payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Moderator Only: Check The suspicion of the provided prompt
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FilterPromptSuspicion)</returns>
        System.Threading.Tasks.Task<ApiResponse<FilterPromptSuspicion>> PostFiltersWithHttpInfoAsync(string apikey, PostFiltersRequest payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Initiate an Asynchronous request to generate images
        /// </summary>
        /// <remarks>
        /// This endpoint will immediately return with the UUID of the request for generation. This endpoint will always be accepted, even if there are no workers available currently to fulfill this request. Perhaps some will appear in the next 10 minutes. Asynchronous requests live for 10 minutes before being considered stale and being deleted.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RequestAsync</returns>
        System.Threading.Tasks.Task<RequestAsync> PostImageAsyncGenerateAsync(string apikey, GenerationInputStable payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Initiate an Asynchronous request to generate images
        /// </summary>
        /// <remarks>
        /// This endpoint will immediately return with the UUID of the request for generation. This endpoint will always be accepted, even if there are no workers available currently to fulfill this request. Perhaps some will appear in the next 10 minutes. Asynchronous requests live for 10 minutes before being considered stale and being deleted.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RequestAsync)</returns>
        System.Threading.Tasks.Task<ApiResponse<RequestAsync>> PostImageAsyncGenerateWithHttpInfoAsync(string apikey, GenerationInputStable payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Check if there are generation requests queued for fulfillment
        /// </summary>
        /// <remarks>
        /// This endpoint is used by registered workers only
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerationPayloadStable</returns>
        System.Threading.Tasks.Task<GenerationPayloadStable> PostImageJobPopAsync(string apikey, PopInputStable payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check if there are generation requests queued for fulfillment
        /// </summary>
        /// <remarks>
        /// This endpoint is used by registered workers only
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerationPayloadStable)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenerationPayloadStable>> PostImageJobPopWithHttpInfoAsync(string apikey, PopInputStable payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Submit a generated image
        /// </summary>
        /// <remarks>
        /// This endpoint is used by registered workers only
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The worker&#39;s owner API key.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerationSubmitted</returns>
        System.Threading.Tasks.Task<GenerationSubmitted> PostImageJobSubmitAsync(string apikey, SubmitInputStable payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Submit a generated image
        /// </summary>
        /// <remarks>
        /// This endpoint is used by registered workers only
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The worker&#39;s owner API key.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerationSubmitted)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenerationSubmitted>> PostImageJobSubmitWithHttpInfoAsync(string apikey, SubmitInputStable payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Initiate an Asynchronous request to interrogate an image
        /// </summary>
        /// <remarks>
        /// This endpoint will immediately return with the UUID of the request for interrogation. This endpoint will always be accepted, even if there are no workers available currently to fulfill this request. Perhaps some will appear in the next 20 minutes. Asynchronous requests live for 20 minutes before being considered stale and being deleted.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A User API key</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RequestInterrogationResponse</returns>
        System.Threading.Tasks.Task<RequestInterrogationResponse> PostInterrogateAsync(string apikey, ModelInterrogationInputStable payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Initiate an Asynchronous request to interrogate an image
        /// </summary>
        /// <remarks>
        /// This endpoint will immediately return with the UUID of the request for interrogation. This endpoint will always be accepted, even if there are no workers available currently to fulfill this request. Perhaps some will appear in the next 20 minutes. Asynchronous requests live for 20 minutes before being considered stale and being deleted.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A User API key</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RequestInterrogationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RequestInterrogationResponse>> PostInterrogateWithHttpInfoAsync(string apikey, ModelInterrogationInputStable payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Check if there are interrogation requests queued for fulfillment
        /// </summary>
        /// <remarks>
        /// This endpoint is used by registered workers only
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterrogationPopPayload</returns>
        System.Threading.Tasks.Task<InterrogationPopPayload> PostInterrogatePopAsync(string apikey, InterrogationPopInput payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check if there are interrogation requests queued for fulfillment
        /// </summary>
        /// <remarks>
        /// This endpoint is used by registered workers only
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterrogationPopPayload)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterrogationPopPayload>> PostInterrogatePopWithHttpInfoAsync(string apikey, InterrogationPopInput payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Submit the results of an interrogated image
        /// </summary>
        /// <remarks>
        /// This endpoint is used by registered workers only
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The worker&#39;s owner API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerationSubmitted</returns>
        System.Threading.Tasks.Task<GenerationSubmitted> PostInterrogateSubmitAsync(string apikey, PostInterrogateSubmitRequest payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Submit the results of an interrogated image
        /// </summary>
        /// <remarks>
        /// This endpoint is used by registered workers only
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The worker&#39;s owner API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerationSubmitted)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenerationSubmitted>> PostInterrogateSubmitWithHttpInfoAsync(string apikey, PostInterrogateSubmitRequest payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add an IP or CIDR to timeout
        /// </summary>
        /// <remarks>
        /// Only usable by horde moderators
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SimpleResponse</returns>
        System.Threading.Tasks.Task<SimpleResponse> PostOperationsIpAsync(string apikey, AddTimeoutIPInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add an IP or CIDR to timeout
        /// </summary>
        /// <remarks>
        /// Only usable by horde moderators
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SimpleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimpleResponse>> PostOperationsIpWithHttpInfoAsync(string apikey, AddTimeoutIPInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new team
        /// </summary>
        /// <remarks>
        /// Only trusted users can create new teams.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A User API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifyTeam</returns>
        System.Threading.Tasks.Task<ModifyTeam> PostTeamsAsync(string apikey, CreateTeamInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new team
        /// </summary>
        /// <remarks>
        /// Only trusted users can create new teams.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A User API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifyTeam)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModifyTeam>> PostTeamsWithHttpInfoAsync(string apikey, CreateTeamInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Initiate an Asynchronous request to generate text
        /// </summary>
        /// <remarks>
        /// This endpoint will immediately return with the UUID of the request for generation. This endpoint will always be accepted, even if there are no workers available currently to fulfill this request. Perhaps some will appear in the next 20 minutes. Asynchronous requests live for 20 minutes before being considered stale and being deleted.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RequestAsync</returns>
        System.Threading.Tasks.Task<RequestAsync> PostTextAsyncGenerateAsync(string apikey, GenerationInputKobold payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Initiate an Asynchronous request to generate text
        /// </summary>
        /// <remarks>
        /// This endpoint will immediately return with the UUID of the request for generation. This endpoint will always be accepted, even if there are no workers available currently to fulfill this request. Perhaps some will appear in the next 20 minutes. Asynchronous requests live for 20 minutes before being considered stale and being deleted.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RequestAsync)</returns>
        System.Threading.Tasks.Task<ApiResponse<RequestAsync>> PostTextAsyncGenerateWithHttpInfoAsync(string apikey, GenerationInputKobold payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Check if there are generation requests queued for fulfillment
        /// </summary>
        /// <remarks>
        /// This endpoint is used by registered workers only
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerationPayload</returns>
        System.Threading.Tasks.Task<GenerationPayload> PostTextJobPopAsync(string apikey, PopInputKobold payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check if there are generation requests queued for fulfillment
        /// </summary>
        /// <remarks>
        /// This endpoint is used by registered workers only
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerationPayload)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenerationPayload>> PostTextJobPopWithHttpInfoAsync(string apikey, PopInputKobold payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Submit generated text
        /// </summary>
        /// <remarks>
        /// This endpoint is used by registered workers only
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The worker&#39;s owner API key.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerationSubmitted</returns>
        System.Threading.Tasks.Task<GenerationSubmitted> PostTextJobSubmitAsync(string apikey, SubmitInputKobold payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Submit generated text
        /// </summary>
        /// <remarks>
        /// This endpoint is used by registered workers only
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The worker&#39;s owner API key.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerationSubmitted)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenerationSubmitted>> PostTextJobSubmitWithHttpInfoAsync(string apikey, SubmitInputKobold payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Transfer Kudos to another registed user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The sending user&#39;s API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KudosTransferred</returns>
        System.Threading.Tasks.Task<KudosTransferred> PostTransferKudosAsync(string apikey, PostAwardKudosRequest payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Transfer Kudos to another registed user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The sending user&#39;s API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KudosTransferred)</returns>
        System.Threading.Tasks.Task<ApiResponse<KudosTransferred>> PostTransferKudosWithHttpInfoAsync(string apikey, PostAwardKudosRequest payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Moderator Only: Add a new regex filter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FilterDetails</returns>
        System.Threading.Tasks.Task<FilterDetails> PutFiltersAsync(string apikey, PutNewFilter payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Moderator Only: Add a new regex filter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FilterDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<FilterDetails>> PutFiltersWithHttpInfoAsync(string apikey, PutNewFilter payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Change Horde Modes
        /// </summary>
        /// <remarks>
        /// Endpoint for admins to (un)set the horde into maintenance, invite_only or raid modes.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The Admin API key.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HordeModes</returns>
        System.Threading.Tasks.Task<HordeModes> PutHordeModesAsync(string apikey, PutHordeModesRequest payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Change Horde Modes
        /// </summary>
        /// <remarks>
        /// Endpoint for admins to (un)set the horde into maintenance, invite_only or raid modes.
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The Admin API key.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HordeModes)</returns>
        System.Threading.Tasks.Task<ApiResponse<HordeModes>> PutHordeModesWithHttpInfoAsync(string apikey, PutHordeModesRequest payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Block worker&#39;s from a specific IP for 24 hours
        /// </summary>
        /// <remarks>
        /// Only usable by horde moderators
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SimpleResponse</returns>
        System.Threading.Tasks.Task<SimpleResponse> PutOperationsBlockWorkerIpAsync(string workerId, string apikey, AddWorkerTimeout payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Block worker&#39;s from a specific IP for 24 hours
        /// </summary>
        /// <remarks>
        /// Only usable by horde moderators
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SimpleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimpleResponse>> PutOperationsBlockWorkerIpWithHttpInfoAsync(string workerId, string apikey, AddWorkerTimeout payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new SharedKey for this user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">User API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SharedKeyDetails</returns>
        System.Threading.Tasks.Task<SharedKeyDetails> PutSharedKeyAsync(string apikey, SharedKeyInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new SharedKey for this user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">User API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SharedKeyDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<SharedKeyDetails>> PutSharedKeyWithHttpInfoAsync(string apikey, SharedKeyInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Endpoint for horde admins to perform operations on users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apikey">The Admin API .</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifyUser</returns>
        System.Threading.Tasks.Task<ModifyUser> PutUserSingleAsync(string userId, string apikey, ModifyUserInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Endpoint for horde admins to perform operations on users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apikey">The Admin API .</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifyUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModifyUser>> PutUserSingleWithHttpInfoAsync(string userId, string apikey, ModifyUserInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifyWorker</returns>
        System.Threading.Tasks.Task<ModifyWorker> PutWorkerSingleAsync(string workerId, string apikey, ModifyWorkerInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifyWorker)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModifyWorker>> PutWorkerSingleWithHttpInfoAsync(string workerId, string apikey, ModifyWorkerInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IV2Api : IV2ApiSync, IV2ApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class V2Api : IV2Api
    {
        private Knedlex.StableHorde.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="V2Api"/> class.
        /// </summary>
        /// <returns></returns>
        public V2Api() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="V2Api"/> class.
        /// </summary>
        /// <returns></returns>
        public V2Api(string basePath)
        {
            this.Configuration = Knedlex.StableHorde.Api.Client.Configuration.MergeConfigurations(
                Knedlex.StableHorde.Api.Client.GlobalConfiguration.Instance,
                new Knedlex.StableHorde.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Knedlex.StableHorde.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Knedlex.StableHorde.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Knedlex.StableHorde.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="V2Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public V2Api(Knedlex.StableHorde.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Knedlex.StableHorde.Api.Client.Configuration.MergeConfigurations(
                Knedlex.StableHorde.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Knedlex.StableHorde.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Knedlex.StableHorde.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Knedlex.StableHorde.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="V2Api"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public V2Api(Knedlex.StableHorde.Api.Client.ISynchronousClient client, Knedlex.StableHorde.Api.Client.IAsynchronousClient asyncClient, Knedlex.StableHorde.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Knedlex.StableHorde.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Knedlex.StableHorde.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Knedlex.StableHorde.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Knedlex.StableHorde.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Knedlex.StableHorde.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Moderator Only: Delete a regex filter 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SimpleResponse</returns>
        public SimpleResponse DeleteFilterSingle(string filterId, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<SimpleResponse> localVarResponse = DeleteFilterSingleWithHttpInfo(filterId, apikey, clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Moderator Only: Delete a regex filter 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SimpleResponse</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<SimpleResponse> DeleteFilterSingleWithHttpInfo(string filterId, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'filterId' is set
            if (filterId == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'filterId' when calling V2Api->DeleteFilterSingle");
            }

            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->DeleteFilterSingle");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("filter_id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(filterId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.DeleteFilterSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<SimpleResponse>("/v2/filters/{filter_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFilterSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Moderator Only: Delete a regex filter 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SimpleResponse</returns>
        public async System.Threading.Tasks.Task<SimpleResponse> DeleteFilterSingleAsync(string filterId, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<SimpleResponse> localVarResponse = await DeleteFilterSingleWithHttpInfoAsync(filterId, apikey, clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Moderator Only: Delete a regex filter 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SimpleResponse)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<SimpleResponse>> DeleteFilterSingleWithHttpInfoAsync(string filterId, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'filterId' is set
            if (filterId == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'filterId' when calling V2Api->DeleteFilterSingle");
            }

            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->DeleteFilterSingle");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("filter_id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(filterId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.DeleteFilterSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<SimpleResponse>("/v2/filters/{filter_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFilterSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel an unfinished request This request will include all already generated images in base64 encoded .webp files.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RequestStatusStable</returns>
        public RequestStatusStable DeleteImageAsyncStatus(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<RequestStatusStable> localVarResponse = DeleteImageAsyncStatusWithHttpInfo(id, clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel an unfinished request This request will include all already generated images in base64 encoded .webp files.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RequestStatusStable</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<RequestStatusStable> DeleteImageAsyncStatusWithHttpInfo(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'id' when calling V2Api->DeleteImageAsyncStatus");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.DeleteImageAsyncStatus";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<RequestStatusStable>("/v2/generate/status/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteImageAsyncStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel an unfinished request This request will include all already generated images in base64 encoded .webp files.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RequestStatusStable</returns>
        public async System.Threading.Tasks.Task<RequestStatusStable> DeleteImageAsyncStatusAsync(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<RequestStatusStable> localVarResponse = await DeleteImageAsyncStatusWithHttpInfoAsync(id, clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel an unfinished request This request will include all already generated images in base64 encoded .webp files.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RequestStatusStable)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<RequestStatusStable>> DeleteImageAsyncStatusWithHttpInfoAsync(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'id' when calling V2Api->DeleteImageAsyncStatus");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.DeleteImageAsyncStatus";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<RequestStatusStable>("/v2/generate/status/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteImageAsyncStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel an unfinished interrogation request This request will return all already interrogated image results.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterrogationStatus</returns>
        public InterrogationStatus DeleteInterrogationStatus(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<InterrogationStatus> localVarResponse = DeleteInterrogationStatusWithHttpInfo(id, clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel an unfinished interrogation request This request will return all already interrogated image results.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterrogationStatus</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<InterrogationStatus> DeleteInterrogationStatusWithHttpInfo(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'id' when calling V2Api->DeleteInterrogationStatus");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.DeleteInterrogationStatus";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<InterrogationStatus>("/v2/interrogate/status/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteInterrogationStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel an unfinished interrogation request This request will return all already interrogated image results.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterrogationStatus</returns>
        public async System.Threading.Tasks.Task<InterrogationStatus> DeleteInterrogationStatusAsync(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<InterrogationStatus> localVarResponse = await DeleteInterrogationStatusWithHttpInfoAsync(id, clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel an unfinished interrogation request This request will return all already interrogated image results.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterrogationStatus)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<InterrogationStatus>> DeleteInterrogationStatusWithHttpInfoAsync(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'id' when calling V2Api->DeleteInterrogationStatus");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.DeleteInterrogationStatus";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<InterrogationStatus>("/v2/interrogate/status/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteInterrogationStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a worker&#39;s IP block Only usable by horde moderators
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SimpleResponse</returns>
        public SimpleResponse DeleteOperationsBlockWorkerIp(string workerId, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<SimpleResponse> localVarResponse = DeleteOperationsBlockWorkerIpWithHttpInfo(workerId, apikey, clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a worker&#39;s IP block Only usable by horde moderators
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SimpleResponse</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<SimpleResponse> DeleteOperationsBlockWorkerIpWithHttpInfo(string workerId, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'workerId' is set
            if (workerId == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'workerId' when calling V2Api->DeleteOperationsBlockWorkerIp");
            }

            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->DeleteOperationsBlockWorkerIp");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("worker_id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(workerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.DeleteOperationsBlockWorkerIp";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<SimpleResponse>("/v2/operations/block_worker_ipaddr/{worker_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOperationsBlockWorkerIp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a worker&#39;s IP block Only usable by horde moderators
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SimpleResponse</returns>
        public async System.Threading.Tasks.Task<SimpleResponse> DeleteOperationsBlockWorkerIpAsync(string workerId, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<SimpleResponse> localVarResponse = await DeleteOperationsBlockWorkerIpWithHttpInfoAsync(workerId, apikey, clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a worker&#39;s IP block Only usable by horde moderators
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SimpleResponse)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<SimpleResponse>> DeleteOperationsBlockWorkerIpWithHttpInfoAsync(string workerId, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workerId' is set
            if (workerId == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'workerId' when calling V2Api->DeleteOperationsBlockWorkerIp");
            }

            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->DeleteOperationsBlockWorkerIp");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("worker_id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(workerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.DeleteOperationsBlockWorkerIp";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<SimpleResponse>("/v2/operations/block_worker_ipaddr/{worker_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOperationsBlockWorkerIp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an IP from timeout Only usable by horde moderators
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SimpleResponse</returns>
        public SimpleResponse DeleteOperationsIp(string apikey, DeleteTimeoutIPInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<SimpleResponse> localVarResponse = DeleteOperationsIpWithHttpInfo(apikey, payload, clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove an IP from timeout Only usable by horde moderators
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SimpleResponse</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<SimpleResponse> DeleteOperationsIpWithHttpInfo(string apikey, DeleteTimeoutIPInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->DeleteOperationsIp");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->DeleteOperationsIp");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.DeleteOperationsIp";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<SimpleResponse>("/v2/operations/ipaddr", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOperationsIp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an IP from timeout Only usable by horde moderators
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SimpleResponse</returns>
        public async System.Threading.Tasks.Task<SimpleResponse> DeleteOperationsIpAsync(string apikey, DeleteTimeoutIPInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<SimpleResponse> localVarResponse = await DeleteOperationsIpWithHttpInfoAsync(apikey, payload, clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove an IP from timeout Only usable by horde moderators
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SimpleResponse)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<SimpleResponse>> DeleteOperationsIpWithHttpInfoAsync(string apikey, DeleteTimeoutIPInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->DeleteOperationsIp");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->DeleteOperationsIp");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.DeleteOperationsIp";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<SimpleResponse>("/v2/operations/ipaddr", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOperationsIp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an existing SharedKey for this user 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedkeyId"></param>
        /// <param name="apikey">User API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SimpleResponse</returns>
        public SimpleResponse DeleteSharedKeySingle(string sharedkeyId, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<SimpleResponse> localVarResponse = DeleteSharedKeySingleWithHttpInfo(sharedkeyId, apikey, clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing SharedKey for this user 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedkeyId"></param>
        /// <param name="apikey">User API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SimpleResponse</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<SimpleResponse> DeleteSharedKeySingleWithHttpInfo(string sharedkeyId, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'sharedkeyId' is set
            if (sharedkeyId == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'sharedkeyId' when calling V2Api->DeleteSharedKeySingle");
            }

            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->DeleteSharedKeySingle");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sharedkey_id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(sharedkeyId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.DeleteSharedKeySingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<SimpleResponse>("/v2/sharedkeys/{sharedkey_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSharedKeySingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an existing SharedKey for this user 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedkeyId"></param>
        /// <param name="apikey">User API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SimpleResponse</returns>
        public async System.Threading.Tasks.Task<SimpleResponse> DeleteSharedKeySingleAsync(string sharedkeyId, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<SimpleResponse> localVarResponse = await DeleteSharedKeySingleWithHttpInfoAsync(sharedkeyId, apikey, clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing SharedKey for this user 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedkeyId"></param>
        /// <param name="apikey">User API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SimpleResponse)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<SimpleResponse>> DeleteSharedKeySingleWithHttpInfoAsync(string sharedkeyId, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sharedkeyId' is set
            if (sharedkeyId == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'sharedkeyId' when calling V2Api->DeleteSharedKeySingle");
            }

            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->DeleteSharedKeySingle");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sharedkey_id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(sharedkeyId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.DeleteSharedKeySingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<SimpleResponse>("/v2/sharedkeys/{sharedkey_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSharedKeySingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete the team entry Only the team&#39;s creator or a horde moderator can use this endpoint. This action is unrecoverable!
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="apikey">The Moderator or Owner API key. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeletedTeam</returns>
        public DeletedTeam DeleteTeamSingle(string teamId, string clientAgent = default(string), string apikey = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<DeletedTeam> localVarResponse = DeleteTeamSingleWithHttpInfo(teamId, clientAgent, apikey, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete the team entry Only the team&#39;s creator or a horde moderator can use this endpoint. This action is unrecoverable!
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="apikey">The Moderator or Owner API key. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeletedTeam</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<DeletedTeam> DeleteTeamSingleWithHttpInfo(string teamId, string clientAgent = default(string), string apikey = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'teamId' when calling V2Api->DeleteTeamSingle");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("team_id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (apikey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.DeleteTeamSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeletedTeam>("/v2/teams/{team_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTeamSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete the team entry Only the team&#39;s creator or a horde moderator can use this endpoint. This action is unrecoverable!
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="apikey">The Moderator or Owner API key. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeletedTeam</returns>
        public async System.Threading.Tasks.Task<DeletedTeam> DeleteTeamSingleAsync(string teamId, string clientAgent = default(string), string apikey = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<DeletedTeam> localVarResponse = await DeleteTeamSingleWithHttpInfoAsync(teamId, clientAgent, apikey, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete the team entry Only the team&#39;s creator or a horde moderator can use this endpoint. This action is unrecoverable!
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="apikey">The Moderator or Owner API key. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeletedTeam)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<DeletedTeam>> DeleteTeamSingleWithHttpInfoAsync(string teamId, string clientAgent = default(string), string apikey = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'teamId' when calling V2Api->DeleteTeamSingle");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("team_id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (apikey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.DeleteTeamSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeletedTeam>("/v2/teams/{team_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTeamSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel an unfinished request This request will include all already generated texts.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RequestStatusKobold</returns>
        public RequestStatusKobold DeleteTextAsyncStatus(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<RequestStatusKobold> localVarResponse = DeleteTextAsyncStatusWithHttpInfo(id, clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel an unfinished request This request will include all already generated texts.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RequestStatusKobold</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<RequestStatusKobold> DeleteTextAsyncStatusWithHttpInfo(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'id' when calling V2Api->DeleteTextAsyncStatus");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.DeleteTextAsyncStatus";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<RequestStatusKobold>("/v2/generate/text/status/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTextAsyncStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel an unfinished request This request will include all already generated texts.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RequestStatusKobold</returns>
        public async System.Threading.Tasks.Task<RequestStatusKobold> DeleteTextAsyncStatusAsync(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<RequestStatusKobold> localVarResponse = await DeleteTextAsyncStatusWithHttpInfoAsync(id, clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel an unfinished request This request will include all already generated texts.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RequestStatusKobold)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<RequestStatusKobold>> DeleteTextAsyncStatusWithHttpInfoAsync(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'id' when calling V2Api->DeleteTextAsyncStatus");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.DeleteTextAsyncStatus";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<RequestStatusKobold>("/v2/generate/text/status/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTextAsyncStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete the worker entry This will delete the worker and their statistics. Will not affect the kudos generated by that worker for their owner. Only the worker&#39;s owner and an admin can use this endpoint. This action is unrecoverable!
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeletedWorker</returns>
        public DeletedWorker DeleteWorkerSingle(string workerId, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<DeletedWorker> localVarResponse = DeleteWorkerSingleWithHttpInfo(workerId, apikey, clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete the worker entry This will delete the worker and their statistics. Will not affect the kudos generated by that worker for their owner. Only the worker&#39;s owner and an admin can use this endpoint. This action is unrecoverable!
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeletedWorker</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<DeletedWorker> DeleteWorkerSingleWithHttpInfo(string workerId, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'workerId' is set
            if (workerId == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'workerId' when calling V2Api->DeleteWorkerSingle");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("worker_id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(workerId)); // path parameter
            if (apikey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            }
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.DeleteWorkerSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeletedWorker>("/v2/workers/{worker_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWorkerSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete the worker entry This will delete the worker and their statistics. Will not affect the kudos generated by that worker for their owner. Only the worker&#39;s owner and an admin can use this endpoint. This action is unrecoverable!
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeletedWorker</returns>
        public async System.Threading.Tasks.Task<DeletedWorker> DeleteWorkerSingleAsync(string workerId, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<DeletedWorker> localVarResponse = await DeleteWorkerSingleWithHttpInfoAsync(workerId, apikey, clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete the worker entry This will delete the worker and their statistics. Will not affect the kudos generated by that worker for their owner. Only the worker&#39;s owner and an admin can use this endpoint. This action is unrecoverable!
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeletedWorker)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<DeletedWorker>> DeleteWorkerSingleWithHttpInfoAsync(string workerId, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workerId' is set
            if (workerId == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'workerId' when calling V2Api->DeleteWorkerSingle");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("worker_id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(workerId)); // path parameter
            if (apikey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            }
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.DeleteWorkerSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeletedWorker>("/v2/workers/{worker_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWorkerSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Moderator Only: A List all filters, or filtered by the query 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;FilterRegex&gt;</returns>
        public List<FilterRegex> GetFilterRegex(string apikey, string clientAgent = default(string), int? filterType = default(int?), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<List<FilterRegex>> localVarResponse = GetFilterRegexWithHttpInfo(apikey, clientAgent, filterType, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Moderator Only: A List all filters, or filtered by the query 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;FilterRegex&gt;</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<List<FilterRegex>> GetFilterRegexWithHttpInfo(string apikey, string clientAgent = default(string), int? filterType = default(int?), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->GetFilterRegex");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filterType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToMultiMap("", "filter_type", filterType));
            }
            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetFilterRegex";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<FilterRegex>>("/v2/filters/regex", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFilterRegex", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Moderator Only: A List all filters, or filtered by the query 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FilterRegex&gt;</returns>
        public async System.Threading.Tasks.Task<List<FilterRegex>> GetFilterRegexAsync(string apikey, string clientAgent = default(string), int? filterType = default(int?), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<List<FilterRegex>> localVarResponse = await GetFilterRegexWithHttpInfoAsync(apikey, clientAgent, filterType, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Moderator Only: A List all filters, or filtered by the query 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FilterRegex&gt;)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<List<FilterRegex>>> GetFilterRegexWithHttpInfoAsync(string apikey, string clientAgent = default(string), int? filterType = default(int?), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->GetFilterRegex");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filterType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToMultiMap("", "filter_type", filterType));
            }
            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetFilterRegex";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<FilterRegex>>("/v2/filters/regex", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFilterRegex", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Moderator Only: Display a single filter 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;FilterDetails&gt;</returns>
        public List<FilterDetails> GetFilterSingle(string filterId, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<List<FilterDetails>> localVarResponse = GetFilterSingleWithHttpInfo(filterId, apikey, clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Moderator Only: Display a single filter 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;FilterDetails&gt;</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<List<FilterDetails>> GetFilterSingleWithHttpInfo(string filterId, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'filterId' is set
            if (filterId == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'filterId' when calling V2Api->GetFilterSingle");
            }

            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->GetFilterSingle");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("filter_id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(filterId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetFilterSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<FilterDetails>>("/v2/filters/{filter_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFilterSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Moderator Only: Display a single filter 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FilterDetails&gt;</returns>
        public async System.Threading.Tasks.Task<List<FilterDetails>> GetFilterSingleAsync(string filterId, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<List<FilterDetails>> localVarResponse = await GetFilterSingleWithHttpInfoAsync(filterId, apikey, clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Moderator Only: Display a single filter 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FilterDetails&gt;)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<List<FilterDetails>>> GetFilterSingleWithHttpInfoAsync(string filterId, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'filterId' is set
            if (filterId == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'filterId' when calling V2Api->GetFilterSingle");
            }

            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->GetFilterSingle");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("filter_id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(filterId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetFilterSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<FilterDetails>>("/v2/filters/{filter_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFilterSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Moderator Only: A List all filters, or filtered by the query 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="contains">Only return filter containing this word. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;FilterDetails&gt;</returns>
        public List<FilterDetails> GetFilters(string apikey, string clientAgent = default(string), int? filterType = default(int?), string contains = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<List<FilterDetails>> localVarResponse = GetFiltersWithHttpInfo(apikey, clientAgent, filterType, contains, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Moderator Only: A List all filters, or filtered by the query 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="contains">Only return filter containing this word. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;FilterDetails&gt;</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<List<FilterDetails>> GetFiltersWithHttpInfo(string apikey, string clientAgent = default(string), int? filterType = default(int?), string contains = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->GetFilters");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filterType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToMultiMap("", "filter_type", filterType));
            }
            if (contains != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToMultiMap("", "contains", contains));
            }
            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetFilters";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<FilterDetails>>("/v2/filters", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFilters", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Moderator Only: A List all filters, or filtered by the query 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="contains">Only return filter containing this word. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FilterDetails&gt;</returns>
        public async System.Threading.Tasks.Task<List<FilterDetails>> GetFiltersAsync(string apikey, string clientAgent = default(string), int? filterType = default(int?), string contains = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<List<FilterDetails>> localVarResponse = await GetFiltersWithHttpInfoAsync(apikey, clientAgent, filterType, contains, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Moderator Only: A List all filters, or filtered by the query 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="filterType">The filter type. (optional)</param>
        /// <param name="contains">Only return filter containing this word. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FilterDetails&gt;)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<List<FilterDetails>>> GetFiltersWithHttpInfoAsync(string apikey, string clientAgent = default(string), int? filterType = default(int?), string contains = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->GetFilters");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filterType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToMultiMap("", "filter_type", filterType));
            }
            if (contains != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToMultiMap("", "contains", contains));
            }
            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetFilters";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<FilterDetails>>("/v2/filters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFilters", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lookup user details based on their API key This can be used to verify a user exists
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">User API key we&#39;re looking for. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserDetails</returns>
        public UserDetails GetFindUser(string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<UserDetails> localVarResponse = GetFindUserWithHttpInfo(apikey, clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lookup user details based on their API key This can be used to verify a user exists
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">User API key we&#39;re looking for. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserDetails</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<UserDetails> GetFindUserWithHttpInfo(string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (apikey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            }
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetFindUser";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<UserDetails>("/v2/find_user", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFindUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lookup user details based on their API key This can be used to verify a user exists
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">User API key we&#39;re looking for. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserDetails</returns>
        public async System.Threading.Tasks.Task<UserDetails> GetFindUserAsync(string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<UserDetails> localVarResponse = await GetFindUserWithHttpInfoAsync(apikey, clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lookup user details based on their API key This can be used to verify a user exists
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">User API key we&#39;re looking for. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserDetails)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<UserDetails>> GetFindUserWithHttpInfoAsync(string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (apikey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            }
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetFindUser";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserDetails>("/v2/find_user", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFindUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// If this loads, this node is available 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetHeartbeat(string clientAgent = default(string), int operationIndex = 0)
        {
            GetHeartbeatWithHttpInfo(clientAgent);
        }

        /// <summary>
        /// If this loads, this node is available 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<Object> GetHeartbeatWithHttpInfo(string clientAgent = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetHeartbeat";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/v2/status/heartbeat", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHeartbeat", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// If this loads, this node is available 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetHeartbeatAsync(string clientAgent = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetHeartbeatWithHttpInfoAsync(clientAgent, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// If this loads, this node is available 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<Object>> GetHeartbeatWithHttpInfoAsync(string clientAgent = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetHeartbeat";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/v2/status/heartbeat", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHeartbeat", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details about the current performance of this Horde 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HordePerformance</returns>
        public HordePerformance GetHordeLoad(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<HordePerformance> localVarResponse = GetHordeLoadWithHttpInfo(clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details about the current performance of this Horde 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HordePerformance</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<HordePerformance> GetHordeLoadWithHttpInfo(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetHordeLoad";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<HordePerformance>("/v2/status/performance", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHordeLoad", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details about the current performance of this Horde 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HordePerformance</returns>
        public async System.Threading.Tasks.Task<HordePerformance> GetHordeLoadAsync(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<HordePerformance> localVarResponse = await GetHordeLoadWithHttpInfoAsync(clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details about the current performance of this Horde 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HordePerformance)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<HordePerformance>> GetHordeLoadWithHttpInfoAsync(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetHordeLoad";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HordePerformance>("/v2/status/performance", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHordeLoad", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Horde Maintenance Mode Status Use this endpoint to quicky determine if this horde is in maintenance, invite_only or raid mode.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The Admin or Owner API key. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HordeModes</returns>
        public HordeModes GetHordeModes(string apikey = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<HordeModes> localVarResponse = GetHordeModesWithHttpInfo(apikey, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Horde Maintenance Mode Status Use this endpoint to quicky determine if this horde is in maintenance, invite_only or raid mode.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The Admin or Owner API key. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HordeModes</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<HordeModes> GetHordeModesWithHttpInfo(string apikey = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (apikey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetHordeModes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<HordeModes>("/v2/status/modes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHordeModes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Horde Maintenance Mode Status Use this endpoint to quicky determine if this horde is in maintenance, invite_only or raid mode.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The Admin or Owner API key. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HordeModes</returns>
        public async System.Threading.Tasks.Task<HordeModes> GetHordeModesAsync(string apikey = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<HordeModes> localVarResponse = await GetHordeModesWithHttpInfoAsync(apikey, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Horde Maintenance Mode Status Use this endpoint to quicky determine if this horde is in maintenance, invite_only or raid mode.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The Admin or Owner API key. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HordeModes)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<HordeModes>> GetHordeModesWithHttpInfoAsync(string apikey = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (apikey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetHordeModes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HordeModes>("/v2/status/modes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHordeModes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read the latest happenings on the horde 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Newspiece&gt;</returns>
        public List<Newspiece> GetHordeNews(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<List<Newspiece>> localVarResponse = GetHordeNewsWithHttpInfo(clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read the latest happenings on the horde 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Newspiece&gt;</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<List<Newspiece>> GetHordeNewsWithHttpInfo(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetHordeNews";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Newspiece>>("/v2/status/news", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHordeNews", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read the latest happenings on the horde 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Newspiece&gt;</returns>
        public async System.Threading.Tasks.Task<List<Newspiece>> GetHordeNewsAsync(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<List<Newspiece>> localVarResponse = await GetHordeNewsWithHttpInfoAsync(clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read the latest happenings on the horde 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Newspiece&gt;)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<List<Newspiece>>> GetHordeNewsWithHttpInfoAsync(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetHordeNews";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Newspiece>>("/v2/status/news", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHordeNews", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the status of an Asynchronous generation request without images Use this request to check the status of a currently running asynchronous request without consuming bandwidth.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RequestStatusCheck</returns>
        public RequestStatusCheck GetImageAsyncCheck(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<RequestStatusCheck> localVarResponse = GetImageAsyncCheckWithHttpInfo(id, clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the status of an Asynchronous generation request without images Use this request to check the status of a currently running asynchronous request without consuming bandwidth.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RequestStatusCheck</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<RequestStatusCheck> GetImageAsyncCheckWithHttpInfo(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'id' when calling V2Api->GetImageAsyncCheck");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetImageAsyncCheck";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<RequestStatusCheck>("/v2/generate/check/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetImageAsyncCheck", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the status of an Asynchronous generation request without images Use this request to check the status of a currently running asynchronous request without consuming bandwidth.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RequestStatusCheck</returns>
        public async System.Threading.Tasks.Task<RequestStatusCheck> GetImageAsyncCheckAsync(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<RequestStatusCheck> localVarResponse = await GetImageAsyncCheckWithHttpInfoAsync(id, clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the status of an Asynchronous generation request without images Use this request to check the status of a currently running asynchronous request without consuming bandwidth.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RequestStatusCheck)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<RequestStatusCheck>> GetImageAsyncCheckWithHttpInfoAsync(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'id' when calling V2Api->GetImageAsyncCheck");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetImageAsyncCheck";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RequestStatusCheck>("/v2/generate/check/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetImageAsyncCheck", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the full status of an Asynchronous generation request This request will include all already generated images in download URL or base64 encoded .webp files. As such, you are requested to not retrieve this endpoint often. Instead use the /check/ endpoint first This endpoint is limited to 10 request per minute
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RequestStatusStable</returns>
        public RequestStatusStable GetImageAsyncStatus(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<RequestStatusStable> localVarResponse = GetImageAsyncStatusWithHttpInfo(id, clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the full status of an Asynchronous generation request This request will include all already generated images in download URL or base64 encoded .webp files. As such, you are requested to not retrieve this endpoint often. Instead use the /check/ endpoint first This endpoint is limited to 10 request per minute
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RequestStatusStable</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<RequestStatusStable> GetImageAsyncStatusWithHttpInfo(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'id' when calling V2Api->GetImageAsyncStatus");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetImageAsyncStatus";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<RequestStatusStable>("/v2/generate/status/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetImageAsyncStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the full status of an Asynchronous generation request This request will include all already generated images in download URL or base64 encoded .webp files. As such, you are requested to not retrieve this endpoint often. Instead use the /check/ endpoint first This endpoint is limited to 10 request per minute
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RequestStatusStable</returns>
        public async System.Threading.Tasks.Task<RequestStatusStable> GetImageAsyncStatusAsync(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<RequestStatusStable> localVarResponse = await GetImageAsyncStatusWithHttpInfoAsync(id, clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the full status of an Asynchronous generation request This request will include all already generated images in download URL or base64 encoded .webp files. As such, you are requested to not retrieve this endpoint often. Instead use the /check/ endpoint first This endpoint is limited to 10 request per minute
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RequestStatusStable)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<RequestStatusStable>> GetImageAsyncStatusWithHttpInfoAsync(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'id' when calling V2Api->GetImageAsyncStatus");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetImageAsyncStatus";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RequestStatusStable>("/v2/generate/status/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetImageAsyncStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details how many images were generated per model for the past day, month and total 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ImgModelStats</returns>
        public ImgModelStats GetImageHordeStatsModels(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<ImgModelStats> localVarResponse = GetImageHordeStatsModelsWithHttpInfo(clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details how many images were generated per model for the past day, month and total 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ImgModelStats</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<ImgModelStats> GetImageHordeStatsModelsWithHttpInfo(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetImageHordeStatsModels";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ImgModelStats>("/v2/stats/img/models", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetImageHordeStatsModels", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details how many images were generated per model for the past day, month and total 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImgModelStats</returns>
        public async System.Threading.Tasks.Task<ImgModelStats> GetImageHordeStatsModelsAsync(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<ImgModelStats> localVarResponse = await GetImageHordeStatsModelsWithHttpInfoAsync(clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details how many images were generated per model for the past day, month and total 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImgModelStats)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<ImgModelStats>> GetImageHordeStatsModelsWithHttpInfoAsync(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetImageHordeStatsModels";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ImgModelStats>("/v2/stats/img/models", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetImageHordeStatsModels", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details how many images have been generated in the past minux,hour,day,month and total Also shows the amount of pixelsteps for the same timeframe.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatsImgTotals</returns>
        public StatsImgTotals GetImageHordeStatsTotals(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<StatsImgTotals> localVarResponse = GetImageHordeStatsTotalsWithHttpInfo(clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details how many images have been generated in the past minux,hour,day,month and total Also shows the amount of pixelsteps for the same timeframe.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatsImgTotals</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<StatsImgTotals> GetImageHordeStatsTotalsWithHttpInfo(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetImageHordeStatsTotals";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<StatsImgTotals>("/v2/stats/img/totals", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetImageHordeStatsTotals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details how many images have been generated in the past minux,hour,day,month and total Also shows the amount of pixelsteps for the same timeframe.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatsImgTotals</returns>
        public async System.Threading.Tasks.Task<StatsImgTotals> GetImageHordeStatsTotalsAsync(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<StatsImgTotals> localVarResponse = await GetImageHordeStatsTotalsWithHttpInfoAsync(clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details how many images have been generated in the past minux,hour,day,month and total Also shows the amount of pixelsteps for the same timeframe.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatsImgTotals)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<StatsImgTotals>> GetImageHordeStatsTotalsWithHttpInfoAsync(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetImageHordeStatsTotals";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<StatsImgTotals>("/v2/stats/img/totals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetImageHordeStatsTotals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the full status of an interrogation request This request will include all already generated images. As such, you are requested to not retrieve this endpoint often. Instead use the /check/ endpoint first
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterrogationStatus</returns>
        public InterrogationStatus GetInterrogationStatus(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<InterrogationStatus> localVarResponse = GetInterrogationStatusWithHttpInfo(id, clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the full status of an interrogation request This request will include all already generated images. As such, you are requested to not retrieve this endpoint often. Instead use the /check/ endpoint first
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterrogationStatus</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<InterrogationStatus> GetInterrogationStatusWithHttpInfo(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'id' when calling V2Api->GetInterrogationStatus");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetInterrogationStatus";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<InterrogationStatus>("/v2/interrogate/status/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInterrogationStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the full status of an interrogation request This request will include all already generated images. As such, you are requested to not retrieve this endpoint often. Instead use the /check/ endpoint first
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterrogationStatus</returns>
        public async System.Threading.Tasks.Task<InterrogationStatus> GetInterrogationStatusAsync(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<InterrogationStatus> localVarResponse = await GetInterrogationStatusWithHttpInfoAsync(id, clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the full status of an interrogation request This request will include all already generated images. As such, you are requested to not retrieve this endpoint often. Instead use the /check/ endpoint first
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterrogationStatus)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<InterrogationStatus>> GetInterrogationStatusWithHttpInfoAsync(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'id' when calling V2Api->GetInterrogationStatus");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetInterrogationStatus";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InterrogationStatus>("/v2/interrogate/status/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInterrogationStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns all the statistics of a specific model in this horde 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelName"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ActiveModel</returns>
        public ActiveModel GetModelSingle(string modelName, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<ActiveModel> localVarResponse = GetModelSingleWithHttpInfo(modelName, clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all the statistics of a specific model in this horde 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelName"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ActiveModel</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<ActiveModel> GetModelSingleWithHttpInfo(string modelName, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'modelName' is set
            if (modelName == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'modelName' when calling V2Api->GetModelSingle");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("model_name", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(modelName)); // path parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetModelSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ActiveModel>("/v2/status/models/{model_name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetModelSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns all the statistics of a specific model in this horde 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelName"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActiveModel</returns>
        public async System.Threading.Tasks.Task<ActiveModel> GetModelSingleAsync(string modelName, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<ActiveModel> localVarResponse = await GetModelSingleWithHttpInfoAsync(modelName, clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all the statistics of a specific model in this horde 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelName"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActiveModel)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<ActiveModel>> GetModelSingleWithHttpInfoAsync(string modelName, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modelName' is set
            if (modelName == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'modelName' when calling V2Api->GetModelSingle");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("model_name", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(modelName)); // path parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetModelSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ActiveModel>("/v2/status/models/{model_name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetModelSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of models active currently in this horde 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="type">Filter the models by type (image or text). (optional, default to &quot;image&quot;)</param>
        /// <param name="minCount">Filter only models that have at least this amount of threads serving. (optional)</param>
        /// <param name="maxCount">Filter the models that have at most this amount of threads serving. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ActiveModel&gt;</returns>
        public List<ActiveModel> GetModels(string clientAgent = default(string), string type = default(string), int? minCount = default(int?), int? maxCount = default(int?), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<List<ActiveModel>> localVarResponse = GetModelsWithHttpInfo(clientAgent, type, minCount, maxCount, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of models active currently in this horde 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="type">Filter the models by type (image or text). (optional, default to &quot;image&quot;)</param>
        /// <param name="minCount">Filter only models that have at least this amount of threads serving. (optional)</param>
        /// <param name="maxCount">Filter the models that have at most this amount of threads serving. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ActiveModel&gt;</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<List<ActiveModel>> GetModelsWithHttpInfo(string clientAgent = default(string), string type = default(string), int? minCount = default(int?), int? maxCount = default(int?), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (minCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToMultiMap("", "min_count", minCount));
            }
            if (maxCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToMultiMap("", "max_count", maxCount));
            }
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetModels";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ActiveModel>>("/v2/status/models", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetModels", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of models active currently in this horde 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="type">Filter the models by type (image or text). (optional, default to &quot;image&quot;)</param>
        /// <param name="minCount">Filter only models that have at least this amount of threads serving. (optional)</param>
        /// <param name="maxCount">Filter the models that have at most this amount of threads serving. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ActiveModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<ActiveModel>> GetModelsAsync(string clientAgent = default(string), string type = default(string), int? minCount = default(int?), int? maxCount = default(int?), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<List<ActiveModel>> localVarResponse = await GetModelsWithHttpInfoAsync(clientAgent, type, minCount, maxCount, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of models active currently in this horde 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="type">Filter the models by type (image or text). (optional, default to &quot;image&quot;)</param>
        /// <param name="minCount">Filter only models that have at least this amount of threads serving. (optional)</param>
        /// <param name="maxCount">Filter the models that have at most this amount of threads serving. (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ActiveModel&gt;)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<List<ActiveModel>>> GetModelsWithHttpInfoAsync(string clientAgent = default(string), string type = default(string), int? minCount = default(int?), int? maxCount = default(int?), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (minCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToMultiMap("", "min_count", minCount));
            }
            if (maxCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToMultiMap("", "max_count", maxCount));
            }
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetModels";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ActiveModel>>("/v2/status/models", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetModels", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return all existing IP Block timeouts 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;IPTimeout&gt;</returns>
        public List<IPTimeout> GetOperationsIp(string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<List<IPTimeout>> localVarResponse = GetOperationsIpWithHttpInfo(apikey, clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return all existing IP Block timeouts 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;IPTimeout&gt;</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<List<IPTimeout>> GetOperationsIpWithHttpInfo(string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->GetOperationsIp");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetOperationsIp";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<IPTimeout>>("/v2/operations/ipaddr", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOperationsIp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return all existing IP Block timeouts 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;IPTimeout&gt;</returns>
        public async System.Threading.Tasks.Task<List<IPTimeout>> GetOperationsIpAsync(string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<List<IPTimeout>> localVarResponse = await GetOperationsIpWithHttpInfoAsync(apikey, clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return all existing IP Block timeouts 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;IPTimeout&gt;)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<List<IPTimeout>>> GetOperationsIpWithHttpInfoAsync(string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->GetOperationsIp");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetOperationsIp";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<IPTimeout>>("/v2/operations/ipaddr", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOperationsIp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if an IP or CIDR is in timeout 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ipaddr"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;IPTimeout&gt;</returns>
        public List<IPTimeout> GetOperationsIpSingle(string ipaddr, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<List<IPTimeout>> localVarResponse = GetOperationsIpSingleWithHttpInfo(ipaddr, apikey, clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check if an IP or CIDR is in timeout 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ipaddr"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;IPTimeout&gt;</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<List<IPTimeout>> GetOperationsIpSingleWithHttpInfo(string ipaddr, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'ipaddr' is set
            if (ipaddr == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'ipaddr' when calling V2Api->GetOperationsIpSingle");
            }

            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->GetOperationsIpSingle");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ipaddr", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(ipaddr)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetOperationsIpSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<IPTimeout>>("/v2/operations/ipaddr/{ipaddr}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOperationsIpSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if an IP or CIDR is in timeout 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ipaddr"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;IPTimeout&gt;</returns>
        public async System.Threading.Tasks.Task<List<IPTimeout>> GetOperationsIpSingleAsync(string ipaddr, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<List<IPTimeout>> localVarResponse = await GetOperationsIpSingleWithHttpInfoAsync(ipaddr, apikey, clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check if an IP or CIDR is in timeout 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ipaddr"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;IPTimeout&gt;)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<List<IPTimeout>>> GetOperationsIpSingleWithHttpInfoAsync(string ipaddr, string apikey, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ipaddr' is set
            if (ipaddr == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'ipaddr' when calling V2Api->GetOperationsIpSingle");
            }

            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->GetOperationsIpSingle");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ipaddr", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(ipaddr)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetOperationsIpSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<IPTimeout>>("/v2/operations/ipaddr/{ipaddr}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOperationsIpSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details about an existing Shared Key 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedkeyId"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SharedKeyDetails</returns>
        public SharedKeyDetails GetSharedKeySingle(string sharedkeyId, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<SharedKeyDetails> localVarResponse = GetSharedKeySingleWithHttpInfo(sharedkeyId, clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details about an existing Shared Key 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedkeyId"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SharedKeyDetails</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<SharedKeyDetails> GetSharedKeySingleWithHttpInfo(string sharedkeyId, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'sharedkeyId' is set
            if (sharedkeyId == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'sharedkeyId' when calling V2Api->GetSharedKeySingle");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sharedkey_id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(sharedkeyId)); // path parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetSharedKeySingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<SharedKeyDetails>("/v2/sharedkeys/{sharedkey_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSharedKeySingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details about an existing Shared Key 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedkeyId"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SharedKeyDetails</returns>
        public async System.Threading.Tasks.Task<SharedKeyDetails> GetSharedKeySingleAsync(string sharedkeyId, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<SharedKeyDetails> localVarResponse = await GetSharedKeySingleWithHttpInfoAsync(sharedkeyId, clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details about an existing Shared Key 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedkeyId"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SharedKeyDetails)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<SharedKeyDetails>> GetSharedKeySingleWithHttpInfoAsync(string sharedkeyId, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sharedkeyId' is set
            if (sharedkeyId == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'sharedkeyId' when calling V2Api->GetSharedKeySingle");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sharedkey_id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(sharedkeyId)); // path parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetSharedKeySingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SharedKeyDetails>("/v2/sharedkeys/{sharedkey_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSharedKeySingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details of a worker Team 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="apikey">The Moderator or Owner API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TeamDetails</returns>
        public TeamDetails GetTeamSingle(string teamId, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<TeamDetails> localVarResponse = GetTeamSingleWithHttpInfo(teamId, apikey, clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of a worker Team 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="apikey">The Moderator or Owner API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TeamDetails</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<TeamDetails> GetTeamSingleWithHttpInfo(string teamId, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'teamId' when calling V2Api->GetTeamSingle");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("team_id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (apikey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            }
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetTeamSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<TeamDetails>("/v2/teams/{team_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details of a worker Team 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="apikey">The Moderator or Owner API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TeamDetails</returns>
        public async System.Threading.Tasks.Task<TeamDetails> GetTeamSingleAsync(string teamId, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<TeamDetails> localVarResponse = await GetTeamSingleWithHttpInfoAsync(teamId, apikey, clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of a worker Team 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="apikey">The Moderator or Owner API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TeamDetails)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<TeamDetails>> GetTeamSingleWithHttpInfoAsync(string teamId, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'teamId' when calling V2Api->GetTeamSingle");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("team_id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (apikey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            }
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetTeamSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TeamDetails>("/v2/teams/{team_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// A List with the details of all teams 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TeamDetails&gt;</returns>
        public List<TeamDetails> GetTeams(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<List<TeamDetails>> localVarResponse = GetTeamsWithHttpInfo(clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// A List with the details of all teams 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TeamDetails&gt;</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<List<TeamDetails>> GetTeamsWithHttpInfo(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetTeams";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TeamDetails>>("/v2/teams", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeams", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// A List with the details of all teams 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TeamDetails&gt;</returns>
        public async System.Threading.Tasks.Task<List<TeamDetails>> GetTeamsAsync(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<List<TeamDetails>> localVarResponse = await GetTeamsWithHttpInfoAsync(clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// A List with the details of all teams 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TeamDetails&gt;)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<List<TeamDetails>>> GetTeamsWithHttpInfoAsync(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetTeams";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TeamDetails>>("/v2/teams", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeams", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the full status of an Asynchronous generation request This request will include all already generated texts.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RequestStatusKobold</returns>
        public RequestStatusKobold GetTextAsyncStatus(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<RequestStatusKobold> localVarResponse = GetTextAsyncStatusWithHttpInfo(id, clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the full status of an Asynchronous generation request This request will include all already generated texts.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RequestStatusKobold</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<RequestStatusKobold> GetTextAsyncStatusWithHttpInfo(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'id' when calling V2Api->GetTextAsyncStatus");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetTextAsyncStatus";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<RequestStatusKobold>("/v2/generate/text/status/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTextAsyncStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the full status of an Asynchronous generation request This request will include all already generated texts.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RequestStatusKobold</returns>
        public async System.Threading.Tasks.Task<RequestStatusKobold> GetTextAsyncStatusAsync(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<RequestStatusKobold> localVarResponse = await GetTextAsyncStatusWithHttpInfoAsync(id, clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the full status of an Asynchronous generation request This request will include all already generated texts.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RequestStatusKobold)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<RequestStatusKobold>> GetTextAsyncStatusWithHttpInfoAsync(string id, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'id' when calling V2Api->GetTextAsyncStatus");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetTextAsyncStatus";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RequestStatusKobold>("/v2/generate/text/status/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTextAsyncStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details how many texts were generated per model for the past day, month and total 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TxtModelStats</returns>
        public TxtModelStats GetTextHordeStatsModels(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<TxtModelStats> localVarResponse = GetTextHordeStatsModelsWithHttpInfo(clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details how many texts were generated per model for the past day, month and total 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TxtModelStats</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<TxtModelStats> GetTextHordeStatsModelsWithHttpInfo(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetTextHordeStatsModels";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<TxtModelStats>("/v2/stats/text/models", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTextHordeStatsModels", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details how many texts were generated per model for the past day, month and total 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TxtModelStats</returns>
        public async System.Threading.Tasks.Task<TxtModelStats> GetTextHordeStatsModelsAsync(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<TxtModelStats> localVarResponse = await GetTextHordeStatsModelsWithHttpInfoAsync(clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details how many texts were generated per model for the past day, month and total 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TxtModelStats)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<TxtModelStats>> GetTextHordeStatsModelsWithHttpInfoAsync(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetTextHordeStatsModels";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TxtModelStats>("/v2/stats/text/models", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTextHordeStatsModels", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details how many texts have been generated in the past minux,hour,day,month and total Also shows the amount of pixelsteps for the same timeframe.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatsTxtTotals</returns>
        public StatsTxtTotals GetTextHordeStatsTotals(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<StatsTxtTotals> localVarResponse = GetTextHordeStatsTotalsWithHttpInfo(clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details how many texts have been generated in the past minux,hour,day,month and total Also shows the amount of pixelsteps for the same timeframe.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatsTxtTotals</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<StatsTxtTotals> GetTextHordeStatsTotalsWithHttpInfo(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetTextHordeStatsTotals";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<StatsTxtTotals>("/v2/stats/text/totals", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTextHordeStatsTotals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details how many texts have been generated in the past minux,hour,day,month and total Also shows the amount of pixelsteps for the same timeframe.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatsTxtTotals</returns>
        public async System.Threading.Tasks.Task<StatsTxtTotals> GetTextHordeStatsTotalsAsync(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<StatsTxtTotals> localVarResponse = await GetTextHordeStatsTotalsWithHttpInfoAsync(clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details how many texts have been generated in the past minux,hour,day,month and total Also shows the amount of pixelsteps for the same timeframe.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatsTxtTotals)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<StatsTxtTotals>> GetTextHordeStatsTotalsWithHttpInfoAsync(string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetTextHordeStatsTotals";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<StatsTxtTotals>("/v2/stats/text/totals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTextHordeStatsTotals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details and statistics about a specific user 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apikey">The Admin, Mod or Owner API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserDetails</returns>
        public UserDetails GetUserSingle(string userId, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<UserDetails> localVarResponse = GetUserSingleWithHttpInfo(userId, apikey, clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details and statistics about a specific user 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apikey">The Admin, Mod or Owner API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserDetails</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<UserDetails> GetUserSingleWithHttpInfo(string userId, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'userId' when calling V2Api->GetUserSingle");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (apikey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            }
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetUserSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<UserDetails>("/v2/users/{user_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details and statistics about a specific user 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apikey">The Admin, Mod or Owner API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserDetails</returns>
        public async System.Threading.Tasks.Task<UserDetails> GetUserSingleAsync(string userId, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<UserDetails> localVarResponse = await GetUserSingleWithHttpInfoAsync(userId, apikey, clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details and statistics about a specific user 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apikey">The Admin, Mod or Owner API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserDetails)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<UserDetails>> GetUserSingleWithHttpInfoAsync(string userId, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'userId' when calling V2Api->GetUserSingle");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (apikey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            }
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetUserSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserDetails>("/v2/users/{user_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// A List with the details and statistic of all registered users 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="page">Which page of results to return. Each page has 25 users. (optional, default to 1)</param>
        /// <param name="sort">How to sort the returned list. (optional, default to &quot;kudos&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserDetails</returns>
        public UserDetails GetUsers(string clientAgent = default(string), int? page = default(int?), string sort = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<UserDetails> localVarResponse = GetUsersWithHttpInfo(clientAgent, page, sort, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// A List with the details and statistic of all registered users 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="page">Which page of results to return. Each page has 25 users. (optional, default to 1)</param>
        /// <param name="sort">How to sort the returned list. (optional, default to &quot;kudos&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserDetails</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<UserDetails> GetUsersWithHttpInfo(string clientAgent = default(string), int? page = default(int?), string sort = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetUsers";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<UserDetails>("/v2/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// A List with the details and statistic of all registered users 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="page">Which page of results to return. Each page has 25 users. (optional, default to 1)</param>
        /// <param name="sort">How to sort the returned list. (optional, default to &quot;kudos&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserDetails</returns>
        public async System.Threading.Tasks.Task<UserDetails> GetUsersAsync(string clientAgent = default(string), int? page = default(int?), string sort = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<UserDetails> localVarResponse = await GetUsersWithHttpInfoAsync(clientAgent, page, sort, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// A List with the details and statistic of all registered users 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="page">Which page of results to return. Each page has 25 users. (optional, default to 1)</param>
        /// <param name="sort">How to sort the returned list. (optional, default to &quot;kudos&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserDetails)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<UserDetails>> GetUsersWithHttpInfoAsync(string clientAgent = default(string), int? page = default(int?), string sort = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetUsers";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserDetails>("/v2/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details of a registered worker Can retrieve the details of a worker even if inactive (A worker is considered inactive if it has not checked in for 5 minutes)
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WorkerDetails</returns>
        public WorkerDetails GetWorkerSingle(string workerId, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<WorkerDetails> localVarResponse = GetWorkerSingleWithHttpInfo(workerId, apikey, clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of a registered worker Can retrieve the details of a worker even if inactive (A worker is considered inactive if it has not checked in for 5 minutes)
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WorkerDetails</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<WorkerDetails> GetWorkerSingleWithHttpInfo(string workerId, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'workerId' is set
            if (workerId == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'workerId' when calling V2Api->GetWorkerSingle");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("worker_id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(workerId)); // path parameter
            if (apikey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            }
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetWorkerSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<WorkerDetails>("/v2/workers/{worker_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkerSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details of a registered worker Can retrieve the details of a worker even if inactive (A worker is considered inactive if it has not checked in for 5 minutes)
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkerDetails</returns>
        public async System.Threading.Tasks.Task<WorkerDetails> GetWorkerSingleAsync(string workerId, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<WorkerDetails> localVarResponse = await GetWorkerSingleWithHttpInfoAsync(workerId, apikey, clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of a registered worker Can retrieve the details of a worker even if inactive (A worker is considered inactive if it has not checked in for 5 minutes)
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkerDetails)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<WorkerDetails>> GetWorkerSingleWithHttpInfoAsync(string workerId, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workerId' is set
            if (workerId == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'workerId' when calling V2Api->GetWorkerSingle");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("worker_id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(workerId)); // path parameter
            if (apikey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            }
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetWorkerSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<WorkerDetails>("/v2/workers/{worker_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkerSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// A List with the details of all registered and active workers 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A Moderator API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="type">Filter the workers by type (image, text or interrogation). (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;WorkerDetails&gt;</returns>
        public List<WorkerDetails> GetWorkers(string apikey = default(string), string clientAgent = default(string), string type = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<List<WorkerDetails>> localVarResponse = GetWorkersWithHttpInfo(apikey, clientAgent, type, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// A List with the details of all registered and active workers 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A Moderator API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="type">Filter the workers by type (image, text or interrogation). (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;WorkerDetails&gt;</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<List<WorkerDetails>> GetWorkersWithHttpInfo(string apikey = default(string), string clientAgent = default(string), string type = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (apikey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            }
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetWorkers";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<WorkerDetails>>("/v2/workers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// A List with the details of all registered and active workers 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A Moderator API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="type">Filter the workers by type (image, text or interrogation). (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WorkerDetails&gt;</returns>
        public async System.Threading.Tasks.Task<List<WorkerDetails>> GetWorkersAsync(string apikey = default(string), string clientAgent = default(string), string type = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<List<WorkerDetails>> localVarResponse = await GetWorkersWithHttpInfoAsync(apikey, clientAgent, type, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// A List with the details of all registered and active workers 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A Moderator API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="type">Filter the workers by type (image, text or interrogation). (optional)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WorkerDetails&gt;)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<List<WorkerDetails>>> GetWorkersWithHttpInfoAsync(string apikey = default(string), string clientAgent = default(string), string type = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (apikey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            }
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }

            localVarRequestOptions.Operation = "V2Api.GetWorkers";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<WorkerDetails>>("/v2/workers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Moderator Only: Modify an existing regex filter 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FilterDetails</returns>
        public FilterDetails PatchFilterSingle(string filterId, string apikey, PatchExistingFilter payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<FilterDetails> localVarResponse = PatchFilterSingleWithHttpInfo(filterId, apikey, payload, clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Moderator Only: Modify an existing regex filter 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FilterDetails</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<FilterDetails> PatchFilterSingleWithHttpInfo(string filterId, string apikey, PatchExistingFilter payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'filterId' is set
            if (filterId == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'filterId' when calling V2Api->PatchFilterSingle");
            }

            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PatchFilterSingle");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PatchFilterSingle");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("filter_id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(filterId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PatchFilterSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<FilterDetails>("/v2/filters/{filter_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchFilterSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Moderator Only: Modify an existing regex filter 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FilterDetails</returns>
        public async System.Threading.Tasks.Task<FilterDetails> PatchFilterSingleAsync(string filterId, string apikey, PatchExistingFilter payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<FilterDetails> localVarResponse = await PatchFilterSingleWithHttpInfoAsync(filterId, apikey, payload, clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Moderator Only: Modify an existing regex filter 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FilterDetails)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<FilterDetails>> PatchFilterSingleWithHttpInfoAsync(string filterId, string apikey, PatchExistingFilter payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'filterId' is set
            if (filterId == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'filterId' when calling V2Api->PatchFilterSingle");
            }

            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PatchFilterSingle");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PatchFilterSingle");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("filter_id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(filterId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PatchFilterSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<FilterDetails>("/v2/filters/{filter_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchFilterSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modify an existing Shared Key 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedkeyId"></param>
        /// <param name="apikey">User API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SharedKeyDetails</returns>
        public SharedKeyDetails PatchSharedKeySingle(string sharedkeyId, string apikey, SharedKeyInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<SharedKeyDetails> localVarResponse = PatchSharedKeySingleWithHttpInfo(sharedkeyId, apikey, payload, clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modify an existing Shared Key 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedkeyId"></param>
        /// <param name="apikey">User API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SharedKeyDetails</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<SharedKeyDetails> PatchSharedKeySingleWithHttpInfo(string sharedkeyId, string apikey, SharedKeyInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'sharedkeyId' is set
            if (sharedkeyId == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'sharedkeyId' when calling V2Api->PatchSharedKeySingle");
            }

            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PatchSharedKeySingle");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PatchSharedKeySingle");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sharedkey_id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(sharedkeyId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PatchSharedKeySingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<SharedKeyDetails>("/v2/sharedkeys/{sharedkey_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchSharedKeySingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modify an existing Shared Key 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedkeyId"></param>
        /// <param name="apikey">User API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SharedKeyDetails</returns>
        public async System.Threading.Tasks.Task<SharedKeyDetails> PatchSharedKeySingleAsync(string sharedkeyId, string apikey, SharedKeyInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<SharedKeyDetails> localVarResponse = await PatchSharedKeySingleWithHttpInfoAsync(sharedkeyId, apikey, payload, clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modify an existing Shared Key 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sharedkeyId"></param>
        /// <param name="apikey">User API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SharedKeyDetails)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<SharedKeyDetails>> PatchSharedKeySingleWithHttpInfoAsync(string sharedkeyId, string apikey, SharedKeyInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sharedkeyId' is set
            if (sharedkeyId == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'sharedkeyId' when calling V2Api->PatchSharedKeySingle");
            }

            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PatchSharedKeySingle");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PatchSharedKeySingle");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sharedkey_id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(sharedkeyId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PatchSharedKeySingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<SharedKeyDetails>("/v2/sharedkeys/{sharedkey_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchSharedKeySingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Team&#39;s information 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="payload"></param>
        /// <param name="apikey">The Moderator or Creator API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModifyTeam</returns>
        public ModifyTeam PatchTeamSingle(string teamId, ModifyTeamInput payload, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<ModifyTeam> localVarResponse = PatchTeamSingleWithHttpInfo(teamId, payload, apikey, clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Team&#39;s information 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="payload"></param>
        /// <param name="apikey">The Moderator or Creator API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModifyTeam</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<ModifyTeam> PatchTeamSingleWithHttpInfo(string teamId, ModifyTeamInput payload, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'teamId' when calling V2Api->PatchTeamSingle");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PatchTeamSingle");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("team_id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (apikey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            }
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PatchTeamSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<ModifyTeam>("/v2/teams/{team_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchTeamSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Team&#39;s information 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="payload"></param>
        /// <param name="apikey">The Moderator or Creator API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifyTeam</returns>
        public async System.Threading.Tasks.Task<ModifyTeam> PatchTeamSingleAsync(string teamId, ModifyTeamInput payload, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<ModifyTeam> localVarResponse = await PatchTeamSingleWithHttpInfoAsync(teamId, payload, apikey, clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Team&#39;s information 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="payload"></param>
        /// <param name="apikey">The Moderator or Creator API key. (optional)</param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifyTeam)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<ModifyTeam>> PatchTeamSingleWithHttpInfoAsync(string teamId, ModifyTeamInput payload, string apikey = default(string), string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'teamId' when calling V2Api->PatchTeamSingle");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PatchTeamSingle");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("team_id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (apikey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            }
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PatchTeamSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ModifyTeam>("/v2/teams/{team_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchTeamSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit aesthetic ratings for generated images to be used by LAION and Stability AI The request has to have been sent as shared: true. You can select the best image in the set, and/or provide a rating for each or some images in the set. If you select best-of image, you will gain 4 kudos. Each rating is 5 kudos. Best-of will be ignored when ratings conflict with it. You can never gain more kudos than you spent for this generation. Your reward at max will be your kudos consumption - 1.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerationSubmitted</returns>
        public GenerationSubmitted PostAesthetics(string id, AestheticsPayload payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<GenerationSubmitted> localVarResponse = PostAestheticsWithHttpInfo(id, payload, clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit aesthetic ratings for generated images to be used by LAION and Stability AI The request has to have been sent as shared: true. You can select the best image in the set, and/or provide a rating for each or some images in the set. If you select best-of image, you will gain 4 kudos. Each rating is 5 kudos. Best-of will be ignored when ratings conflict with it. You can never gain more kudos than you spent for this generation. Your reward at max will be your kudos consumption - 1.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerationSubmitted</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<GenerationSubmitted> PostAestheticsWithHttpInfo(string id, AestheticsPayload payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'id' when calling V2Api->PostAesthetics");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostAesthetics");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostAesthetics";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GenerationSubmitted>("/v2/generate/rate/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAesthetics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit aesthetic ratings for generated images to be used by LAION and Stability AI The request has to have been sent as shared: true. You can select the best image in the set, and/or provide a rating for each or some images in the set. If you select best-of image, you will gain 4 kudos. Each rating is 5 kudos. Best-of will be ignored when ratings conflict with it. You can never gain more kudos than you spent for this generation. Your reward at max will be your kudos consumption - 1.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerationSubmitted</returns>
        public async System.Threading.Tasks.Task<GenerationSubmitted> PostAestheticsAsync(string id, AestheticsPayload payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<GenerationSubmitted> localVarResponse = await PostAestheticsWithHttpInfoAsync(id, payload, clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit aesthetic ratings for generated images to be used by LAION and Stability AI The request has to have been sent as shared: true. You can select the best image in the set, and/or provide a rating for each or some images in the set. If you select best-of image, you will gain 4 kudos. Each rating is 5 kudos. Best-of will be ignored when ratings conflict with it. You can never gain more kudos than you spent for this generation. Your reward at max will be your kudos consumption - 1.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerationSubmitted)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<GenerationSubmitted>> PostAestheticsWithHttpInfoAsync(string id, AestheticsPayload payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'id' when calling V2Api->PostAesthetics");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostAesthetics");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostAesthetics";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GenerationSubmitted>("/v2/generate/rate/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAesthetics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Awards Kudos to registed user This API can only be used through privileged access.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The sending user&#39;s API key.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>KudosAwarded</returns>
        public KudosAwarded PostAwardKudos(string apikey, PostAwardKudosRequest payload, string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<KudosAwarded> localVarResponse = PostAwardKudosWithHttpInfo(apikey, payload, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Awards Kudos to registed user This API can only be used through privileged access.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The sending user&#39;s API key.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of KudosAwarded</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<KudosAwarded> PostAwardKudosWithHttpInfo(string apikey, PostAwardKudosRequest payload, string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PostAwardKudos");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostAwardKudos");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostAwardKudos";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<KudosAwarded>("/v2/kudos/award", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAwardKudos", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Awards Kudos to registed user This API can only be used through privileged access.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The sending user&#39;s API key.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KudosAwarded</returns>
        public async System.Threading.Tasks.Task<KudosAwarded> PostAwardKudosAsync(string apikey, PostAwardKudosRequest payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<KudosAwarded> localVarResponse = await PostAwardKudosWithHttpInfoAsync(apikey, payload, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Awards Kudos to registed user This API can only be used through privileged access.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The sending user&#39;s API key.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KudosAwarded)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<KudosAwarded>> PostAwardKudosWithHttpInfoAsync(string apikey, PostAwardKudosRequest payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PostAwardKudos");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostAwardKudos");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostAwardKudos";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<KudosAwarded>("/v2/kudos/award", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAwardKudos", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Moderator Only: Check The suspicion of the provided prompt 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FilterPromptSuspicion</returns>
        public FilterPromptSuspicion PostFilters(string apikey, PostFiltersRequest payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<FilterPromptSuspicion> localVarResponse = PostFiltersWithHttpInfo(apikey, payload, clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Moderator Only: Check The suspicion of the provided prompt 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FilterPromptSuspicion</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<FilterPromptSuspicion> PostFiltersWithHttpInfo(string apikey, PostFiltersRequest payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PostFilters");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostFilters");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostFilters";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FilterPromptSuspicion>("/v2/filters", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostFilters", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Moderator Only: Check The suspicion of the provided prompt 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FilterPromptSuspicion</returns>
        public async System.Threading.Tasks.Task<FilterPromptSuspicion> PostFiltersAsync(string apikey, PostFiltersRequest payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<FilterPromptSuspicion> localVarResponse = await PostFiltersWithHttpInfoAsync(apikey, payload, clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Moderator Only: Check The suspicion of the provided prompt 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FilterPromptSuspicion)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<FilterPromptSuspicion>> PostFiltersWithHttpInfoAsync(string apikey, PostFiltersRequest payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PostFilters");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostFilters");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostFilters";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<FilterPromptSuspicion>("/v2/filters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostFilters", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Initiate an Asynchronous request to generate images This endpoint will immediately return with the UUID of the request for generation. This endpoint will always be accepted, even if there are no workers available currently to fulfill this request. Perhaps some will appear in the next 10 minutes. Asynchronous requests live for 10 minutes before being considered stale and being deleted.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RequestAsync</returns>
        public RequestAsync PostImageAsyncGenerate(string apikey, GenerationInputStable payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<RequestAsync> localVarResponse = PostImageAsyncGenerateWithHttpInfo(apikey, payload, clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Initiate an Asynchronous request to generate images This endpoint will immediately return with the UUID of the request for generation. This endpoint will always be accepted, even if there are no workers available currently to fulfill this request. Perhaps some will appear in the next 10 minutes. Asynchronous requests live for 10 minutes before being considered stale and being deleted.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RequestAsync</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<RequestAsync> PostImageAsyncGenerateWithHttpInfo(string apikey, GenerationInputStable payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PostImageAsyncGenerate");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostImageAsyncGenerate");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostImageAsyncGenerate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RequestAsync>("/v2/generate/async", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostImageAsyncGenerate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Initiate an Asynchronous request to generate images This endpoint will immediately return with the UUID of the request for generation. This endpoint will always be accepted, even if there are no workers available currently to fulfill this request. Perhaps some will appear in the next 10 minutes. Asynchronous requests live for 10 minutes before being considered stale and being deleted.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RequestAsync</returns>
        public async System.Threading.Tasks.Task<RequestAsync> PostImageAsyncGenerateAsync(string apikey, GenerationInputStable payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<RequestAsync> localVarResponse = await PostImageAsyncGenerateWithHttpInfoAsync(apikey, payload, clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Initiate an Asynchronous request to generate images This endpoint will immediately return with the UUID of the request for generation. This endpoint will always be accepted, even if there are no workers available currently to fulfill this request. Perhaps some will appear in the next 10 minutes. Asynchronous requests live for 10 minutes before being considered stale and being deleted.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RequestAsync)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<RequestAsync>> PostImageAsyncGenerateWithHttpInfoAsync(string apikey, GenerationInputStable payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PostImageAsyncGenerate");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostImageAsyncGenerate");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostImageAsyncGenerate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RequestAsync>("/v2/generate/async", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostImageAsyncGenerate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if there are generation requests queued for fulfillment This endpoint is used by registered workers only
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerationPayloadStable</returns>
        public GenerationPayloadStable PostImageJobPop(string apikey, PopInputStable payload, string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<GenerationPayloadStable> localVarResponse = PostImageJobPopWithHttpInfo(apikey, payload, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check if there are generation requests queued for fulfillment This endpoint is used by registered workers only
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerationPayloadStable</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<GenerationPayloadStable> PostImageJobPopWithHttpInfo(string apikey, PopInputStable payload, string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PostImageJobPop");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostImageJobPop");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostImageJobPop";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GenerationPayloadStable>("/v2/generate/pop", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostImageJobPop", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if there are generation requests queued for fulfillment This endpoint is used by registered workers only
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerationPayloadStable</returns>
        public async System.Threading.Tasks.Task<GenerationPayloadStable> PostImageJobPopAsync(string apikey, PopInputStable payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<GenerationPayloadStable> localVarResponse = await PostImageJobPopWithHttpInfoAsync(apikey, payload, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check if there are generation requests queued for fulfillment This endpoint is used by registered workers only
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerationPayloadStable)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<GenerationPayloadStable>> PostImageJobPopWithHttpInfoAsync(string apikey, PopInputStable payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PostImageJobPop");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostImageJobPop");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostImageJobPop";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GenerationPayloadStable>("/v2/generate/pop", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostImageJobPop", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit a generated image This endpoint is used by registered workers only
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The worker&#39;s owner API key.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerationSubmitted</returns>
        public GenerationSubmitted PostImageJobSubmit(string apikey, SubmitInputStable payload, string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<GenerationSubmitted> localVarResponse = PostImageJobSubmitWithHttpInfo(apikey, payload, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit a generated image This endpoint is used by registered workers only
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The worker&#39;s owner API key.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerationSubmitted</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<GenerationSubmitted> PostImageJobSubmitWithHttpInfo(string apikey, SubmitInputStable payload, string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PostImageJobSubmit");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostImageJobSubmit");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostImageJobSubmit";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GenerationSubmitted>("/v2/generate/submit", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostImageJobSubmit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit a generated image This endpoint is used by registered workers only
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The worker&#39;s owner API key.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerationSubmitted</returns>
        public async System.Threading.Tasks.Task<GenerationSubmitted> PostImageJobSubmitAsync(string apikey, SubmitInputStable payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<GenerationSubmitted> localVarResponse = await PostImageJobSubmitWithHttpInfoAsync(apikey, payload, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit a generated image This endpoint is used by registered workers only
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The worker&#39;s owner API key.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerationSubmitted)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<GenerationSubmitted>> PostImageJobSubmitWithHttpInfoAsync(string apikey, SubmitInputStable payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PostImageJobSubmit");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostImageJobSubmit");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostImageJobSubmit";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GenerationSubmitted>("/v2/generate/submit", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostImageJobSubmit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Initiate an Asynchronous request to interrogate an image This endpoint will immediately return with the UUID of the request for interrogation. This endpoint will always be accepted, even if there are no workers available currently to fulfill this request. Perhaps some will appear in the next 20 minutes. Asynchronous requests live for 20 minutes before being considered stale and being deleted.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A User API key</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RequestInterrogationResponse</returns>
        public RequestInterrogationResponse PostInterrogate(string apikey, ModelInterrogationInputStable payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<RequestInterrogationResponse> localVarResponse = PostInterrogateWithHttpInfo(apikey, payload, clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Initiate an Asynchronous request to interrogate an image This endpoint will immediately return with the UUID of the request for interrogation. This endpoint will always be accepted, even if there are no workers available currently to fulfill this request. Perhaps some will appear in the next 20 minutes. Asynchronous requests live for 20 minutes before being considered stale and being deleted.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A User API key</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RequestInterrogationResponse</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<RequestInterrogationResponse> PostInterrogateWithHttpInfo(string apikey, ModelInterrogationInputStable payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PostInterrogate");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostInterrogate");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostInterrogate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RequestInterrogationResponse>("/v2/interrogate/async", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostInterrogate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Initiate an Asynchronous request to interrogate an image This endpoint will immediately return with the UUID of the request for interrogation. This endpoint will always be accepted, even if there are no workers available currently to fulfill this request. Perhaps some will appear in the next 20 minutes. Asynchronous requests live for 20 minutes before being considered stale and being deleted.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A User API key</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RequestInterrogationResponse</returns>
        public async System.Threading.Tasks.Task<RequestInterrogationResponse> PostInterrogateAsync(string apikey, ModelInterrogationInputStable payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<RequestInterrogationResponse> localVarResponse = await PostInterrogateWithHttpInfoAsync(apikey, payload, clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Initiate an Asynchronous request to interrogate an image This endpoint will immediately return with the UUID of the request for interrogation. This endpoint will always be accepted, even if there are no workers available currently to fulfill this request. Perhaps some will appear in the next 20 minutes. Asynchronous requests live for 20 minutes before being considered stale and being deleted.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A User API key</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RequestInterrogationResponse)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<RequestInterrogationResponse>> PostInterrogateWithHttpInfoAsync(string apikey, ModelInterrogationInputStable payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PostInterrogate");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostInterrogate");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostInterrogate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RequestInterrogationResponse>("/v2/interrogate/async", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostInterrogate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if there are interrogation requests queued for fulfillment This endpoint is used by registered workers only
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterrogationPopPayload</returns>
        public InterrogationPopPayload PostInterrogatePop(string apikey, InterrogationPopInput payload, string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<InterrogationPopPayload> localVarResponse = PostInterrogatePopWithHttpInfo(apikey, payload, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check if there are interrogation requests queued for fulfillment This endpoint is used by registered workers only
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterrogationPopPayload</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<InterrogationPopPayload> PostInterrogatePopWithHttpInfo(string apikey, InterrogationPopInput payload, string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PostInterrogatePop");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostInterrogatePop");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostInterrogatePop";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<InterrogationPopPayload>("/v2/interrogate/pop", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostInterrogatePop", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if there are interrogation requests queued for fulfillment This endpoint is used by registered workers only
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterrogationPopPayload</returns>
        public async System.Threading.Tasks.Task<InterrogationPopPayload> PostInterrogatePopAsync(string apikey, InterrogationPopInput payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<InterrogationPopPayload> localVarResponse = await PostInterrogatePopWithHttpInfoAsync(apikey, payload, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check if there are interrogation requests queued for fulfillment This endpoint is used by registered workers only
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterrogationPopPayload)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<InterrogationPopPayload>> PostInterrogatePopWithHttpInfoAsync(string apikey, InterrogationPopInput payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PostInterrogatePop");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostInterrogatePop");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostInterrogatePop";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterrogationPopPayload>("/v2/interrogate/pop", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostInterrogatePop", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit the results of an interrogated image This endpoint is used by registered workers only
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The worker&#39;s owner API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerationSubmitted</returns>
        public GenerationSubmitted PostInterrogateSubmit(string apikey, PostInterrogateSubmitRequest payload, string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<GenerationSubmitted> localVarResponse = PostInterrogateSubmitWithHttpInfo(apikey, payload, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit the results of an interrogated image This endpoint is used by registered workers only
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The worker&#39;s owner API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerationSubmitted</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<GenerationSubmitted> PostInterrogateSubmitWithHttpInfo(string apikey, PostInterrogateSubmitRequest payload, string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PostInterrogateSubmit");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostInterrogateSubmit");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostInterrogateSubmit";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GenerationSubmitted>("/v2/interrogate/submit", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostInterrogateSubmit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit the results of an interrogated image This endpoint is used by registered workers only
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The worker&#39;s owner API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerationSubmitted</returns>
        public async System.Threading.Tasks.Task<GenerationSubmitted> PostInterrogateSubmitAsync(string apikey, PostInterrogateSubmitRequest payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<GenerationSubmitted> localVarResponse = await PostInterrogateSubmitWithHttpInfoAsync(apikey, payload, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit the results of an interrogated image This endpoint is used by registered workers only
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The worker&#39;s owner API key</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerationSubmitted)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<GenerationSubmitted>> PostInterrogateSubmitWithHttpInfoAsync(string apikey, PostInterrogateSubmitRequest payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PostInterrogateSubmit");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostInterrogateSubmit");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostInterrogateSubmit";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GenerationSubmitted>("/v2/interrogate/submit", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostInterrogateSubmit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add an IP or CIDR to timeout Only usable by horde moderators
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SimpleResponse</returns>
        public SimpleResponse PostOperationsIp(string apikey, AddTimeoutIPInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<SimpleResponse> localVarResponse = PostOperationsIpWithHttpInfo(apikey, payload, clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add an IP or CIDR to timeout Only usable by horde moderators
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SimpleResponse</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<SimpleResponse> PostOperationsIpWithHttpInfo(string apikey, AddTimeoutIPInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PostOperationsIp");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostOperationsIp");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostOperationsIp";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SimpleResponse>("/v2/operations/ipaddr", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOperationsIp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add an IP or CIDR to timeout Only usable by horde moderators
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SimpleResponse</returns>
        public async System.Threading.Tasks.Task<SimpleResponse> PostOperationsIpAsync(string apikey, AddTimeoutIPInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<SimpleResponse> localVarResponse = await PostOperationsIpWithHttpInfoAsync(apikey, payload, clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add an IP or CIDR to timeout Only usable by horde moderators
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SimpleResponse)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<SimpleResponse>> PostOperationsIpWithHttpInfoAsync(string apikey, AddTimeoutIPInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PostOperationsIp");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostOperationsIp");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostOperationsIp";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SimpleResponse>("/v2/operations/ipaddr", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOperationsIp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new team Only trusted users can create new teams.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A User API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModifyTeam</returns>
        public ModifyTeam PostTeams(string apikey, CreateTeamInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<ModifyTeam> localVarResponse = PostTeamsWithHttpInfo(apikey, payload, clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new team Only trusted users can create new teams.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A User API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModifyTeam</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<ModifyTeam> PostTeamsWithHttpInfo(string apikey, CreateTeamInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PostTeams");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostTeams");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostTeams";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ModifyTeam>("/v2/teams", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTeams", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new team Only trusted users can create new teams.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A User API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifyTeam</returns>
        public async System.Threading.Tasks.Task<ModifyTeam> PostTeamsAsync(string apikey, CreateTeamInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<ModifyTeam> localVarResponse = await PostTeamsWithHttpInfoAsync(apikey, payload, clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new team Only trusted users can create new teams.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A User API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifyTeam)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<ModifyTeam>> PostTeamsWithHttpInfoAsync(string apikey, CreateTeamInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PostTeams");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostTeams");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostTeams";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModifyTeam>("/v2/teams", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTeams", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Initiate an Asynchronous request to generate text This endpoint will immediately return with the UUID of the request for generation. This endpoint will always be accepted, even if there are no workers available currently to fulfill this request. Perhaps some will appear in the next 20 minutes. Asynchronous requests live for 20 minutes before being considered stale and being deleted.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RequestAsync</returns>
        public RequestAsync PostTextAsyncGenerate(string apikey, GenerationInputKobold payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<RequestAsync> localVarResponse = PostTextAsyncGenerateWithHttpInfo(apikey, payload, clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Initiate an Asynchronous request to generate text This endpoint will immediately return with the UUID of the request for generation. This endpoint will always be accepted, even if there are no workers available currently to fulfill this request. Perhaps some will appear in the next 20 minutes. Asynchronous requests live for 20 minutes before being considered stale and being deleted.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RequestAsync</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<RequestAsync> PostTextAsyncGenerateWithHttpInfo(string apikey, GenerationInputKobold payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PostTextAsyncGenerate");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostTextAsyncGenerate");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostTextAsyncGenerate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RequestAsync>("/v2/generate/text/async", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTextAsyncGenerate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Initiate an Asynchronous request to generate text This endpoint will immediately return with the UUID of the request for generation. This endpoint will always be accepted, even if there are no workers available currently to fulfill this request. Perhaps some will appear in the next 20 minutes. Asynchronous requests live for 20 minutes before being considered stale and being deleted.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RequestAsync</returns>
        public async System.Threading.Tasks.Task<RequestAsync> PostTextAsyncGenerateAsync(string apikey, GenerationInputKobold payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<RequestAsync> localVarResponse = await PostTextAsyncGenerateWithHttpInfoAsync(apikey, payload, clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Initiate an Asynchronous request to generate text This endpoint will immediately return with the UUID of the request for generation. This endpoint will always be accepted, even if there are no workers available currently to fulfill this request. Perhaps some will appear in the next 20 minutes. Asynchronous requests live for 20 minutes before being considered stale and being deleted.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RequestAsync)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<RequestAsync>> PostTextAsyncGenerateWithHttpInfoAsync(string apikey, GenerationInputKobold payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PostTextAsyncGenerate");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostTextAsyncGenerate");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostTextAsyncGenerate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RequestAsync>("/v2/generate/text/async", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTextAsyncGenerate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if there are generation requests queued for fulfillment This endpoint is used by registered workers only
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerationPayload</returns>
        public GenerationPayload PostTextJobPop(string apikey, PopInputKobold payload, string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<GenerationPayload> localVarResponse = PostTextJobPopWithHttpInfo(apikey, payload, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check if there are generation requests queued for fulfillment This endpoint is used by registered workers only
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerationPayload</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<GenerationPayload> PostTextJobPopWithHttpInfo(string apikey, PopInputKobold payload, string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PostTextJobPop");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostTextJobPop");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostTextJobPop";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GenerationPayload>("/v2/generate/text/pop", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTextJobPop", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if there are generation requests queued for fulfillment This endpoint is used by registered workers only
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerationPayload</returns>
        public async System.Threading.Tasks.Task<GenerationPayload> PostTextJobPopAsync(string apikey, PopInputKobold payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<GenerationPayload> localVarResponse = await PostTextJobPopWithHttpInfoAsync(apikey, payload, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check if there are generation requests queued for fulfillment This endpoint is used by registered workers only
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The API Key corresponding to a registered user.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerationPayload)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<GenerationPayload>> PostTextJobPopWithHttpInfoAsync(string apikey, PopInputKobold payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PostTextJobPop");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostTextJobPop");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostTextJobPop";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GenerationPayload>("/v2/generate/text/pop", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTextJobPop", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit generated text This endpoint is used by registered workers only
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The worker&#39;s owner API key.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerationSubmitted</returns>
        public GenerationSubmitted PostTextJobSubmit(string apikey, SubmitInputKobold payload, string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<GenerationSubmitted> localVarResponse = PostTextJobSubmitWithHttpInfo(apikey, payload, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit generated text This endpoint is used by registered workers only
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The worker&#39;s owner API key.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerationSubmitted</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<GenerationSubmitted> PostTextJobSubmitWithHttpInfo(string apikey, SubmitInputKobold payload, string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PostTextJobSubmit");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostTextJobSubmit");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostTextJobSubmit";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GenerationSubmitted>("/v2/generate/text/submit", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTextJobSubmit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit generated text This endpoint is used by registered workers only
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The worker&#39;s owner API key.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerationSubmitted</returns>
        public async System.Threading.Tasks.Task<GenerationSubmitted> PostTextJobSubmitAsync(string apikey, SubmitInputKobold payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<GenerationSubmitted> localVarResponse = await PostTextJobSubmitWithHttpInfoAsync(apikey, payload, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit generated text This endpoint is used by registered workers only
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The worker&#39;s owner API key.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerationSubmitted)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<GenerationSubmitted>> PostTextJobSubmitWithHttpInfoAsync(string apikey, SubmitInputKobold payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PostTextJobSubmit");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostTextJobSubmit");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostTextJobSubmit";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GenerationSubmitted>("/v2/generate/text/submit", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTextJobSubmit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transfer Kudos to another registed user 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The sending user&#39;s API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>KudosTransferred</returns>
        public KudosTransferred PostTransferKudos(string apikey, PostAwardKudosRequest payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<KudosTransferred> localVarResponse = PostTransferKudosWithHttpInfo(apikey, payload, clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer Kudos to another registed user 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The sending user&#39;s API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of KudosTransferred</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<KudosTransferred> PostTransferKudosWithHttpInfo(string apikey, PostAwardKudosRequest payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PostTransferKudos");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostTransferKudos");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostTransferKudos";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<KudosTransferred>("/v2/kudos/transfer", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransferKudos", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transfer Kudos to another registed user 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The sending user&#39;s API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KudosTransferred</returns>
        public async System.Threading.Tasks.Task<KudosTransferred> PostTransferKudosAsync(string apikey, PostAwardKudosRequest payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<KudosTransferred> localVarResponse = await PostTransferKudosWithHttpInfoAsync(apikey, payload, clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer Kudos to another registed user 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The sending user&#39;s API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KudosTransferred)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<KudosTransferred>> PostTransferKudosWithHttpInfoAsync(string apikey, PostAwardKudosRequest payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PostTransferKudos");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PostTransferKudos");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PostTransferKudos";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<KudosTransferred>("/v2/kudos/transfer", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransferKudos", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Moderator Only: Add a new regex filter 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FilterDetails</returns>
        public FilterDetails PutFilters(string apikey, PutNewFilter payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<FilterDetails> localVarResponse = PutFiltersWithHttpInfo(apikey, payload, clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Moderator Only: Add a new regex filter 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FilterDetails</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<FilterDetails> PutFiltersWithHttpInfo(string apikey, PutNewFilter payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PutFilters");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PutFilters");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PutFilters";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<FilterDetails>("/v2/filters", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutFilters", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Moderator Only: Add a new regex filter 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FilterDetails</returns>
        public async System.Threading.Tasks.Task<FilterDetails> PutFiltersAsync(string apikey, PutNewFilter payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<FilterDetails> localVarResponse = await PutFiltersWithHttpInfoAsync(apikey, payload, clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Moderator Only: Add a new regex filter 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FilterDetails)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<FilterDetails>> PutFiltersWithHttpInfoAsync(string apikey, PutNewFilter payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PutFilters");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PutFilters");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PutFilters";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<FilterDetails>("/v2/filters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutFilters", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Change Horde Modes Endpoint for admins to (un)set the horde into maintenance, invite_only or raid modes.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The Admin API key.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HordeModes</returns>
        public HordeModes PutHordeModes(string apikey, PutHordeModesRequest payload, string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<HordeModes> localVarResponse = PutHordeModesWithHttpInfo(apikey, payload, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Change Horde Modes Endpoint for admins to (un)set the horde into maintenance, invite_only or raid modes.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The Admin API key.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HordeModes</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<HordeModes> PutHordeModesWithHttpInfo(string apikey, PutHordeModesRequest payload, string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PutHordeModes");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PutHordeModes");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PutHordeModes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<HordeModes>("/v2/status/modes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutHordeModes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Change Horde Modes Endpoint for admins to (un)set the horde into maintenance, invite_only or raid modes.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The Admin API key.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HordeModes</returns>
        public async System.Threading.Tasks.Task<HordeModes> PutHordeModesAsync(string apikey, PutHordeModesRequest payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<HordeModes> localVarResponse = await PutHordeModesWithHttpInfoAsync(apikey, payload, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Change Horde Modes Endpoint for admins to (un)set the horde into maintenance, invite_only or raid modes.
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">The Admin API key.</param>
        /// <param name="payload"></param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HordeModes)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<HordeModes>> PutHordeModesWithHttpInfoAsync(string apikey, PutHordeModesRequest payload, string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PutHordeModes");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PutHordeModes");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PutHordeModes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<HordeModes>("/v2/status/modes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutHordeModes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Block worker&#39;s from a specific IP for 24 hours Only usable by horde moderators
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SimpleResponse</returns>
        public SimpleResponse PutOperationsBlockWorkerIp(string workerId, string apikey, AddWorkerTimeout payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<SimpleResponse> localVarResponse = PutOperationsBlockWorkerIpWithHttpInfo(workerId, apikey, payload, clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Block worker&#39;s from a specific IP for 24 hours Only usable by horde moderators
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SimpleResponse</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<SimpleResponse> PutOperationsBlockWorkerIpWithHttpInfo(string workerId, string apikey, AddWorkerTimeout payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'workerId' is set
            if (workerId == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'workerId' when calling V2Api->PutOperationsBlockWorkerIp");
            }

            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PutOperationsBlockWorkerIp");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PutOperationsBlockWorkerIp");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("worker_id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(workerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PutOperationsBlockWorkerIp";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<SimpleResponse>("/v2/operations/block_worker_ipaddr/{worker_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutOperationsBlockWorkerIp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Block worker&#39;s from a specific IP for 24 hours Only usable by horde moderators
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SimpleResponse</returns>
        public async System.Threading.Tasks.Task<SimpleResponse> PutOperationsBlockWorkerIpAsync(string workerId, string apikey, AddWorkerTimeout payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<SimpleResponse> localVarResponse = await PutOperationsBlockWorkerIpWithHttpInfoAsync(workerId, apikey, payload, clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Block worker&#39;s from a specific IP for 24 hours Only usable by horde moderators
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">A mod API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SimpleResponse)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<SimpleResponse>> PutOperationsBlockWorkerIpWithHttpInfoAsync(string workerId, string apikey, AddWorkerTimeout payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workerId' is set
            if (workerId == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'workerId' when calling V2Api->PutOperationsBlockWorkerIp");
            }

            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PutOperationsBlockWorkerIp");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PutOperationsBlockWorkerIp");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("worker_id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(workerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PutOperationsBlockWorkerIp";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SimpleResponse>("/v2/operations/block_worker_ipaddr/{worker_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutOperationsBlockWorkerIp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new SharedKey for this user 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">User API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SharedKeyDetails</returns>
        public SharedKeyDetails PutSharedKey(string apikey, SharedKeyInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<SharedKeyDetails> localVarResponse = PutSharedKeyWithHttpInfo(apikey, payload, clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new SharedKey for this user 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">User API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SharedKeyDetails</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<SharedKeyDetails> PutSharedKeyWithHttpInfo(string apikey, SharedKeyInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PutSharedKey");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PutSharedKey");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PutSharedKey";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<SharedKeyDetails>("/v2/sharedkeys", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutSharedKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new SharedKey for this user 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">User API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SharedKeyDetails</returns>
        public async System.Threading.Tasks.Task<SharedKeyDetails> PutSharedKeyAsync(string apikey, SharedKeyInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<SharedKeyDetails> localVarResponse = await PutSharedKeyWithHttpInfoAsync(apikey, payload, clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new SharedKey for this user 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">User API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SharedKeyDetails)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<SharedKeyDetails>> PutSharedKeyWithHttpInfoAsync(string apikey, SharedKeyInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PutSharedKey");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PutSharedKey");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PutSharedKey";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SharedKeyDetails>("/v2/sharedkeys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutSharedKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Endpoint for horde admins to perform operations on users 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apikey">The Admin API .</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModifyUser</returns>
        public ModifyUser PutUserSingle(string userId, string apikey, ModifyUserInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<ModifyUser> localVarResponse = PutUserSingleWithHttpInfo(userId, apikey, payload, clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Endpoint for horde admins to perform operations on users 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apikey">The Admin API .</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModifyUser</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<ModifyUser> PutUserSingleWithHttpInfo(string userId, string apikey, ModifyUserInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'userId' when calling V2Api->PutUserSingle");
            }

            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PutUserSingle");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PutUserSingle");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PutUserSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<ModifyUser>("/v2/users/{user_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutUserSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Endpoint for horde admins to perform operations on users 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apikey">The Admin API .</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifyUser</returns>
        public async System.Threading.Tasks.Task<ModifyUser> PutUserSingleAsync(string userId, string apikey, ModifyUserInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<ModifyUser> localVarResponse = await PutUserSingleWithHttpInfoAsync(userId, apikey, payload, clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Endpoint for horde admins to perform operations on users 
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apikey">The Admin API .</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifyUser)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<ModifyUser>> PutUserSingleWithHttpInfoAsync(string userId, string apikey, ModifyUserInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'userId' when calling V2Api->PutUserSingle");
            }

            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PutUserSingle");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PutUserSingle");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PutUserSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ModifyUser>("/v2/users/{user_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutUserSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModifyWorker</returns>
        public ModifyWorker PutWorkerSingle(string workerId, string apikey, ModifyWorkerInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<ModifyWorker> localVarResponse = PutWorkerSingleWithHttpInfo(workerId, apikey, payload, clientAgent, xFields);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModifyWorker</returns>
        public Knedlex.StableHorde.Api.Client.ApiResponse<ModifyWorker> PutWorkerSingleWithHttpInfo(string workerId, string apikey, ModifyWorkerInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'workerId' is set
            if (workerId == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'workerId' when calling V2Api->PutWorkerSingle");
            }

            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PutWorkerSingle");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PutWorkerSingle");
            }

            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("worker_id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(workerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PutWorkerSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<ModifyWorker>("/v2/workers/{worker_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutWorkerSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifyWorker</returns>
        public async System.Threading.Tasks.Task<ModifyWorker> PutWorkerSingleAsync(string workerId, string apikey, ModifyWorkerInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.StableHorde.Api.Client.ApiResponse<ModifyWorker> localVarResponse = await PutWorkerSingleWithHttpInfoAsync(workerId, apikey, payload, clientAgent, xFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Knedlex.StableHorde.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workerId"></param>
        /// <param name="apikey">The Moderator or Owner API key.</param>
        /// <param name="payload"></param>
        /// <param name="clientAgent">The client name and version. (optional, default to &quot;unknown:0:unknown&quot;)</param>
        /// <param name="xFields">An optional fields mask (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifyWorker)</returns>
        public async System.Threading.Tasks.Task<Knedlex.StableHorde.Api.Client.ApiResponse<ModifyWorker>> PutWorkerSingleWithHttpInfoAsync(string workerId, string apikey, ModifyWorkerInput payload, string clientAgent = default(string), string xFields = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workerId' is set
            if (workerId == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'workerId' when calling V2Api->PutWorkerSingle");
            }

            // verify the required parameter 'apikey' is set
            if (apikey == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'apikey' when calling V2Api->PutWorkerSingle");
            }

            // verify the required parameter 'payload' is set
            if (payload == null)
            {
                throw new Knedlex.StableHorde.Api.Client.ApiException(400, "Missing required parameter 'payload' when calling V2Api->PutWorkerSingle");
            }


            Knedlex.StableHorde.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.StableHorde.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.StableHorde.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("worker_id", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(workerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("apikey", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(apikey)); // header parameter
            if (clientAgent != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Client-Agent", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(clientAgent)); // header parameter
            }
            if (xFields != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Fields", Knedlex.StableHorde.Api.Client.ClientUtils.ParameterToString(xFields)); // header parameter
            }
            localVarRequestOptions.Data = payload;

            localVarRequestOptions.Operation = "V2Api.PutWorkerSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ModifyWorker>("/v2/workers/{worker_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutWorkerSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
