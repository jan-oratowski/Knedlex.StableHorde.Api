/*
 * AI Horde
 *
 * The API documentation for the AI Horde
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Knedlex.StableHorde.Api.Client.OpenAPIDateConverter;

namespace Knedlex.StableHorde.Api.Model
{
    /// <summary>
    /// GenerationInputKobold
    /// </summary>
    [DataContract(Name = "GenerationInputKobold")]
    public partial class GenerationInputKobold : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerationInputKobold" /> class.
        /// </summary>
        /// <param name="prompt">The prompt which will be sent to KoboldAI to generate text..</param>
        /// <param name="varParams">varParams.</param>
        /// <param name="softprompt">Specify which softpompt needs to be used to service this request..</param>
        /// <param name="trustedWorkers">When true, only trusted workers will serve this request. When False, Evaluating workers will also be used which can increase speed but adds more risk! (default to false).</param>
        /// <param name="slowWorkers">When True, allows slower workers to pick up this request. Disabling this incurs an extra kudos cost. (default to true).</param>
        /// <param name="workers">workers.</param>
        /// <param name="workerBlacklist">If true, the worker list will be treated as a blacklist instead of a whitelist. (default to false).</param>
        /// <param name="models">models.</param>
        /// <param name="dryRun">When true, the endpoint will simply return the cost of the request in kudos and exit. (default to false).</param>
        /// <param name="proxiedAccount">If using a service account as a proxy, provide this value to identify the actual account from which this request is coming from..</param>
        /// <param name="disableBatching">When true, This request will not use batching. This will allow you to retrieve accurate seeds. Feature is restricted to Trusted users and Patreons. (default to false).</param>
        /// <param name="webhook">Provide a URL where the AI Horde will send a POST call after each delivered generation. The request will include the details of the job as well as the request ID..</param>
        public GenerationInputKobold(string prompt = default(string), ModelGenerationInputKobold varParams = default(ModelGenerationInputKobold), string softprompt = default(string), bool trustedWorkers = false, bool slowWorkers = true, List<string> workers = default(List<string>), bool workerBlacklist = false, List<string> models = default(List<string>), bool dryRun = false, string proxiedAccount = default(string), bool disableBatching = false, string webhook = default(string))
        {
            this.Prompt = prompt;
            this.VarParams = varParams;
            this.Softprompt = softprompt;
            this.TrustedWorkers = trustedWorkers;
            this.SlowWorkers = slowWorkers;
            this.Workers = workers;
            this.WorkerBlacklist = workerBlacklist;
            this.Models = models;
            this.DryRun = dryRun;
            this.ProxiedAccount = proxiedAccount;
            this.DisableBatching = disableBatching;
            this.Webhook = webhook;
        }

        /// <summary>
        /// The prompt which will be sent to KoboldAI to generate text.
        /// </summary>
        /// <value>The prompt which will be sent to KoboldAI to generate text.</value>
        [DataMember(Name = "prompt", EmitDefaultValue = false)]
        public string Prompt { get; set; }

        /// <summary>
        /// Gets or Sets VarParams
        /// </summary>
        [DataMember(Name = "params", EmitDefaultValue = false)]
        public ModelGenerationInputKobold VarParams { get; set; }

        /// <summary>
        /// Specify which softpompt needs to be used to service this request.
        /// </summary>
        /// <value>Specify which softpompt needs to be used to service this request.</value>
        [DataMember(Name = "softprompt", EmitDefaultValue = false)]
        public string Softprompt { get; set; }

        /// <summary>
        /// When true, only trusted workers will serve this request. When False, Evaluating workers will also be used which can increase speed but adds more risk!
        /// </summary>
        /// <value>When true, only trusted workers will serve this request. When False, Evaluating workers will also be used which can increase speed but adds more risk!</value>
        [DataMember(Name = "trusted_workers", EmitDefaultValue = true)]
        public bool TrustedWorkers { get; set; }

        /// <summary>
        /// When True, allows slower workers to pick up this request. Disabling this incurs an extra kudos cost.
        /// </summary>
        /// <value>When True, allows slower workers to pick up this request. Disabling this incurs an extra kudos cost.</value>
        [DataMember(Name = "slow_workers", EmitDefaultValue = true)]
        public bool SlowWorkers { get; set; }

        /// <summary>
        /// Gets or Sets Workers
        /// </summary>
        [DataMember(Name = "workers", EmitDefaultValue = false)]
        public List<string> Workers { get; set; }

        /// <summary>
        /// If true, the worker list will be treated as a blacklist instead of a whitelist.
        /// </summary>
        /// <value>If true, the worker list will be treated as a blacklist instead of a whitelist.</value>
        [DataMember(Name = "worker_blacklist", EmitDefaultValue = true)]
        public bool WorkerBlacklist { get; set; }

        /// <summary>
        /// Gets or Sets Models
        /// </summary>
        [DataMember(Name = "models", EmitDefaultValue = false)]
        public List<string> Models { get; set; }

        /// <summary>
        /// When true, the endpoint will simply return the cost of the request in kudos and exit.
        /// </summary>
        /// <value>When true, the endpoint will simply return the cost of the request in kudos and exit.</value>
        [DataMember(Name = "dry_run", EmitDefaultValue = true)]
        public bool DryRun { get; set; }

        /// <summary>
        /// If using a service account as a proxy, provide this value to identify the actual account from which this request is coming from.
        /// </summary>
        /// <value>If using a service account as a proxy, provide this value to identify the actual account from which this request is coming from.</value>
        [DataMember(Name = "proxied_account", EmitDefaultValue = false)]
        public string ProxiedAccount { get; set; }

        /// <summary>
        /// When true, This request will not use batching. This will allow you to retrieve accurate seeds. Feature is restricted to Trusted users and Patreons.
        /// </summary>
        /// <value>When true, This request will not use batching. This will allow you to retrieve accurate seeds. Feature is restricted to Trusted users and Patreons.</value>
        [DataMember(Name = "disable_batching", EmitDefaultValue = true)]
        public bool DisableBatching { get; set; }

        /// <summary>
        /// Provide a URL where the AI Horde will send a POST call after each delivered generation. The request will include the details of the job as well as the request ID.
        /// </summary>
        /// <value>Provide a URL where the AI Horde will send a POST call after each delivered generation. The request will include the details of the job as well as the request ID.</value>
        [DataMember(Name = "webhook", EmitDefaultValue = false)]
        public string Webhook { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GenerationInputKobold {\n");
            sb.Append("  Prompt: ").Append(Prompt).Append("\n");
            sb.Append("  VarParams: ").Append(VarParams).Append("\n");
            sb.Append("  Softprompt: ").Append(Softprompt).Append("\n");
            sb.Append("  TrustedWorkers: ").Append(TrustedWorkers).Append("\n");
            sb.Append("  SlowWorkers: ").Append(SlowWorkers).Append("\n");
            sb.Append("  Workers: ").Append(Workers).Append("\n");
            sb.Append("  WorkerBlacklist: ").Append(WorkerBlacklist).Append("\n");
            sb.Append("  Models: ").Append(Models).Append("\n");
            sb.Append("  DryRun: ").Append(DryRun).Append("\n");
            sb.Append("  ProxiedAccount: ").Append(ProxiedAccount).Append("\n");
            sb.Append("  DisableBatching: ").Append(DisableBatching).Append("\n");
            sb.Append("  Webhook: ").Append(Webhook).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Softprompt (string) minLength
            if (this.Softprompt != null && this.Softprompt.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Softprompt, length must be greater than 1.", new [] { "Softprompt" });
            }

            yield break;
        }
    }

}
