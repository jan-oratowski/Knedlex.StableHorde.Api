/*
 * AI Horde
 *
 * The API documentation for the AI Horde
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Knedlex.StableHorde.Api.Client.OpenAPIDateConverter;

namespace Knedlex.StableHorde.Api.Model
{
    /// <summary>
    /// GenerationInputStable
    /// </summary>
    [DataContract(Name = "GenerationInputStable")]
    public partial class GenerationInputStable : IValidatableObject
    {
        /// <summary>
        /// If source_image is provided, specifies how to process it.
        /// </summary>
        /// <value>If source_image is provided, specifies how to process it.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SourceProcessingEnum
        {
            /// <summary>
            /// Enum Img2img for value: img2img
            /// </summary>
            [EnumMember(Value = "img2img")]
            Img2img = 1,

            /// <summary>
            /// Enum Inpainting for value: inpainting
            /// </summary>
            [EnumMember(Value = "inpainting")]
            Inpainting = 2,

            /// <summary>
            /// Enum Outpainting for value: outpainting
            /// </summary>
            [EnumMember(Value = "outpainting")]
            Outpainting = 3
        }


        /// <summary>
        /// If source_image is provided, specifies how to process it.
        /// </summary>
        /// <value>If source_image is provided, specifies how to process it.</value>
        /// <example>img2img</example>
        [DataMember(Name = "source_processing", EmitDefaultValue = false)]
        public SourceProcessingEnum? SourceProcessing { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerationInputStable" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GenerationInputStable() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerationInputStable" /> class.
        /// </summary>
        /// <param name="prompt">The prompt which will be sent to Stable Diffusion to generate an image. (required).</param>
        /// <param name="varParams">varParams.</param>
        /// <param name="nsfw">Set to true if this request is NSFW. This will skip workers which censor images. (default to false).</param>
        /// <param name="trustedWorkers">When true, only trusted workers will serve this request. When False, Evaluating workers will also be used which can increase speed but adds more risk! (default to false).</param>
        /// <param name="slowWorkers">When True, allows slower workers to pick up this request. Disabling this incurs an extra kudos cost. (default to true).</param>
        /// <param name="censorNsfw">If the request is SFW, and the worker accidentally generates NSFW, it will send back a censored image. (default to false).</param>
        /// <param name="workers">workers.</param>
        /// <param name="workerBlacklist">If true, the worker list will be treated as a blacklist instead of a whitelist. (default to false).</param>
        /// <param name="models">models.</param>
        /// <param name="sourceImage">The Base64-encoded webp to use for img2img..</param>
        /// <param name="sourceProcessing">If source_image is provided, specifies how to process it. (default to SourceProcessingEnum.Img2img).</param>
        /// <param name="sourceMask">If source_processing is set to &#39;inpainting&#39; or &#39;outpainting&#39;, this parameter can be optionally provided as the  Base64-encoded webp mask of the areas to inpaint. If this arg is not passed, the inpainting/outpainting mask has to be embedded as alpha channel..</param>
        /// <param name="r2">If True, the image will be sent via cloudflare r2 download link. (default to true).</param>
        /// <param name="shared">If True, The image will be shared with LAION for improving their dataset. This will also reduce your kudos consumption by 2. For anonymous users, this is always True. (default to false).</param>
        /// <param name="replacementFilter">If enabled, suspicious prompts are sanitized through a string replacement filter instead. (default to true).</param>
        /// <param name="dryRun">When true, the endpoint will simply return the cost of the request in kudos and exit. (default to false).</param>
        /// <param name="proxiedAccount">If using a service account as a proxy, provide this value to identify the actual account from which this request is coming from..</param>
        /// <param name="disableBatching">When true, This request will not use batching. This will allow you to retrieve accurate seeds. Feature is restricted to Trusted users and Patreons. (default to false).</param>
        /// <param name="webhook">Provide a URL where the AI Horde will send a POST call after each delivered generation. The request will include the details of the job as well as the request ID..</param>
        public GenerationInputStable(string prompt = default(string), ModelGenerationInputStable varParams = default(ModelGenerationInputStable), bool nsfw = false, bool trustedWorkers = false, bool slowWorkers = true, bool censorNsfw = false, List<string> workers = default(List<string>), bool workerBlacklist = false, List<string> models = default(List<string>), string sourceImage = default(string), SourceProcessingEnum? sourceProcessing = SourceProcessingEnum.Img2img, string sourceMask = default(string), bool r2 = true, bool shared = false, bool replacementFilter = true, bool dryRun = false, string proxiedAccount = default(string), bool disableBatching = false, string webhook = default(string))
        {
            // to ensure "prompt" is required (not null)
            if (prompt == null)
            {
                throw new ArgumentNullException("prompt is a required property for GenerationInputStable and cannot be null");
            }
            this.Prompt = prompt;
            this.VarParams = varParams;
            this.Nsfw = nsfw;
            this.TrustedWorkers = trustedWorkers;
            this.SlowWorkers = slowWorkers;
            this.CensorNsfw = censorNsfw;
            this.Workers = workers;
            this.WorkerBlacklist = workerBlacklist;
            this.Models = models;
            this.SourceImage = sourceImage;
            this.SourceProcessing = sourceProcessing;
            this.SourceMask = sourceMask;
            this.R2 = r2;
            this.Shared = shared;
            this.ReplacementFilter = replacementFilter;
            this.DryRun = dryRun;
            this.ProxiedAccount = proxiedAccount;
            this.DisableBatching = disableBatching;
            this.Webhook = webhook;
        }

        /// <summary>
        /// The prompt which will be sent to Stable Diffusion to generate an image.
        /// </summary>
        /// <value>The prompt which will be sent to Stable Diffusion to generate an image.</value>
        [DataMember(Name = "prompt", IsRequired = true, EmitDefaultValue = true)]
        public string Prompt { get; set; }

        /// <summary>
        /// Gets or Sets VarParams
        /// </summary>
        [DataMember(Name = "params", EmitDefaultValue = false)]
        public ModelGenerationInputStable VarParams { get; set; }

        /// <summary>
        /// Set to true if this request is NSFW. This will skip workers which censor images.
        /// </summary>
        /// <value>Set to true if this request is NSFW. This will skip workers which censor images.</value>
        [DataMember(Name = "nsfw", EmitDefaultValue = true)]
        public bool Nsfw { get; set; }

        /// <summary>
        /// When true, only trusted workers will serve this request. When False, Evaluating workers will also be used which can increase speed but adds more risk!
        /// </summary>
        /// <value>When true, only trusted workers will serve this request. When False, Evaluating workers will also be used which can increase speed but adds more risk!</value>
        [DataMember(Name = "trusted_workers", EmitDefaultValue = true)]
        public bool TrustedWorkers { get; set; }

        /// <summary>
        /// When True, allows slower workers to pick up this request. Disabling this incurs an extra kudos cost.
        /// </summary>
        /// <value>When True, allows slower workers to pick up this request. Disabling this incurs an extra kudos cost.</value>
        [DataMember(Name = "slow_workers", EmitDefaultValue = true)]
        public bool SlowWorkers { get; set; }

        /// <summary>
        /// If the request is SFW, and the worker accidentally generates NSFW, it will send back a censored image.
        /// </summary>
        /// <value>If the request is SFW, and the worker accidentally generates NSFW, it will send back a censored image.</value>
        [DataMember(Name = "censor_nsfw", EmitDefaultValue = true)]
        public bool CensorNsfw { get; set; }

        /// <summary>
        /// Gets or Sets Workers
        /// </summary>
        [DataMember(Name = "workers", EmitDefaultValue = false)]
        public List<string> Workers { get; set; }

        /// <summary>
        /// If true, the worker list will be treated as a blacklist instead of a whitelist.
        /// </summary>
        /// <value>If true, the worker list will be treated as a blacklist instead of a whitelist.</value>
        [DataMember(Name = "worker_blacklist", EmitDefaultValue = true)]
        public bool WorkerBlacklist { get; set; }

        /// <summary>
        /// Gets or Sets Models
        /// </summary>
        [DataMember(Name = "models", EmitDefaultValue = false)]
        public List<string> Models { get; set; }

        /// <summary>
        /// The Base64-encoded webp to use for img2img.
        /// </summary>
        /// <value>The Base64-encoded webp to use for img2img.</value>
        [DataMember(Name = "source_image", EmitDefaultValue = false)]
        public string SourceImage { get; set; }

        /// <summary>
        /// If source_processing is set to &#39;inpainting&#39; or &#39;outpainting&#39;, this parameter can be optionally provided as the  Base64-encoded webp mask of the areas to inpaint. If this arg is not passed, the inpainting/outpainting mask has to be embedded as alpha channel.
        /// </summary>
        /// <value>If source_processing is set to &#39;inpainting&#39; or &#39;outpainting&#39;, this parameter can be optionally provided as the  Base64-encoded webp mask of the areas to inpaint. If this arg is not passed, the inpainting/outpainting mask has to be embedded as alpha channel.</value>
        [DataMember(Name = "source_mask", EmitDefaultValue = false)]
        public string SourceMask { get; set; }

        /// <summary>
        /// If True, the image will be sent via cloudflare r2 download link.
        /// </summary>
        /// <value>If True, the image will be sent via cloudflare r2 download link.</value>
        [DataMember(Name = "r2", EmitDefaultValue = true)]
        public bool R2 { get; set; }

        /// <summary>
        /// If True, The image will be shared with LAION for improving their dataset. This will also reduce your kudos consumption by 2. For anonymous users, this is always True.
        /// </summary>
        /// <value>If True, The image will be shared with LAION for improving their dataset. This will also reduce your kudos consumption by 2. For anonymous users, this is always True.</value>
        [DataMember(Name = "shared", EmitDefaultValue = true)]
        public bool Shared { get; set; }

        /// <summary>
        /// If enabled, suspicious prompts are sanitized through a string replacement filter instead.
        /// </summary>
        /// <value>If enabled, suspicious prompts are sanitized through a string replacement filter instead.</value>
        [DataMember(Name = "replacement_filter", EmitDefaultValue = true)]
        public bool ReplacementFilter { get; set; }

        /// <summary>
        /// When true, the endpoint will simply return the cost of the request in kudos and exit.
        /// </summary>
        /// <value>When true, the endpoint will simply return the cost of the request in kudos and exit.</value>
        [DataMember(Name = "dry_run", EmitDefaultValue = true)]
        public bool DryRun { get; set; }

        /// <summary>
        /// If using a service account as a proxy, provide this value to identify the actual account from which this request is coming from.
        /// </summary>
        /// <value>If using a service account as a proxy, provide this value to identify the actual account from which this request is coming from.</value>
        [DataMember(Name = "proxied_account", EmitDefaultValue = false)]
        public string ProxiedAccount { get; set; }

        /// <summary>
        /// When true, This request will not use batching. This will allow you to retrieve accurate seeds. Feature is restricted to Trusted users and Patreons.
        /// </summary>
        /// <value>When true, This request will not use batching. This will allow you to retrieve accurate seeds. Feature is restricted to Trusted users and Patreons.</value>
        [DataMember(Name = "disable_batching", EmitDefaultValue = true)]
        public bool DisableBatching { get; set; }

        /// <summary>
        /// Provide a URL where the AI Horde will send a POST call after each delivered generation. The request will include the details of the job as well as the request ID.
        /// </summary>
        /// <value>Provide a URL where the AI Horde will send a POST call after each delivered generation. The request will include the details of the job as well as the request ID.</value>
        /// <example>https://haidra.net/00000000-0000-0000-0000-000000000000</example>
        [DataMember(Name = "webhook", EmitDefaultValue = false)]
        public string Webhook { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GenerationInputStable {\n");
            sb.Append("  Prompt: ").Append(Prompt).Append("\n");
            sb.Append("  VarParams: ").Append(VarParams).Append("\n");
            sb.Append("  Nsfw: ").Append(Nsfw).Append("\n");
            sb.Append("  TrustedWorkers: ").Append(TrustedWorkers).Append("\n");
            sb.Append("  SlowWorkers: ").Append(SlowWorkers).Append("\n");
            sb.Append("  CensorNsfw: ").Append(CensorNsfw).Append("\n");
            sb.Append("  Workers: ").Append(Workers).Append("\n");
            sb.Append("  WorkerBlacklist: ").Append(WorkerBlacklist).Append("\n");
            sb.Append("  Models: ").Append(Models).Append("\n");
            sb.Append("  SourceImage: ").Append(SourceImage).Append("\n");
            sb.Append("  SourceProcessing: ").Append(SourceProcessing).Append("\n");
            sb.Append("  SourceMask: ").Append(SourceMask).Append("\n");
            sb.Append("  R2: ").Append(R2).Append("\n");
            sb.Append("  Shared: ").Append(Shared).Append("\n");
            sb.Append("  ReplacementFilter: ").Append(ReplacementFilter).Append("\n");
            sb.Append("  DryRun: ").Append(DryRun).Append("\n");
            sb.Append("  ProxiedAccount: ").Append(ProxiedAccount).Append("\n");
            sb.Append("  DisableBatching: ").Append(DisableBatching).Append("\n");
            sb.Append("  Webhook: ").Append(Webhook).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Prompt (string) minLength
            if (this.Prompt != null && this.Prompt.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Prompt, length must be greater than 1.", new [] { "Prompt" });
            }

            // Webhook (string) maxLength
            if (this.Webhook != null && this.Webhook.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Webhook, length must be less than 1024.", new [] { "Webhook" });
            }

            // Webhook (string) minLength
            if (this.Webhook != null && this.Webhook.Length < 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Webhook, length must be greater than 10.", new [] { "Webhook" });
            }

            yield break;
        }
    }

}
