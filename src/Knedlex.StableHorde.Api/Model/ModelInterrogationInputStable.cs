/*
 * AI Horde
 *
 * The API documentation for the AI Horde
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Knedlex.StableHorde.Api.Client.OpenAPIDateConverter;

namespace Knedlex.StableHorde.Api.Model
{
    /// <summary>
    /// ModelInterrogationInputStable
    /// </summary>
    [DataContract(Name = "ModelInterrogationInputStable")]
    public partial class ModelInterrogationInputStable : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelInterrogationInputStable" /> class.
        /// </summary>
        /// <param name="forms">forms.</param>
        /// <param name="sourceImage">The public URL of the image to interrogate..</param>
        /// <param name="slowWorkers">When True, allows slower workers to pick up this request. Disabling this incurs an extra kudos cost. (default to true).</param>
        /// <param name="webhook">Provide a URL where the AI Horde will send a POST call after each delivered generation. The request will include the details of the job as well as the request ID..</param>
        public ModelInterrogationInputStable(List<ModelInterrogationFormStable> forms = default(List<ModelInterrogationFormStable>), string sourceImage = default(string), bool slowWorkers = true, string webhook = default(string))
        {
            this.Forms = forms;
            this.SourceImage = sourceImage;
            this.SlowWorkers = slowWorkers;
            this.Webhook = webhook;
        }

        /// <summary>
        /// Gets or Sets Forms
        /// </summary>
        [DataMember(Name = "forms", EmitDefaultValue = false)]
        public List<ModelInterrogationFormStable> Forms { get; set; }

        /// <summary>
        /// The public URL of the image to interrogate.
        /// </summary>
        /// <value>The public URL of the image to interrogate.</value>
        [DataMember(Name = "source_image", EmitDefaultValue = false)]
        public string SourceImage { get; set; }

        /// <summary>
        /// When True, allows slower workers to pick up this request. Disabling this incurs an extra kudos cost.
        /// </summary>
        /// <value>When True, allows slower workers to pick up this request. Disabling this incurs an extra kudos cost.</value>
        [DataMember(Name = "slow_workers", EmitDefaultValue = true)]
        public bool SlowWorkers { get; set; }

        /// <summary>
        /// Provide a URL where the AI Horde will send a POST call after each delivered generation. The request will include the details of the job as well as the request ID.
        /// </summary>
        /// <value>Provide a URL where the AI Horde will send a POST call after each delivered generation. The request will include the details of the job as well as the request ID.</value>
        /// <example>https://haidra.net/00000000-0000-0000-0000-000000000000</example>
        [DataMember(Name = "webhook", EmitDefaultValue = false)]
        public string Webhook { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModelInterrogationInputStable {\n");
            sb.Append("  Forms: ").Append(Forms).Append("\n");
            sb.Append("  SourceImage: ").Append(SourceImage).Append("\n");
            sb.Append("  SlowWorkers: ").Append(SlowWorkers).Append("\n");
            sb.Append("  Webhook: ").Append(Webhook).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Webhook (string) maxLength
            if (this.Webhook != null && this.Webhook.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Webhook, length must be less than 1024.", new [] { "Webhook" });
            }

            // Webhook (string) minLength
            if (this.Webhook != null && this.Webhook.Length < 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Webhook, length must be greater than 10.", new [] { "Webhook" });
            }

            yield break;
        }
    }

}
