/*
 * AI Horde
 *
 * The API documentation for the AI Horde
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Knedlex.StableHorde.Api.Client.OpenAPIDateConverter;

namespace Knedlex.StableHorde.Api.Model
{
    /// <summary>
    /// SubmitInputStable
    /// </summary>
    [DataContract(Name = "SubmitInputStable")]
    public partial class SubmitInputStable : IValidatableObject
    {
        /// <summary>
        /// The state of this generation.
        /// </summary>
        /// <value>The state of this generation.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum Ok for value: ok
            /// </summary>
            [EnumMember(Value = "ok")]
            Ok = 1,

            /// <summary>
            /// Enum Censored for value: censored
            /// </summary>
            [EnumMember(Value = "censored")]
            Censored = 2,

            /// <summary>
            /// Enum Faulted for value: faulted
            /// </summary>
            [EnumMember(Value = "faulted")]
            Faulted = 3,

            /// <summary>
            /// Enum Csam for value: csam
            /// </summary>
            [EnumMember(Value = "csam")]
            Csam = 4
        }


        /// <summary>
        /// The state of this generation.
        /// </summary>
        /// <value>The state of this generation.</value>
        /// <example>ok</example>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubmitInputStable" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubmitInputStable() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubmitInputStable" /> class.
        /// </summary>
        /// <param name="id">The UUID of this generation. (required).</param>
        /// <param name="generation">R2 result was uploaded to R2, else the string of the result..</param>
        /// <param name="state">The state of this generation. (default to StateEnum.Ok).</param>
        /// <param name="seed">The seed for this generation. (required).</param>
        /// <param name="censored">OBSOLETE (start using meta): If True, this resulting image has been censored. (default to false).</param>
        /// <param name="genMetadata">genMetadata.</param>
        public SubmitInputStable(string id = default(string), string generation = default(string), StateEnum? state = StateEnum.Ok, int seed = default(int), bool censored = false, List<GenerationMetadataStable> genMetadata = default(List<GenerationMetadataStable>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for SubmitInputStable and cannot be null");
            }
            this.Id = id;
            this.Seed = seed;
            this.Generation = generation;
            this.State = state;
            this.Censored = censored;
            this.GenMetadata = genMetadata;
        }

        /// <summary>
        /// The UUID of this generation.
        /// </summary>
        /// <value>The UUID of this generation.</value>
        /// <example>00000000-0000-0000-0000-000000000000</example>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// R2 result was uploaded to R2, else the string of the result.
        /// </summary>
        /// <value>R2 result was uploaded to R2, else the string of the result.</value>
        /// <example>R2</example>
        [DataMember(Name = "generation", EmitDefaultValue = false)]
        public string Generation { get; set; }

        /// <summary>
        /// The seed for this generation.
        /// </summary>
        /// <value>The seed for this generation.</value>
        [DataMember(Name = "seed", IsRequired = true, EmitDefaultValue = true)]
        public int Seed { get; set; }

        /// <summary>
        /// OBSOLETE (start using meta): If True, this resulting image has been censored.
        /// </summary>
        /// <value>OBSOLETE (start using meta): If True, this resulting image has been censored.</value>
        [DataMember(Name = "censored", EmitDefaultValue = true)]
        public bool Censored { get; set; }

        /// <summary>
        /// Gets or Sets GenMetadata
        /// </summary>
        [DataMember(Name = "gen_metadata", EmitDefaultValue = false)]
        public List<GenerationMetadataStable> GenMetadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubmitInputStable {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Generation: ").Append(Generation).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Seed: ").Append(Seed).Append("\n");
            sb.Append("  Censored: ").Append(Censored).Append("\n");
            sb.Append("  GenMetadata: ").Append(GenMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
