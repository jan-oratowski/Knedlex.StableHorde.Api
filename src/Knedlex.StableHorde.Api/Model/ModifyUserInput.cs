/*
 * AI Horde
 *
 * The API documentation for the AI Horde
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Knedlex.StableHorde.Api.Client.OpenAPIDateConverter;

namespace Knedlex.StableHorde.Api.Model
{
    /// <summary>
    /// ModifyUserInput
    /// </summary>
    [DataContract(Name = "ModifyUserInput")]
    public partial class ModifyUserInput : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModifyUserInput" /> class.
        /// </summary>
        /// <param name="kudos">The amount of kudos to modify (can be negative)..</param>
        /// <param name="concurrency">The amount of concurrent request this user can have..</param>
        /// <param name="usageMultiplier">The amount by which to multiply the users kudos consumption..</param>
        /// <param name="workerInvited">Set to the amount of workers this user is allowed to join to the horde when in worker invite-only mode..</param>
        /// <param name="moderator">Set to true to make this user a horde moderator..</param>
        /// <param name="publicWorkers">Set to true to make this user display their worker IDs..</param>
        /// <param name="monthlyKudos">When specified, will start assigning the user monthly kudos, starting now!.</param>
        /// <param name="username">When specified, will change the username. No profanity allowed!.</param>
        /// <param name="trusted">When set to true,the user and their servers will not be affected by suspicion..</param>
        /// <param name="flagged">When set to true, the user cannot tranfer kudos and all their workers are put into permanent maintenance..</param>
        /// <param name="customizer">When set to true, the user will be able to serve custom Stable Diffusion models which do not exist in the Official AI Horde Model Reference..</param>
        /// <param name="vpn">When set to true, the user will be able to onboard workers behind a VPN. This should be used as a temporary solution until the user is trusted..</param>
        /// <param name="service">When set to true, the user is considered a service account proxying the requests for other users..</param>
        /// <param name="education">When set to true, the user is considered an education account and some options become more restrictive..</param>
        /// <param name="special">When set to true, The user can send special payloads..</param>
        /// <param name="filtered">When set to true, the replacement filter will always be applied against this user.</param>
        /// <param name="resetSuspicion">Set the user&#39;s suspicion back to 0..</param>
        /// <param name="contact">Contact details for the horde admins to reach the user in case of emergency. This is only visible to horde moderators..</param>
        /// <param name="adminComment">Add further information about this user for the other admins..</param>
        public ModifyUserInput(decimal kudos = default(decimal), int concurrency = default(int), decimal usageMultiplier = default(decimal), int workerInvited = default(int), bool moderator = default(bool), bool publicWorkers = default(bool), int monthlyKudos = default(int), string username = default(string), bool trusted = default(bool), bool flagged = default(bool), bool customizer = default(bool), bool vpn = default(bool), bool service = default(bool), bool education = default(bool), bool special = default(bool), bool filtered = default(bool), bool resetSuspicion = default(bool), string contact = default(string), string adminComment = default(string))
        {
            this.Kudos = kudos;
            this.Concurrency = concurrency;
            this.UsageMultiplier = usageMultiplier;
            this.WorkerInvited = workerInvited;
            this.Moderator = moderator;
            this.PublicWorkers = publicWorkers;
            this.MonthlyKudos = monthlyKudos;
            this.Username = username;
            this.Trusted = trusted;
            this.Flagged = flagged;
            this.Customizer = customizer;
            this.Vpn = vpn;
            this.Service = service;
            this.Education = education;
            this.Special = special;
            this.Filtered = filtered;
            this.ResetSuspicion = resetSuspicion;
            this.Contact = contact;
            this.AdminComment = adminComment;
        }

        /// <summary>
        /// The amount of kudos to modify (can be negative).
        /// </summary>
        /// <value>The amount of kudos to modify (can be negative).</value>
        [DataMember(Name = "kudos", EmitDefaultValue = false)]
        public decimal Kudos { get; set; }

        /// <summary>
        /// The amount of concurrent request this user can have.
        /// </summary>
        /// <value>The amount of concurrent request this user can have.</value>
        [DataMember(Name = "concurrency", EmitDefaultValue = false)]
        public int Concurrency { get; set; }

        /// <summary>
        /// The amount by which to multiply the users kudos consumption.
        /// </summary>
        /// <value>The amount by which to multiply the users kudos consumption.</value>
        [DataMember(Name = "usage_multiplier", EmitDefaultValue = false)]
        public decimal UsageMultiplier { get; set; }

        /// <summary>
        /// Set to the amount of workers this user is allowed to join to the horde when in worker invite-only mode.
        /// </summary>
        /// <value>Set to the amount of workers this user is allowed to join to the horde when in worker invite-only mode.</value>
        [DataMember(Name = "worker_invited", EmitDefaultValue = false)]
        public int WorkerInvited { get; set; }

        /// <summary>
        /// Set to true to make this user a horde moderator.
        /// </summary>
        /// <value>Set to true to make this user a horde moderator.</value>
        /// <example>false</example>
        [DataMember(Name = "moderator", EmitDefaultValue = true)]
        public bool Moderator { get; set; }

        /// <summary>
        /// Set to true to make this user display their worker IDs.
        /// </summary>
        /// <value>Set to true to make this user display their worker IDs.</value>
        /// <example>false</example>
        [DataMember(Name = "public_workers", EmitDefaultValue = true)]
        public bool PublicWorkers { get; set; }

        /// <summary>
        /// When specified, will start assigning the user monthly kudos, starting now!
        /// </summary>
        /// <value>When specified, will start assigning the user monthly kudos, starting now!</value>
        [DataMember(Name = "monthly_kudos", EmitDefaultValue = false)]
        public int MonthlyKudos { get; set; }

        /// <summary>
        /// When specified, will change the username. No profanity allowed!
        /// </summary>
        /// <value>When specified, will change the username. No profanity allowed!</value>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// When set to true,the user and their servers will not be affected by suspicion.
        /// </summary>
        /// <value>When set to true,the user and their servers will not be affected by suspicion.</value>
        /// <example>false</example>
        [DataMember(Name = "trusted", EmitDefaultValue = true)]
        public bool Trusted { get; set; }

        /// <summary>
        /// When set to true, the user cannot tranfer kudos and all their workers are put into permanent maintenance.
        /// </summary>
        /// <value>When set to true, the user cannot tranfer kudos and all their workers are put into permanent maintenance.</value>
        /// <example>false</example>
        [DataMember(Name = "flagged", EmitDefaultValue = true)]
        public bool Flagged { get; set; }

        /// <summary>
        /// When set to true, the user will be able to serve custom Stable Diffusion models which do not exist in the Official AI Horde Model Reference.
        /// </summary>
        /// <value>When set to true, the user will be able to serve custom Stable Diffusion models which do not exist in the Official AI Horde Model Reference.</value>
        /// <example>false</example>
        [DataMember(Name = "customizer", EmitDefaultValue = true)]
        public bool Customizer { get; set; }

        /// <summary>
        /// When set to true, the user will be able to onboard workers behind a VPN. This should be used as a temporary solution until the user is trusted.
        /// </summary>
        /// <value>When set to true, the user will be able to onboard workers behind a VPN. This should be used as a temporary solution until the user is trusted.</value>
        /// <example>false</example>
        [DataMember(Name = "vpn", EmitDefaultValue = true)]
        public bool Vpn { get; set; }

        /// <summary>
        /// When set to true, the user is considered a service account proxying the requests for other users.
        /// </summary>
        /// <value>When set to true, the user is considered a service account proxying the requests for other users.</value>
        /// <example>false</example>
        [DataMember(Name = "service", EmitDefaultValue = true)]
        public bool Service { get; set; }

        /// <summary>
        /// When set to true, the user is considered an education account and some options become more restrictive.
        /// </summary>
        /// <value>When set to true, the user is considered an education account and some options become more restrictive.</value>
        /// <example>false</example>
        [DataMember(Name = "education", EmitDefaultValue = true)]
        public bool Education { get; set; }

        /// <summary>
        /// When set to true, The user can send special payloads.
        /// </summary>
        /// <value>When set to true, The user can send special payloads.</value>
        /// <example>false</example>
        [DataMember(Name = "special", EmitDefaultValue = true)]
        public bool Special { get; set; }

        /// <summary>
        /// When set to true, the replacement filter will always be applied against this user
        /// </summary>
        /// <value>When set to true, the replacement filter will always be applied against this user</value>
        /// <example>false</example>
        [DataMember(Name = "filtered", EmitDefaultValue = true)]
        public bool Filtered { get; set; }

        /// <summary>
        /// Set the user&#39;s suspicion back to 0.
        /// </summary>
        /// <value>Set the user&#39;s suspicion back to 0.</value>
        [DataMember(Name = "reset_suspicion", EmitDefaultValue = true)]
        public bool ResetSuspicion { get; set; }

        /// <summary>
        /// Contact details for the horde admins to reach the user in case of emergency. This is only visible to horde moderators.
        /// </summary>
        /// <value>Contact details for the horde admins to reach the user in case of emergency. This is only visible to horde moderators.</value>
        /// <example>email@example.com</example>
        [DataMember(Name = "contact", EmitDefaultValue = false)]
        public string Contact { get; set; }

        /// <summary>
        /// Add further information about this user for the other admins.
        /// </summary>
        /// <value>Add further information about this user for the other admins.</value>
        /// <example>User is sus</example>
        [DataMember(Name = "admin_comment", EmitDefaultValue = false)]
        public string AdminComment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModifyUserInput {\n");
            sb.Append("  Kudos: ").Append(Kudos).Append("\n");
            sb.Append("  Concurrency: ").Append(Concurrency).Append("\n");
            sb.Append("  UsageMultiplier: ").Append(UsageMultiplier).Append("\n");
            sb.Append("  WorkerInvited: ").Append(WorkerInvited).Append("\n");
            sb.Append("  Moderator: ").Append(Moderator).Append("\n");
            sb.Append("  PublicWorkers: ").Append(PublicWorkers).Append("\n");
            sb.Append("  MonthlyKudos: ").Append(MonthlyKudos).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Trusted: ").Append(Trusted).Append("\n");
            sb.Append("  Flagged: ").Append(Flagged).Append("\n");
            sb.Append("  Customizer: ").Append(Customizer).Append("\n");
            sb.Append("  Vpn: ").Append(Vpn).Append("\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("  Education: ").Append(Education).Append("\n");
            sb.Append("  Special: ").Append(Special).Append("\n");
            sb.Append("  Filtered: ").Append(Filtered).Append("\n");
            sb.Append("  ResetSuspicion: ").Append(ResetSuspicion).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  AdminComment: ").Append(AdminComment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Concurrency (int) maximum
            if (this.Concurrency > (int)500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Concurrency, must be a value less than or equal to 500.", new [] { "Concurrency" });
            }

            // Concurrency (int) minimum
            if (this.Concurrency < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Concurrency, must be a value greater than or equal to 0.", new [] { "Concurrency" });
            }

            // UsageMultiplier (decimal) maximum
            if (this.UsageMultiplier > (decimal)1E+1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UsageMultiplier, must be a value less than or equal to 1E+1.", new [] { "UsageMultiplier" });
            }

            // UsageMultiplier (decimal) minimum
            if (this.UsageMultiplier < (decimal)0.1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UsageMultiplier, must be a value greater than or equal to 0.1.", new [] { "UsageMultiplier" });
            }

            // Username (string) maxLength
            if (this.Username != null && this.Username.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Username, length must be less than 100.", new [] { "Username" });
            }

            // Username (string) minLength
            if (this.Username != null && this.Username.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Username, length must be greater than 3.", new [] { "Username" });
            }

            // Contact (string) maxLength
            if (this.Contact != null && this.Contact.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Contact, length must be less than 500.", new [] { "Contact" });
            }

            // Contact (string) minLength
            if (this.Contact != null && this.Contact.Length < 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Contact, length must be greater than 5.", new [] { "Contact" });
            }

            // AdminComment (string) maxLength
            if (this.AdminComment != null && this.AdminComment.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AdminComment, length must be less than 500.", new [] { "AdminComment" });
            }

            // AdminComment (string) minLength
            if (this.AdminComment != null && this.AdminComment.Length < 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AdminComment, length must be greater than 5.", new [] { "AdminComment" });
            }

            yield break;
        }
    }

}
