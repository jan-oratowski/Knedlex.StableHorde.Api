/*
 * AI Horde
 *
 * The API documentation for the AI Horde
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Knedlex.StableHorde.Api.Client.OpenAPIDateConverter;

namespace Knedlex.StableHorde.Api.Model
{
    /// <summary>
    /// GenerationMetadataKobold
    /// </summary>
    [DataContract(Name = "GenerationMetadataKobold")]
    public partial class GenerationMetadataKobold : IValidatableObject
    {
        /// <summary>
        /// The relevance of the metadata field
        /// </summary>
        /// <value>The relevance of the metadata field</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Censorship for value: censorship
            /// </summary>
            [EnumMember(Value = "censorship")]
            Censorship = 1
        }


        /// <summary>
        /// The relevance of the metadata field
        /// </summary>
        /// <value>The relevance of the metadata field</value>
        /// <example>censorship</example>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// The value of the metadata field
        /// </summary>
        /// <value>The value of the metadata field</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ValueEnum
        {
            /// <summary>
            /// Enum Csam for value: csam
            /// </summary>
            [EnumMember(Value = "csam")]
            Csam = 1
        }


        /// <summary>
        /// The value of the metadata field
        /// </summary>
        /// <value>The value of the metadata field</value>
        /// <example>csam</example>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public ValueEnum Value { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerationMetadataKobold" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GenerationMetadataKobold() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerationMetadataKobold" /> class.
        /// </summary>
        /// <param name="type">The relevance of the metadata field (required).</param>
        /// <param name="value">The value of the metadata field (required).</param>
        /// <param name="varRef">Optionally a reference for the metadata (e.g. a lora ID).</param>
        public GenerationMetadataKobold(TypeEnum type = default(TypeEnum), ValueEnum value = default(ValueEnum), string varRef = default(string))
        {
            this.Type = type;
            this.Value = value;
            this.VarRef = varRef;
        }

        /// <summary>
        /// Optionally a reference for the metadata (e.g. a lora ID)
        /// </summary>
        /// <value>Optionally a reference for the metadata (e.g. a lora ID)</value>
        [DataMember(Name = "ref", EmitDefaultValue = false)]
        public string VarRef { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GenerationMetadataKobold {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  VarRef: ").Append(VarRef).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // VarRef (string) maxLength
            if (this.VarRef != null && this.VarRef.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VarRef, length must be less than 255.", new [] { "VarRef" });
            }

            yield break;
        }
    }

}
