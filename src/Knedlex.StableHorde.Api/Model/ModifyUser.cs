/*
 * AI Horde
 *
 * The API documentation for the AI Horde
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Knedlex.StableHorde.Api.Client.OpenAPIDateConverter;

namespace Knedlex.StableHorde.Api.Model
{
    /// <summary>
    /// ModifyUser
    /// </summary>
    [DataContract(Name = "ModifyUser")]
    public partial class ModifyUser : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModifyUser" /> class.
        /// </summary>
        /// <param name="newKudos">The new total Kudos this user has after this request..</param>
        /// <param name="concurrency">The request concurrency this user has after this request..</param>
        /// <param name="usageMultiplier">Multiplies the amount of kudos lost when generating images..</param>
        /// <param name="workerInvited">Whether this user has been invited to join a worker to the horde and how many of them. When 0, this user cannot add (new) workers to the horde..</param>
        /// <param name="moderator">The user&#39;s new moderator status..</param>
        /// <param name="publicWorkers">The user&#39;s new public_workers status..</param>
        /// <param name="username">The user&#39;s new username..</param>
        /// <param name="monthlyKudos">The user&#39;s new monthly kudos total..</param>
        /// <param name="trusted">The user&#39;s new trusted status..</param>
        /// <param name="flagged">The user&#39;s new flagged status..</param>
        /// <param name="customizer">The user&#39;s new customizer status..</param>
        /// <param name="vpn">The user&#39;s new vpn status..</param>
        /// <param name="service">The user&#39;s new service status..</param>
        /// <param name="education">The user&#39;s new education status..</param>
        /// <param name="special">The user&#39;s new special status..</param>
        /// <param name="newSuspicion">The user&#39;s new suspiciousness rating..</param>
        /// <param name="contact">The new contact details..</param>
        /// <param name="adminComment">The new admin comment..</param>
        public ModifyUser(decimal newKudos = default(decimal), int concurrency = default(int), decimal usageMultiplier = default(decimal), int workerInvited = default(int), bool moderator = default(bool), bool publicWorkers = default(bool), string username = default(string), int monthlyKudos = default(int), bool trusted = default(bool), bool flagged = default(bool), bool customizer = default(bool), bool vpn = default(bool), bool service = default(bool), bool education = default(bool), bool special = default(bool), int newSuspicion = default(int), string contact = default(string), string adminComment = default(string))
        {
            this.NewKudos = newKudos;
            this.Concurrency = concurrency;
            this.UsageMultiplier = usageMultiplier;
            this.WorkerInvited = workerInvited;
            this.Moderator = moderator;
            this.PublicWorkers = publicWorkers;
            this.Username = username;
            this.MonthlyKudos = monthlyKudos;
            this.Trusted = trusted;
            this.Flagged = flagged;
            this.Customizer = customizer;
            this.Vpn = vpn;
            this.Service = service;
            this.Education = education;
            this.Special = special;
            this.NewSuspicion = newSuspicion;
            this.Contact = contact;
            this.AdminComment = adminComment;
        }

        /// <summary>
        /// The new total Kudos this user has after this request.
        /// </summary>
        /// <value>The new total Kudos this user has after this request.</value>
        [DataMember(Name = "new_kudos", EmitDefaultValue = false)]
        public decimal NewKudos { get; set; }

        /// <summary>
        /// The request concurrency this user has after this request.
        /// </summary>
        /// <value>The request concurrency this user has after this request.</value>
        /// <example>30</example>
        [DataMember(Name = "concurrency", EmitDefaultValue = false)]
        public int Concurrency { get; set; }

        /// <summary>
        /// Multiplies the amount of kudos lost when generating images.
        /// </summary>
        /// <value>Multiplies the amount of kudos lost when generating images.</value>
        /// <example>1.0</example>
        [DataMember(Name = "usage_multiplier", EmitDefaultValue = false)]
        public decimal UsageMultiplier { get; set; }

        /// <summary>
        /// Whether this user has been invited to join a worker to the horde and how many of them. When 0, this user cannot add (new) workers to the horde.
        /// </summary>
        /// <value>Whether this user has been invited to join a worker to the horde and how many of them. When 0, this user cannot add (new) workers to the horde.</value>
        /// <example>1</example>
        [DataMember(Name = "worker_invited", EmitDefaultValue = false)]
        public int WorkerInvited { get; set; }

        /// <summary>
        /// The user&#39;s new moderator status.
        /// </summary>
        /// <value>The user&#39;s new moderator status.</value>
        /// <example>false</example>
        [DataMember(Name = "moderator", EmitDefaultValue = true)]
        public bool Moderator { get; set; }

        /// <summary>
        /// The user&#39;s new public_workers status.
        /// </summary>
        /// <value>The user&#39;s new public_workers status.</value>
        /// <example>false</example>
        [DataMember(Name = "public_workers", EmitDefaultValue = true)]
        public bool PublicWorkers { get; set; }

        /// <summary>
        /// The user&#39;s new username.
        /// </summary>
        /// <value>The user&#39;s new username.</value>
        /// <example>username#1</example>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// The user&#39;s new monthly kudos total.
        /// </summary>
        /// <value>The user&#39;s new monthly kudos total.</value>
        /// <example>0</example>
        [DataMember(Name = "monthly_kudos", EmitDefaultValue = false)]
        public int MonthlyKudos { get; set; }

        /// <summary>
        /// The user&#39;s new trusted status.
        /// </summary>
        /// <value>The user&#39;s new trusted status.</value>
        [DataMember(Name = "trusted", EmitDefaultValue = true)]
        public bool Trusted { get; set; }

        /// <summary>
        /// The user&#39;s new flagged status.
        /// </summary>
        /// <value>The user&#39;s new flagged status.</value>
        [DataMember(Name = "flagged", EmitDefaultValue = true)]
        public bool Flagged { get; set; }

        /// <summary>
        /// The user&#39;s new customizer status.
        /// </summary>
        /// <value>The user&#39;s new customizer status.</value>
        [DataMember(Name = "customizer", EmitDefaultValue = true)]
        public bool Customizer { get; set; }

        /// <summary>
        /// The user&#39;s new vpn status.
        /// </summary>
        /// <value>The user&#39;s new vpn status.</value>
        [DataMember(Name = "vpn", EmitDefaultValue = true)]
        public bool Vpn { get; set; }

        /// <summary>
        /// The user&#39;s new service status.
        /// </summary>
        /// <value>The user&#39;s new service status.</value>
        [DataMember(Name = "service", EmitDefaultValue = true)]
        public bool Service { get; set; }

        /// <summary>
        /// The user&#39;s new education status.
        /// </summary>
        /// <value>The user&#39;s new education status.</value>
        [DataMember(Name = "education", EmitDefaultValue = true)]
        public bool Education { get; set; }

        /// <summary>
        /// The user&#39;s new special status.
        /// </summary>
        /// <value>The user&#39;s new special status.</value>
        [DataMember(Name = "special", EmitDefaultValue = true)]
        public bool Special { get; set; }

        /// <summary>
        /// The user&#39;s new suspiciousness rating.
        /// </summary>
        /// <value>The user&#39;s new suspiciousness rating.</value>
        [DataMember(Name = "new_suspicion", EmitDefaultValue = false)]
        public int NewSuspicion { get; set; }

        /// <summary>
        /// The new contact details.
        /// </summary>
        /// <value>The new contact details.</value>
        /// <example>email@example.com</example>
        [DataMember(Name = "contact", EmitDefaultValue = false)]
        public string Contact { get; set; }

        /// <summary>
        /// The new admin comment.
        /// </summary>
        /// <value>The new admin comment.</value>
        /// <example>User is sus</example>
        [DataMember(Name = "admin_comment", EmitDefaultValue = false)]
        public string AdminComment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModifyUser {\n");
            sb.Append("  NewKudos: ").Append(NewKudos).Append("\n");
            sb.Append("  Concurrency: ").Append(Concurrency).Append("\n");
            sb.Append("  UsageMultiplier: ").Append(UsageMultiplier).Append("\n");
            sb.Append("  WorkerInvited: ").Append(WorkerInvited).Append("\n");
            sb.Append("  Moderator: ").Append(Moderator).Append("\n");
            sb.Append("  PublicWorkers: ").Append(PublicWorkers).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  MonthlyKudos: ").Append(MonthlyKudos).Append("\n");
            sb.Append("  Trusted: ").Append(Trusted).Append("\n");
            sb.Append("  Flagged: ").Append(Flagged).Append("\n");
            sb.Append("  Customizer: ").Append(Customizer).Append("\n");
            sb.Append("  Vpn: ").Append(Vpn).Append("\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("  Education: ").Append(Education).Append("\n");
            sb.Append("  Special: ").Append(Special).Append("\n");
            sb.Append("  NewSuspicion: ").Append(NewSuspicion).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  AdminComment: ").Append(AdminComment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AdminComment (string) maxLength
            if (this.AdminComment != null && this.AdminComment.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AdminComment, length must be less than 500.", new [] { "AdminComment" });
            }

            // AdminComment (string) minLength
            if (this.AdminComment != null && this.AdminComment.Length < 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AdminComment, length must be greater than 5.", new [] { "AdminComment" });
            }

            yield break;
        }
    }

}
