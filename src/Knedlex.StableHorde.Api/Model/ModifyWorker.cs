/*
 * AI Horde
 *
 * The API documentation for the AI Horde
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Knedlex.StableHorde.Api.Client.OpenAPIDateConverter;

namespace Knedlex.StableHorde.Api.Model
{
    /// <summary>
    /// ModifyWorker
    /// </summary>
    [DataContract(Name = "ModifyWorker")]
    public partial class ModifyWorker : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModifyWorker" /> class.
        /// </summary>
        /// <param name="maintenance">The new state of the &#39;maintenance&#39; var for this worker. When True, this worker will not pick up any new requests..</param>
        /// <param name="paused">The new state of the &#39;paused&#39; var for this worker. When True, this worker will not be given any new requests..</param>
        /// <param name="info">The new state of the &#39;info&#39; var for this worker..</param>
        /// <param name="name">The new name for this this worker..</param>
        /// <param name="team">The new team of this worker..</param>
        public ModifyWorker(bool maintenance = default(bool), bool paused = default(bool), string info = default(string), string name = default(string), string team = default(string))
        {
            this.Maintenance = maintenance;
            this.Paused = paused;
            this.Info = info;
            this.Name = name;
            this.Team = team;
        }

        /// <summary>
        /// The new state of the &#39;maintenance&#39; var for this worker. When True, this worker will not pick up any new requests.
        /// </summary>
        /// <value>The new state of the &#39;maintenance&#39; var for this worker. When True, this worker will not pick up any new requests.</value>
        [DataMember(Name = "maintenance", EmitDefaultValue = true)]
        public bool Maintenance { get; set; }

        /// <summary>
        /// The new state of the &#39;paused&#39; var for this worker. When True, this worker will not be given any new requests.
        /// </summary>
        /// <value>The new state of the &#39;paused&#39; var for this worker. When True, this worker will not be given any new requests.</value>
        [DataMember(Name = "paused", EmitDefaultValue = true)]
        public bool Paused { get; set; }

        /// <summary>
        /// The new state of the &#39;info&#39; var for this worker.
        /// </summary>
        /// <value>The new state of the &#39;info&#39; var for this worker.</value>
        [DataMember(Name = "info", EmitDefaultValue = false)]
        public string Info { get; set; }

        /// <summary>
        /// The new name for this this worker.
        /// </summary>
        /// <value>The new name for this this worker.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The new team of this worker.
        /// </summary>
        /// <value>The new team of this worker.</value>
        /// <example>Direct Action</example>
        [DataMember(Name = "team", EmitDefaultValue = false)]
        public string Team { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModifyWorker {\n");
            sb.Append("  Maintenance: ").Append(Maintenance).Append("\n");
            sb.Append("  Paused: ").Append(Paused).Append("\n");
            sb.Append("  Info: ").Append(Info).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
